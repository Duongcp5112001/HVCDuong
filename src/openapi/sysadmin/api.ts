/* tslint:disable */
/* eslint-disable */
/**
 * System Admin API
 * 外部には公開せずにTAPが利用するAPI。
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject,setAuthorizationTokenToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export class Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    account_id: string
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name: string
}
/**
 * 
 * @export
 * @interface AccountHotel
 */
export class AccountHotel {
    /**
     * 
     * @type {string}
     * @memberof AccountHotel
     */
    hotel_id: string
    /**
     * 
     * @type {string}
     * @memberof AccountHotel
     */
    hotel_name?: string
    /**
     * 
     * @type {string}
     * @memberof AccountHotel
     */
    permission_group_id: string
}
/**
 * Request
 * @export
 * @interface ApiCommonResponseRequest
 */
export class ApiCommonResponseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    version?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    body?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    url?: string
}
/**
 * 
 * @export
 * @interface ApiCreateRequest
 */
export class ApiCreateRequest {
}
/**
 * 
 * @export
 * @interface ApiCreateResponse
 */
export class ApiCreateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiCreateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiCreateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiDeleteResponse
 */
export class ApiDeleteResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiDeleteResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiDeleteResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiError
 */
export class ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    code?: string
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ApiErrorResponseBadRequest
 */
export class ApiErrorResponseBadRequest {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseBadRequest
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseBadRequest
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof ApiErrorResponseBadRequest
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface ApiErrorResponseInternalError
 */
export class ApiErrorResponseInternalError {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseInternalError
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseInternalError
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseInternalError
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseNotFound
 */
export class ApiErrorResponseNotFound {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseNotFound
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseNotFound
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseNotFound
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseUnauthorized
 */
export class ApiErrorResponseUnauthorized {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseUnauthorized
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseUnauthorized
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseUnauthorized
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiGetResponse
 */
export class ApiGetResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiGetResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiGetResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiListResponse
 */
export class ApiListResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiListResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiListResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiListResponseAllOf
 */
export class ApiListResponseAllOf {
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponseAllOf
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export class ApiResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiUpdateRequest
 */
export class ApiUpdateRequest {
}
/**
 * 
 * @export
 * @interface ApiUpdateResponse
 */
export class ApiUpdateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiUpdateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiUpdateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface CreateAccountHotelRequest
 */
export class CreateAccountHotelRequest {
    /**
     * 
     * @type {AccountHotel}
     * @memberof CreateAccountHotelRequest
     */
    account_hotel?: AccountHotel
}
/**
 * 
 * @export
 * @interface CreateAccountHotelResponse
 */
export class CreateAccountHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateAccountHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateAccountHotelResponse
     */
    request_id?: string
    /**
     * 
     * @type {AccountHotel}
     * @memberof CreateAccountHotelResponse
     */
    account_hotel?: AccountHotel
}
/**
 * 
 * @export
 * @interface CreateAccountHotelResponseAllOf
 */
export class CreateAccountHotelResponseAllOf {
    /**
     * 
     * @type {AccountHotel}
     * @memberof CreateAccountHotelResponseAllOf
     */
    account_hotel?: AccountHotel
}
/**
 * 
 * @export
 * @interface CreateAccountRequest
 */
export class CreateAccountRequest {
    /**
     * 
     * @type {Account}
     * @memberof CreateAccountRequest
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface CreateAccountResponse
 */
export class CreateAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {Account}
     * @memberof CreateAccountResponse
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface CreateAccountResponseAllOf
 */
export class CreateAccountResponseAllOf {
    /**
     * 
     * @type {Account}
     * @memberof CreateAccountResponseAllOf
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface CreateHotelRequest
 */
export class CreateHotelRequest {
    /**
     * 
     * @type {Hotel}
     * @memberof CreateHotelRequest
     */
    hotel?: Hotel
}
/**
 * 
 * @export
 * @interface CreateHotelResponse
 */
export class CreateHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateHotelResponse
     */
    request_id?: string
    /**
     * 
     * @type {Hotel}
     * @memberof CreateHotelResponse
     */
    hotel?: Hotel
}
/**
 * 
 * @export
 * @interface CreateHotelResponseAllOf
 */
export class CreateHotelResponseAllOf {
    /**
     * 
     * @type {Hotel}
     * @memberof CreateHotelResponseAllOf
     */
    hotel?: Hotel
}
/**
 * 
 * @export
 * @interface DeleteAccountHotelResponse
 */
export class DeleteAccountHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteAccountHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteAccountHotelResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeleteAccountResponse
 */
export class DeleteAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteAccountResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeleteHotelResponse
 */
export class DeleteHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteHotelResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface GetAccountResponse
 */
export class GetAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {Account}
     * @memberof GetAccountResponse
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface GetHotelResponse
 */
export class GetHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetHotelResponse
     */
    request_id?: string
    /**
     * 
     * @type {Hotel}
     * @memberof GetHotelResponse
     */
    hotel?: Hotel
}
/**
 * 
 * @export
 * @interface Hotel
 */
export class Hotel {
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    hotel_id: string
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    code: string
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    name: string
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    name_alias: string
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    name_short: string
    /**
     * 
     * @type {string}
     * @memberof Hotel
     */
    symbol_characters: string
    /**
     * 
     * @type {number}
     * @memberof Hotel
     */
    sequence: number
}
/**
 * 
 * @export
 * @interface HotelDynamic
 */
export class HotelDynamic {
    /**
     * 
     * @type {string}
     * @memberof HotelDynamic
     */
    code: string
    /**
     * 
     * @type {string}
     * @memberof HotelDynamic
     */
    name: string
    /**
     * 
     * @type {string}
     * @memberof HotelDynamic
     */
    name_alias: string
    /**
     * 
     * @type {string}
     * @memberof HotelDynamic
     */
    name_short: string
    /**
     * 
     * @type {string}
     * @memberof HotelDynamic
     */
    symbol_characters: string
    /**
     * 
     * @type {number}
     * @memberof HotelDynamic
     */
    sequence: number
}
/**
 * 
 * @export
 * @interface HotelStatic
 */
export class HotelStatic {
    /**
     * 
     * @type {string}
     * @memberof HotelStatic
     */
    hotel_id: string
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export class InlineResponse400 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse400
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse400
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof InlineResponse400
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export class InlineResponse401 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse401
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse401
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse401
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export class InlineResponse404 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse404
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse404
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse404
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export class InlineResponse500 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse500
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse500
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse500
     */
    errors?: ApiError
}
/**
 * InvalidParameter
 * @export
 * @interface InvalidParameter
 */
export class InvalidParameter {
    /**
     * parameter name
     * @type {string}
     * @memberof InvalidParameter
     */
    parameter?: string
    /**
     * error detail
     * @type {string}
     * @memberof InvalidParameter
     */
    detail?: string
    /**
     * error code
     * @type {string}
     * @memberof InvalidParameter
     */
    code?: string
    /**
     * parameter value
     * @type {string}
     * @memberof InvalidParameter
     */
    value?: string
    /**
     * error message
     * @type {string}
     * @memberof InvalidParameter
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ListAccountHotelsResponse
 */
export class ListAccountHotelsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListAccountHotelsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListAccountHotelsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListAccountHotelsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<AccountHotel>}
     * @memberof ListAccountHotelsResponse
     */
    account_hotels?: Array<AccountHotel>
}
/**
 * 
 * @export
 * @interface ListAccountHotelsResponseAllOf
 */
export class ListAccountHotelsResponseAllOf {
    /**
     * 
     * @type {Array<AccountHotel>}
     * @memberof ListAccountHotelsResponseAllOf
     */
    account_hotels?: Array<AccountHotel>
}
/**
 * 
 * @export
 * @interface ListAccountsResponse
 */
export class ListAccountsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListAccountsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListAccountsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListAccountsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<Account>}
     * @memberof ListAccountsResponse
     */
    accounts?: Array<Account>
}
/**
 * 
 * @export
 * @interface ListAccountsResponseAllOf
 */
export class ListAccountsResponseAllOf {
    /**
     * 
     * @type {Array<Account>}
     * @memberof ListAccountsResponseAllOf
     */
    accounts?: Array<Account>
}
/**
 * 
 * @export
 * @interface ListHotelsResponse
 */
export class ListHotelsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListHotelsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListHotelsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListHotelsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<Hotel>}
     * @memberof ListHotelsResponse
     */
    hotels?: Array<Hotel>
}
/**
 * 
 * @export
 * @interface ListHotelsResponseAllOf
 */
export class ListHotelsResponseAllOf {
    /**
     * 
     * @type {Array<Hotel>}
     * @memberof ListHotelsResponseAllOf
     */
    hotels?: Array<Hotel>
}
/**
 * 
 * @export
 * @interface UpdateAccountRequest
 */
export class UpdateAccountRequest {
    /**
     * 
     * @type {Account}
     * @memberof UpdateAccountRequest
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface UpdateAccountResponse
 */
export class UpdateAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {Account}
     * @memberof UpdateAccountResponse
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface UpdateHotelRequest
 */
export class UpdateHotelRequest {
    /**
     * 
     * @type {HotelDynamic}
     * @memberof UpdateHotelRequest
     */
    hotel?: HotelDynamic
}
/**
 * 
 * @export
 * @interface UpdateHotelRequestAllOf
 */
export class UpdateHotelRequestAllOf {
    /**
     * 
     * @type {HotelDynamic}
     * @memberof UpdateHotelRequestAllOf
     */
    hotel?: HotelDynamic
}
/**
 * 
 * @export
 * @interface UpdateHotelResponse
 */
export class UpdateHotelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateHotelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateHotelResponse
     */
    request_id?: string
    /**
     * 
     * @type {Hotel}
     * @memberof UpdateHotelResponse
     */
    hotel?: Hotel
}

/**
 * AccountHotelsApi - axios parameter creator
 * @export
 */
export const AccountHotelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アカウントホテルの新規作成
         * @param {string} accountId account id
         * @param {CreateAccountHotelRequest} [createAccountHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountHotel: async (accountId: string, createAccountHotelRequest?: CreateAccountHotelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createAccountHotel', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/hotels`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountHotelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントホテルの削除
         * @param {string} accountId account id
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountHotel: async (accountId: string, hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteAccountHotel', 'accountId', accountId)
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('deleteAccountHotel', 'hotelId', hotelId)
            const localVarPath = `/accounts/{account_id}/hotels/{hotel_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントホテルの一覧取得
         * @param {string} accountId account id
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountHotels: async (accountId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listAccountHotels', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/hotels`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountHotelsApi - functional programming interface
 * @export
 */
export const AccountHotelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountHotelsApiAxiosParamCreator(configuration)
    return {
        /**
         * アカウントホテルの新規作成
         * @param {string} accountId account id
         * @param {CreateAccountHotelRequest} [createAccountHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountHotel(accountId: string, createAccountHotelRequest?: CreateAccountHotelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAccountHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountHotel(accountId, createAccountHotelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントホテルの削除
         * @param {string} accountId account id
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountHotel(accountId: string, hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccountHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountHotel(accountId, hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントホテルの一覧取得
         * @param {string} accountId account id
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountHotels(accountId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAccountHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountHotels(accountId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountHotelsApi - factory interface
 * @export
 */
export const AccountHotelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountHotelsApiFp(configuration)
    return {
        /**
         * アカウントホテルの新規作成
         * @param {string} accountId account id
         * @param {CreateAccountHotelRequest} [createAccountHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountHotel(accountId: string, createAccountHotelRequest?: CreateAccountHotelRequest, options?: any): AxiosPromise<CreateAccountHotelResponse> {
            return localVarFp.createAccountHotel(accountId, createAccountHotelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントホテルの削除
         * @param {string} accountId account id
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountHotel(accountId: string, hotelId: string, options?: any): AxiosPromise<DeleteAccountHotelResponse> {
            return localVarFp.deleteAccountHotel(accountId, hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントホテルの一覧取得
         * @param {string} accountId account id
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountHotels(accountId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListAccountHotelsResponse> {
            return localVarFp.listAccountHotels(accountId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccountHotel operation in AccountHotelsApi.
 * @export
 * @interface AccountHotelsApiCreateAccountHotelRequest
 */
export class AccountHotelsApiCreateAccountHotelRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountHotelsApiCreateAccountHotel
     */
    accountId: string

    /**
     * 
     * @type {CreateAccountHotelRequest}
     * @memberof AccountHotelsApiCreateAccountHotel
     */
    createAccountHotelRequest?: CreateAccountHotelRequest
}

/**
 * Request parameters for deleteAccountHotel operation in AccountHotelsApi.
 * @export
 * @interface AccountHotelsApiDeleteAccountHotelRequest
 */
export class AccountHotelsApiDeleteAccountHotelRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountHotelsApiDeleteAccountHotel
     */
    accountId: string

    /**
     * hotel id
     * @type {string}
     * @memberof AccountHotelsApiDeleteAccountHotel
     */
    hotelId: string
}

/**
 * Request parameters for listAccountHotels operation in AccountHotelsApi.
 * @export
 * @interface AccountHotelsApiListAccountHotelsRequest
 */
export class AccountHotelsApiListAccountHotelsRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountHotelsApiListAccountHotels
     */
    accountId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof AccountHotelsApiListAccountHotels
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof AccountHotelsApiListAccountHotels
     */
    limit?: number
}

/**
 * AccountHotelsApi - object-oriented interface
 * @export
 * @class AccountHotelsApi
 * @extends {BaseAPI}
 */
export class AccountHotelsApi extends BaseAPI {
    /**
     * アカウントホテルの新規作成
     * @param {AccountHotelsApiCreateAccountHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountHotelsApi
     */
    public createAccountHotel(requestParameters: AccountHotelsApiCreateAccountHotelRequest, options?: AxiosRequestConfig) {
        return AccountHotelsApiFp(this.configuration).createAccountHotel(requestParameters.accountId, requestParameters.createAccountHotelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントホテルの削除
     * @param {AccountHotelsApiDeleteAccountHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountHotelsApi
     */
    public deleteAccountHotel(requestParameters: AccountHotelsApiDeleteAccountHotelRequest, options?: AxiosRequestConfig) {
        return AccountHotelsApiFp(this.configuration).deleteAccountHotel(requestParameters.accountId, requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントホテルの一覧取得
     * @param {AccountHotelsApiListAccountHotelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountHotelsApi
     */
    public listAccountHotels(requestParameters: AccountHotelsApiListAccountHotelsRequest, options?: AxiosRequestConfig) {
        return AccountHotelsApiFp(this.configuration).listAccountHotels(requestParameters.accountId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アカウントの新規作成
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (createAccountRequest?: CreateAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysadmin/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントの削除
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteAccount', 'accountId', accountId)
            const localVarPath = `/sysadmin/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント取得
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccount', 'accountId', accountId)
            const localVarPath = `/sysadmin/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: async (cursor?: string, limit?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysadmin/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントの更新
         * @param {string} accountId account id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (accountId: string, updateAccountRequest?: UpdateAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccount', 'accountId', accountId)
            const localVarPath = `/sysadmin/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * アカウントの新規作成
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(createAccountRequest?: CreateAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(createAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントの削除
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント取得
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccounts(cursor?: string, limit?: number, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccounts(cursor, limit, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントの更新
         * @param {string} accountId account id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(accountId, updateAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * アカウントの新規作成
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(createAccountRequest?: CreateAccountRequest, options?: any): AxiosPromise<CreateAccountResponse> {
            return localVarFp.createAccount(createAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントの削除
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(accountId: string, options?: any): AxiosPromise<DeleteAccountResponse> {
            return localVarFp.deleteAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント取得
         * @param {string} accountId account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: string, options?: any): AxiosPromise<GetAccountResponse> {
            return localVarFp.getAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(cursor?: string, limit?: number, name?: string, options?: any): AxiosPromise<ListAccountsResponse> {
            return localVarFp.listAccounts(cursor, limit, name, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントの更新
         * @param {string} accountId account id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: any): AxiosPromise<UpdateAccountResponse> {
            return localVarFp.updateAccount(accountId, updateAccountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateAccountRequest
 */
export class AccountsApiCreateAccountRequest {
    /**
     * 
     * @type {CreateAccountRequest}
     * @memberof AccountsApiCreateAccount
     */
    createAccountRequest?: CreateAccountRequest
}

/**
 * Request parameters for deleteAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountRequest
 */
export class AccountsApiDeleteAccountRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountsApiDeleteAccount
     */
    accountId: string
}

/**
 * Request parameters for getAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRequest
 */
export class AccountsApiGetAccountRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountsApiGetAccount
     */
    accountId: string
}

/**
 * Request parameters for listAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiListAccountsRequest
 */
export class AccountsApiListAccountsRequest {
    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof AccountsApiListAccounts
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof AccountsApiListAccounts
     */
    limit?: number

    /**
     * name
     * @type {string}
     * @memberof AccountsApiListAccounts
     */
    name?: string
}

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export class AccountsApiUpdateAccountRequest {
    /**
     * account id
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    accountId: string

    /**
     * 
     * @type {UpdateAccountRequest}
     * @memberof AccountsApiUpdateAccount
     */
    updateAccountRequest?: UpdateAccountRequest
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * アカウントの新規作成
     * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public createAccount(requestParameters: AccountsApiCreateAccountRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createAccount(requestParameters.createAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントの削除
     * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteAccount(requestParameters: AccountsApiDeleteAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).deleteAccount(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント取得
     * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccount(requestParameters: AccountsApiGetAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccount(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントの一覧取得
     * @param {AccountsApiListAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public listAccounts(requestParameters: AccountsApiListAccountsRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listAccounts(requestParameters.cursor, requestParameters.limit, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントの更新
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccount(requestParameters.accountId, requestParameters.updateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HotelsApi - axios parameter creator
 * @export
 */
export const HotelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ホテルの新規登録
         * @param {CreateHotelRequest} [createHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHotel: async (createHotelRequest?: CreateHotelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hotels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHotelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホテルの削除
         * @summary ホテルの削除
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHotel: async (hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('deleteHotel', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホテルの取得
         * @summary ホテルの取得
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotel: async (hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('getHotel', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホテルの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels: async (cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hotels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホテルの更新
         * @summary ホテルの更新
         * @param {string} hotelId hotel id
         * @param {UpdateHotelRequest} [updateHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHotel: async (hotelId: string, updateHotelRequest?: UpdateHotelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('updateHotel', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHotelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelsApi - functional programming interface
 * @export
 */
export const HotelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HotelsApiAxiosParamCreator(configuration)
    return {
        /**
         * ホテルの新規登録
         * @param {CreateHotelRequest} [createHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHotel(createHotelRequest?: CreateHotelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHotel(createHotelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホテルの削除
         * @summary ホテルの削除
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHotel(hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHotel(hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホテルの取得
         * @summary ホテルの取得
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotel(hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotel(hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホテルの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHotels(cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHotels(cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホテルの更新
         * @summary ホテルの更新
         * @param {string} hotelId hotel id
         * @param {UpdateHotelRequest} [updateHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHotel(hotelId: string, updateHotelRequest?: UpdateHotelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateHotelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHotel(hotelId, updateHotelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HotelsApi - factory interface
 * @export
 */
export const HotelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HotelsApiFp(configuration)
    return {
        /**
         * ホテルの新規登録
         * @param {CreateHotelRequest} [createHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHotel(createHotelRequest?: CreateHotelRequest, options?: any): AxiosPromise<CreateHotelResponse> {
            return localVarFp.createHotel(createHotelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ホテルの削除
         * @summary ホテルの削除
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHotel(hotelId: string, options?: any): AxiosPromise<DeleteHotelResponse> {
            return localVarFp.deleteHotel(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * ホテルの取得
         * @summary ホテルの取得
         * @param {string} hotelId hotel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotel(hotelId: string, options?: any): AxiosPromise<GetHotelResponse> {
            return localVarFp.getHotel(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * ホテルの一覧取得
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels(cursor?: string, limit?: number, options?: any): AxiosPromise<ListHotelsResponse> {
            return localVarFp.listHotels(cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * ホテルの更新
         * @summary ホテルの更新
         * @param {string} hotelId hotel id
         * @param {UpdateHotelRequest} [updateHotelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHotel(hotelId: string, updateHotelRequest?: UpdateHotelRequest, options?: any): AxiosPromise<UpdateHotelResponse> {
            return localVarFp.updateHotel(hotelId, updateHotelRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createHotel operation in HotelsApi.
 * @export
 * @interface HotelsApiCreateHotelRequest
 */
export class HotelsApiCreateHotelRequest {
    /**
     * 
     * @type {CreateHotelRequest}
     * @memberof HotelsApiCreateHotel
     */
    createHotelRequest?: CreateHotelRequest
}

/**
 * Request parameters for deleteHotel operation in HotelsApi.
 * @export
 * @interface HotelsApiDeleteHotelRequest
 */
export class HotelsApiDeleteHotelRequest {
    /**
     * hotel id
     * @type {string}
     * @memberof HotelsApiDeleteHotel
     */
    hotelId: string
}

/**
 * Request parameters for getHotel operation in HotelsApi.
 * @export
 * @interface HotelsApiGetHotelRequest
 */
export class HotelsApiGetHotelRequest {
    /**
     * hotel id
     * @type {string}
     * @memberof HotelsApiGetHotel
     */
    hotelId: string
}

/**
 * Request parameters for listHotels operation in HotelsApi.
 * @export
 * @interface HotelsApiListHotelsRequest
 */
export class HotelsApiListHotelsRequest {
    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof HotelsApiListHotels
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof HotelsApiListHotels
     */
    limit?: number
}

/**
 * Request parameters for updateHotel operation in HotelsApi.
 * @export
 * @interface HotelsApiUpdateHotelRequest
 */
export class HotelsApiUpdateHotelRequest {
    /**
     * hotel id
     * @type {string}
     * @memberof HotelsApiUpdateHotel
     */
    hotelId: string

    /**
     * 
     * @type {UpdateHotelRequest}
     * @memberof HotelsApiUpdateHotel
     */
    updateHotelRequest?: UpdateHotelRequest
}

/**
 * HotelsApi - object-oriented interface
 * @export
 * @class HotelsApi
 * @extends {BaseAPI}
 */
export class HotelsApi extends BaseAPI {
    /**
     * ホテルの新規登録
     * @param {HotelsApiCreateHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelsApi
     */
    public createHotel(requestParameters: HotelsApiCreateHotelRequest = {}, options?: AxiosRequestConfig) {
        return HotelsApiFp(this.configuration).createHotel(requestParameters.createHotelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホテルの削除
     * @summary ホテルの削除
     * @param {HotelsApiDeleteHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelsApi
     */
    public deleteHotel(requestParameters: HotelsApiDeleteHotelRequest, options?: AxiosRequestConfig) {
        return HotelsApiFp(this.configuration).deleteHotel(requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホテルの取得
     * @summary ホテルの取得
     * @param {HotelsApiGetHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelsApi
     */
    public getHotel(requestParameters: HotelsApiGetHotelRequest, options?: AxiosRequestConfig) {
        return HotelsApiFp(this.configuration).getHotel(requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホテルの一覧取得
     * @param {HotelsApiListHotelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelsApi
     */
    public listHotels(requestParameters: HotelsApiListHotelsRequest = {}, options?: AxiosRequestConfig) {
        return HotelsApiFp(this.configuration).listHotels(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホテルの更新
     * @summary ホテルの更新
     * @param {HotelsApiUpdateHotelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelsApi
     */
    public updateHotel(requestParameters: HotelsApiUpdateHotelRequest, options?: AxiosRequestConfig) {
        return HotelsApiFp(this.configuration).updateHotel(requestParameters.hotelId, requestParameters.updateHotelRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



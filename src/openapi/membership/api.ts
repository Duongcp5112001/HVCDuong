/* tslint:disable */
/* eslint-disable */
/**
 * Tap Hub API - Membership API
 * API References
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject,setAuthorizationTokenToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Request
 * @export
 * @interface ApiCommonResponseRequest
 */
export class ApiCommonResponseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    version?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    body?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    url?: string
}
/**
 * 
 * @export
 * @interface ApiCreateRequest
 */
export class ApiCreateRequest {
}
/**
 * 
 * @export
 * @interface ApiCreateResponse
 */
export class ApiCreateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiCreateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiCreateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiDeleteResponse
 */
export class ApiDeleteResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiDeleteResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiDeleteResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiError
 */
export class ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    code?: string
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ApiErrorResponseBadRequest
 */
export class ApiErrorResponseBadRequest {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseBadRequest
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseBadRequest
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof ApiErrorResponseBadRequest
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface ApiErrorResponseInternalError
 */
export class ApiErrorResponseInternalError {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseInternalError
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseInternalError
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseInternalError
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseNotFound
 */
export class ApiErrorResponseNotFound {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseNotFound
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseNotFound
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseNotFound
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseUnauthorized
 */
export class ApiErrorResponseUnauthorized {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseUnauthorized
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseUnauthorized
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseUnauthorized
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiGetResponse
 */
export class ApiGetResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiGetResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiGetResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiListResponse
 */
export class ApiListResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiListResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiListResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiListResponseAllOf
 */
export class ApiListResponseAllOf {
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponseAllOf
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export class ApiResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiUpdateRequest
 */
export class ApiUpdateRequest {
}
/**
 * 
 * @export
 * @interface ApiUpdateResponse
 */
export class ApiUpdateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiUpdateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiUpdateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketDispatchRequestRequest
 */
export class CreateMembershipCustomerAccountTicketDispatchRequestRequest {
    /**
     * 
     * @type {MembershipCustomerAccountTicketDispatchRequest}
     * @memberof CreateMembershipCustomerAccountTicketDispatchRequestRequest
     */
    membership_customer_account_ticket_dispatch_request?: MembershipCustomerAccountTicketDispatchRequest
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketDispatchRequestResponse
 */
export class CreateMembershipCustomerAccountTicketDispatchRequestResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateMembershipCustomerAccountTicketDispatchRequestResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateMembershipCustomerAccountTicketDispatchRequestResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketDispatchRequest}
     * @memberof CreateMembershipCustomerAccountTicketDispatchRequestResponse
     */
    membership_customer_account_ticket_dispatch_request?: MembershipCustomerAccountTicketDispatchRequest
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketDispatchRequestResponseAllOf
 */
export class CreateMembershipCustomerAccountTicketDispatchRequestResponseAllOf {
    /**
     * 
     * @type {MembershipCustomerAccountTicketDispatchRequest}
     * @memberof CreateMembershipCustomerAccountTicketDispatchRequestResponseAllOf
     */
    membership_customer_account_ticket_dispatch_request?: MembershipCustomerAccountTicketDispatchRequest
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest
 */
export class CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest {
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse
 */
export class CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketReceiverRequest
 */
export class CreateMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof CreateMembershipCustomerAccountTicketReceiverRequest
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketReceiverResponse
 */
export class CreateMembershipCustomerAccountTicketReceiverResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateMembershipCustomerAccountTicketReceiverResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateMembershipCustomerAccountTicketReceiverResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof CreateMembershipCustomerAccountTicketReceiverResponse
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketReceiverResponseAllOf
 */
export class CreateMembershipCustomerAccountTicketReceiverResponseAllOf {
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof CreateMembershipCustomerAccountTicketReceiverResponseAllOf
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketTransferRequest
 */
export class CreateMembershipCustomerAccountTicketTransferRequest {
    /**
     * 
     * @type {MembershipCustomerAccountTicketTransfer}
     * @memberof CreateMembershipCustomerAccountTicketTransferRequest
     */
    membership_ticket_transfer?: MembershipCustomerAccountTicketTransfer
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketTransferResponse
 */
export class CreateMembershipCustomerAccountTicketTransferResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateMembershipCustomerAccountTicketTransferResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateMembershipCustomerAccountTicketTransferResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketTransfer}
     * @memberof CreateMembershipCustomerAccountTicketTransferResponse
     */
    membership_ticket_transfer?: MembershipCustomerAccountTicketTransfer
}
/**
 * 
 * @export
 * @interface CreateMembershipCustomerAccountTicketTransferResponseAllOf
 */
export class CreateMembershipCustomerAccountTicketTransferResponseAllOf {
    /**
     * 
     * @type {MembershipCustomerAccountTicketTransfer}
     * @memberof CreateMembershipCustomerAccountTicketTransferResponseAllOf
     */
    membership_ticket_transfer?: MembershipCustomerAccountTicketTransfer
}
/**
 * 
 * @export
 * @interface CreateMembershipHotelReservationRequest
 */
export class CreateMembershipHotelReservationRequest {
    /**
     * 
     * @type {MembershipHotelReservation}
     * @memberof CreateMembershipHotelReservationRequest
     */
    reservation?: MembershipHotelReservation
}
/**
 * 
 * @export
 * @interface CreateMembershipHotelReservationResponse
 */
export class CreateMembershipHotelReservationResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateMembershipHotelReservationResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateMembershipHotelReservationResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipHotelReservation}
     * @memberof CreateMembershipHotelReservationResponse
     */
    reservation?: MembershipHotelReservation
}
/**
 * 
 * @export
 * @interface CreateMembershipHotelReservationResponseAllOf
 */
export class CreateMembershipHotelReservationResponseAllOf {
    /**
     * 
     * @type {MembershipHotelReservation}
     * @memberof CreateMembershipHotelReservationResponseAllOf
     */
    reservation?: MembershipHotelReservation
}
/**
 * CustomerClassId
 * @export
 * @enum {string}
 */

export const CustomerClassId = {
    Corporation: 'Corporation',
    Individual: 'Individual'
} as const;

export type CustomerClassId = typeof CustomerClassId[keyof typeof CustomerClassId];


/**
 * CustomerListItem
 * @export
 * @interface CustomerListItem
 */
export class CustomerListItem {
    /**
     * address_lines
     * @type {Array<string>}
     * @memberof CustomerListItem
     */
    address_lines?: Array<string>
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerListItem
     */
    birth_date?: string
    /**
     * customer_id
     * @type {string}
     * @memberof CustomerListItem
     */
    customer_id?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof CustomerListItem
     */
    customer_class_id?: CustomerClassId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerListItem
     */
    email?: string
    /**
     * fax_no
     * @type {string}
     * @memberof CustomerListItem
     */
    fax_no?: string
    /**
     * is_active
     * @type {boolean}
     * @memberof CustomerListItem
     */
    is_active?: boolean
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerListItem
     */
    name_alias?: string
    /**
     * number_of_times
     * @type {number}
     * @memberof CustomerListItem
     */
    number_of_times?: number
    /**
     * phone_no_0
     * @type {string}
     * @memberof CustomerListItem
     */
    phone_no_0?: string
    /**
     * phone_no_1
     * @type {string}
     * @memberof CustomerListItem
     */
    phone_no_1?: string
    /**
     * postal_code
     * @type {string}
     * @memberof CustomerListItem
     */
    postal_code?: string
}
/**
 * 
 * @export
 * @interface DateRange
 */
export class DateRange {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof DateRange
     */
    end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof DateRange
     */
    start?: string
}
/**
 * 
 * @export
 * @interface DeleteMembershipCustomerAccountTicketReceiverResponse
 */
export class DeleteMembershipCustomerAccountTicketReceiverResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteMembershipCustomerAccountTicketReceiverResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteMembershipCustomerAccountTicketReceiverResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof DeleteMembershipCustomerAccountTicketReceiverResponse
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface GetMembershipCustomerAccountTicketDispatchRequestConditionResponse
 */
export class GetMembershipCustomerAccountTicketDispatchRequestConditionResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetMembershipCustomerAccountTicketDispatchRequestConditionResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetMembershipCustomerAccountTicketDispatchRequestConditionResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketDispatchRequestCondition}
     * @memberof GetMembershipCustomerAccountTicketDispatchRequestConditionResponse
     */
    membership_customer_account_ticket_dispatch_request_condition?: MembershipCustomerAccountTicketDispatchRequestCondition
}
/**
 * 
 * @export
 * @interface GetMembershipCustomerAccountTicketDispatchRequestConditionResponseAllOf
 */
export class GetMembershipCustomerAccountTicketDispatchRequestConditionResponseAllOf {
    /**
     * 
     * @type {MembershipCustomerAccountTicketDispatchRequestCondition}
     * @memberof GetMembershipCustomerAccountTicketDispatchRequestConditionResponseAllOf
     */
    membership_customer_account_ticket_dispatch_request_condition?: MembershipCustomerAccountTicketDispatchRequestCondition
}
/**
 * 
 * @export
 * @interface GetMembershipCustomerAccountTicketReceiverResponse
 */
export class GetMembershipCustomerAccountTicketReceiverResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetMembershipCustomerAccountTicketReceiverResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetMembershipCustomerAccountTicketReceiverResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof GetMembershipCustomerAccountTicketReceiverResponse
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface GetMembershipTicketReceiverConditionResponse
 */
export class GetMembershipTicketReceiverConditionResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetMembershipTicketReceiverConditionResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetMembershipTicketReceiverConditionResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipTicketReceiverCondition}
     * @memberof GetMembershipTicketReceiverConditionResponse
     */
    membership_ticket_receiver_condition?: MembershipTicketReceiverCondition
}
/**
 * 
 * @export
 * @interface GetMembershipTicketReceiverConditionResponseAllOf
 */
export class GetMembershipTicketReceiverConditionResponseAllOf {
    /**
     * 
     * @type {MembershipTicketReceiverCondition}
     * @memberof GetMembershipTicketReceiverConditionResponseAllOf
     */
    membership_ticket_receiver_condition?: MembershipTicketReceiverCondition
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export class InlineResponse400 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse400
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse400
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof InlineResponse400
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export class InlineResponse401 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse401
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse401
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse401
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export class InlineResponse404 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse404
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse404
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse404
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export class InlineResponse500 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse500
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse500
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse500
     */
    errors?: ApiError
}
/**
 * InvalidParameter
 * @export
 * @interface InvalidParameter
 */
export class InvalidParameter {
    /**
     * parameter name
     * @type {string}
     * @memberof InvalidParameter
     */
    parameter?: string
    /**
     * error detail
     * @type {string}
     * @memberof InvalidParameter
     */
    detail?: string
    /**
     * error code
     * @type {string}
     * @memberof InvalidParameter
     */
    code?: string
    /**
     * parameter value
     * @type {string}
     * @memberof InvalidParameter
     */
    value?: string
    /**
     * error message
     * @type {string}
     * @memberof InvalidParameter
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerAccountTicketReceiversResponse
 */
export class ListMembershipCustomerAccountTicketReceiversResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomerAccountTicketReceiversResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomerAccountTicketReceiversResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomerAccountTicketReceiversResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipCustomerAccountTicketReceiver>}
     * @memberof ListMembershipCustomerAccountTicketReceiversResponse
     */
    membership_customer_account_receivers?: Array<MembershipCustomerAccountTicketReceiver>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerAccountTicketReceiversResponseAllOf
 */
export class ListMembershipCustomerAccountTicketReceiversResponseAllOf {
    /**
     * 
     * @type {Array<MembershipCustomerAccountTicketReceiver>}
     * @memberof ListMembershipCustomerAccountTicketReceiversResponseAllOf
     */
    membership_customer_account_receivers?: Array<MembershipCustomerAccountTicketReceiver>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerAccountTicketSummariesResponse
 */
export class ListMembershipCustomerAccountTicketSummariesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomerAccountTicketSummariesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomerAccountTicketSummariesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomerAccountTicketSummariesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipTicketSummary>}
     * @memberof ListMembershipCustomerAccountTicketSummariesResponse
     */
    membership_ticket_summaries?: Array<MembershipTicketSummary>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerContractGroupsResponse
 */
export class ListMembershipCustomerContractGroupsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomerContractGroupsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomerContractGroupsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomerContractGroupsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipContractGroups>}
     * @memberof ListMembershipCustomerContractGroupsResponse
     */
    groups?: Array<MembershipContractGroups>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerContractGroupsResponseAllOf
 */
export class ListMembershipCustomerContractGroupsResponseAllOf {
    /**
     * 
     * @type {Array<MembershipContractGroups>}
     * @memberof ListMembershipCustomerContractGroupsResponseAllOf
     */
    groups?: Array<MembershipContractGroups>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerTicketSummariesResponse
 */
export class ListMembershipCustomerTicketSummariesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomerTicketSummariesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomerTicketSummariesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomerTicketSummariesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipTicketSummary>}
     * @memberof ListMembershipCustomerTicketSummariesResponse
     */
    membership_ticket_summaries?: Array<MembershipTicketSummary>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerTicketSummariesResponseAllOf
 */
export class ListMembershipCustomerTicketSummariesResponseAllOf {
    /**
     * 
     * @type {Array<MembershipTicketSummary>}
     * @memberof ListMembershipCustomerTicketSummariesResponseAllOf
     */
    membership_ticket_summaries?: Array<MembershipTicketSummary>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerTicketsResponse
 */
export class ListMembershipCustomerTicketsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomerTicketsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomerTicketsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomerTicketsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipTicketListItem>}
     * @memberof ListMembershipCustomerTicketsResponse
     */
    membership_ticket_summaries?: Array<MembershipTicketListItem>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomerTicketsResponseAllOf
 */
export class ListMembershipCustomerTicketsResponseAllOf {
    /**
     * 
     * @type {Array<MembershipTicketListItem>}
     * @memberof ListMembershipCustomerTicketsResponseAllOf
     */
    membership_ticket_summaries?: Array<MembershipTicketListItem>
}
/**
 * 
 * @export
 * @interface ListMembershipCustomersResponse
 */
export class ListMembershipCustomersResponse {
    /**
     * 
     * @type {Array<MembershipCustomerListItem>}
     * @memberof ListMembershipCustomersResponse
     */
    membership_customer_list_items?: Array<MembershipCustomerListItem>
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipCustomersResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipCustomersResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipCustomersResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ListMembershipHotelBusinessesResponse
 */
export class ListMembershipHotelBusinessesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipHotelBusinessesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipHotelBusinessesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipHotelBusinessesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipBusiness>}
     * @memberof ListMembershipHotelBusinessesResponse
     */
    membership_businesses?: Array<MembershipBusiness>
}
/**
 * 
 * @export
 * @interface ListMembershipHotelBusinessesResponseAllOf
 */
export class ListMembershipHotelBusinessesResponseAllOf {
    /**
     * 
     * @type {Array<MembershipBusiness>}
     * @memberof ListMembershipHotelBusinessesResponseAllOf
     */
    membership_businesses?: Array<MembershipBusiness>
}
/**
 * 
 * @export
 * @interface ListMembershipHotelsResponse
 */
export class ListMembershipHotelsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipHotelsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipHotelsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipHotelsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipHotel>}
     * @memberof ListMembershipHotelsResponse
     */
    membership_hotels?: Array<MembershipHotel>
}
/**
 * 
 * @export
 * @interface ListMembershipHotelsResponseAllOf
 */
export class ListMembershipHotelsResponseAllOf {
    /**
     * 
     * @type {Array<MembershipHotel>}
     * @memberof ListMembershipHotelsResponseAllOf
     */
    membership_hotels?: Array<MembershipHotel>
}
/**
 * 
 * @export
 * @interface ListMembershipTicketSummariesResponse
 */
export class ListMembershipTicketSummariesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipTicketSummariesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipTicketSummariesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipTicketSummariesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipTicketSummary>}
     * @memberof ListMembershipTicketSummariesResponse
     */
    membershipticketsummaries?: Array<MembershipTicketSummary>
}
/**
 * 
 * @export
 * @interface ListMembershipTicketSummariesResponseAllOf
 */
export class ListMembershipTicketSummariesResponseAllOf {
    /**
     * 
     * @type {Array<MembershipTicketSummary>}
     * @memberof ListMembershipTicketSummariesResponseAllOf
     */
    membershipticketsummaries?: Array<MembershipTicketSummary>
}
/**
 * 
 * @export
 * @interface ListMembershipTicketsResponse
 */
export class ListMembershipTicketsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMembershipTicketsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMembershipTicketsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMembershipTicketsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MembershipTicketListItem>}
     * @memberof ListMembershipTicketsResponse
     */
    items?: Array<MembershipTicketListItem>
}
/**
 * 
 * @export
 * @interface ListMembershipTicketsResponseAllOf
 */
export class ListMembershipTicketsResponseAllOf {
    /**
     * 
     * @type {Array<MembershipTicketListItem>}
     * @memberof ListMembershipTicketsResponseAllOf
     */
    items?: Array<MembershipTicketListItem>
}
/**
 * 
 * @export
 * @interface MembershipBusiness
 */
export class MembershipBusiness {
    /**
     * 
     * @type {string}
     * @memberof MembershipBusiness
     */
    membership_business_id: string
}
/**
 * 
 * @export
 * @interface MembershipContractGroupItem
 */
export class MembershipContractGroupItem {
    /**
     * hotel right id
     * @type {string}
     * @memberof MembershipContractGroupItem
     */
    hotel_right_id?: string
    /**
     * membership contract group id
     * @type {string}
     * @memberof MembershipContractGroupItem
     */
    membership_contract_group_id?: string
    /**
     * membership contract group label
     * @type {string}
     * @memberof MembershipContractGroupItem
     */
    membership_contract_group_label?: string
}
/**
 * 
 * @export
 * @interface MembershipContractGroups
 */
export class MembershipContractGroups {
    /**
     * 
     * @type {string}
     * @memberof MembershipContractGroups
     */
    hotel_right_id?: string
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketDispatchRequest
 */
export class MembershipCustomerAccountTicketDispatchRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    address_lines?: Array<string>
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    business_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    customer_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    customer_name?: string
    /**
     * 
     * @type {Array<MembershipCustomerAccountTicketDispatchRequestDetail>}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    details?: Array<MembershipCustomerAccountTicketDispatchRequestDetail>
    /**
     * 
     * @type {boolean}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    is_all_tickets?: boolean
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    membership_ticket_dispatch_request_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    phone_no?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequest
     */
    postal_code?: string
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketDispatchRequestCondition
 */
export class MembershipCustomerAccountTicketDispatchRequestCondition {
    /**
     * 
     * @type {Array<string>}
     * @memberof MembershipCustomerAccountTicketDispatchRequestCondition
     */
    address_lines?: Array<string>
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequestCondition
     */
    hotel_name?: string
    /**
     * 
     * @type {Array<MembershipContractGroupItem>}
     * @memberof MembershipCustomerAccountTicketDispatchRequestCondition
     */
    contract_groups?: Array<MembershipContractGroupItem>
    /**
     * 
     * @type {Array<MembershipTicketTypeItem>}
     * @memberof MembershipCustomerAccountTicketDispatchRequestCondition
     */
    ticket_types?: Array<MembershipTicketTypeItem>
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketDispatchRequestDetail
 */
export class MembershipCustomerAccountTicketDispatchRequestDetail {
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequestDetail
     */
    membership_ticket_dispatch_request_detail_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequestDetail
     */
    membership_contract_group_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketDispatchRequestDetail
     */
    membership_ticket_type_id?: string
    /**
     * 
     * @type {number}
     * @memberof MembershipCustomerAccountTicketDispatchRequestDetail
     */
    quantity?: number
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketReceiver
 */
export class MembershipCustomerAccountTicketReceiver {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    business_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    customer_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    customer_id_receiver?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    customer_name?: string
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    email_auth_requested?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    nick_name?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    membership_ticket_receiver_id?: string
    /**
     * 
     * @type {MembershipTicketReceiverStatusId}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    membership_ticket_receiver_status_id?: MembershipTicketReceiverStatusId
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomerAccountTicketReceiver
     */
    relation_type_id?: string
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketTransfer
 */
export class MembershipCustomerAccountTicketTransfer {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    business_id?: string
    /**
     * 顧客ID
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    customer_id?: string
    /**
     * 顧客名
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    customer_name?: string
    /**
     * 
     * @type {Array<MembershipCustomerAccountTicketTransferDetail>}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    detail?: Array<MembershipCustomerAccountTicketTransferDetail>
    /**
     * membership ticket receiver id
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    membership_ticket_receiver_id?: string
    /**
     * membership ticket transfer id
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransfer
     */
    membership_ticket_transfer_id?: string
}
/**
 * 
 * @export
 * @interface MembershipCustomerAccountTicketTransferDetail
 */
export class MembershipCustomerAccountTicketTransferDetail {
    /**
     * 
     * @type {Array<MembershipContractGroupItem>}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    contract_groups?: Array<MembershipContractGroupItem>
    /**
     * ホテル名
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    hotel_name?: string
    /**
     * membership contract group id
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    membership_contract_group_id?: string
    /**
     * membership ticket transfer id
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    membership_ticket_transfer_id?: string
    /**
     * membership ticket type id
     * @type {string}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    membership_ticket_type_id?: string
    /**
     * 
     * @type {number}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    quantity?: number
    /**
     * 
     * @type {Array<MembershipTicketTypeItem>}
     * @memberof MembershipCustomerAccountTicketTransferDetail
     */
    ticket_types?: Array<MembershipTicketTypeItem>
}
/**
 * 顧客種別
 * @export
 * @enum {string}
 */

export const MembershipCustomerClassId = {
    Corporation: 'Corporation',
    CorporationMember: 'CorporationMember',
    CorporationMemberGuest: 'CorporationMemberGuest',
    FormerMember: 'FormerMember',
    Individual: 'Individual',
    IndividualMember: 'IndividualMember',
    IndividualMemberFamily: 'IndividualMemberFamily',
    IndividualMemberGuest: 'IndividualMemberGuest'
} as const;

export type MembershipCustomerClassId = typeof MembershipCustomerClassId[keyof typeof MembershipCustomerClassId];


/**
 * 
 * @export
 * @interface MembershipCustomerListItem
 */
export class MembershipCustomerListItem {
    /**
     * address_lines
     * @type {Array<string>}
     * @memberof MembershipCustomerListItem
     */
    address_lines?: Array<string>
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    birth_date?: string
    /**
     * customer_id
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    customer_id?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof MembershipCustomerListItem
     */
    customer_class_id?: CustomerClassId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    email?: string
    /**
     * fax_no
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    fax_no?: string
    /**
     * is_active
     * @type {boolean}
     * @memberof MembershipCustomerListItem
     */
    is_active?: boolean
    /**
     * name_alias
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    name_alias?: string
    /**
     * number_of_times
     * @type {number}
     * @memberof MembershipCustomerListItem
     */
    number_of_times?: number
    /**
     * phone_no_0
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    phone_no_0?: string
    /**
     * phone_no_1
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    phone_no_1?: string
    /**
     * postal_code
     * @type {string}
     * @memberof MembershipCustomerListItem
     */
    postal_code?: string
    /**
     * 
     * @type {Array<string>}
     * @memberof MembershipCustomerListItem
     */
    membership_hotel_right_ids?: Array<string>
    /**
     * 
     * @type {MembershipCustomerClassId}
     * @memberof MembershipCustomerListItem
     */
    membership_customer_class_id?: MembershipCustomerClassId
}
/**
 * 
 * @export
 * @interface MembershipCustomerListItemAllOf
 */
export class MembershipCustomerListItemAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof MembershipCustomerListItemAllOf
     */
    membership_hotel_right_ids?: Array<string>
    /**
     * 
     * @type {MembershipCustomerClassId}
     * @memberof MembershipCustomerListItemAllOf
     */
    membership_customer_class_id?: MembershipCustomerClassId
}
/**
 * 
 * @export
 * @interface MembershipHotel
 */
export class MembershipHotel {
    /**
     * 
     * @type {string}
     * @memberof MembershipHotel
     */
    hotel_id: string
    /**
     * 
     * @type {string}
     * @memberof MembershipHotel
     */
    name: string
    /**
     * 
     * @type {MembershipHotelType}
     * @memberof MembershipHotel
     */
    membership_hotel_type?: MembershipHotelType
}
/**
 * 
 * @export
 * @interface MembershipHotelReservation
 */
export class MembershipHotelReservation {
    /**
     * 
     * @type {string}
     * @memberof MembershipHotelReservation
     */
    reservation_id?: string
    /**
     * ホテルコード(2桁) + 自動採番(8桁)
     * @type {string}
     * @memberof MembershipHotelReservation
     */
    reservation_number?: string
    /**
     * 
     * @type {StayGuest}
     * @memberof MembershipHotelReservation
     */
    guest_main?: StayGuest
    /**
     * 
     * @type {StayGuest}
     * @memberof MembershipHotelReservation
     */
    guest_reserved_by?: StayGuest
    /**
     * 
     * @type {string}
     * @memberof MembershipHotelReservation
     */
    hotel_name?: string
    /**
     * キャンセル済み
     * @type {boolean}
     * @memberof MembershipHotelReservation
     */
    is_cancelled?: boolean
    /**
     * 
     * @type {Array<number>}
     * @memberof MembershipHotelReservation
     */
    person_count?: Array<number>
    /**
     * 
     * @type {StayProvision}
     * @memberof MembershipHotelReservation
     */
    provisions?: StayProvision
    /**
     * 
     * @type {ReservationClassId}
     * @memberof MembershipHotelReservation
     */
    reservation_class_id: ReservationClassId
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof MembershipHotelReservation
     */
    reservation_status_id: ReservationStatusId
    /**
     * 
     * @type {StayPattern}
     * @memberof MembershipHotelReservation
     */
    stay_patterns?: StayPattern
}
/**
 * 
 * @export
 * @interface MembershipHotelType
 */
export class MembershipHotelType {
    /**
     * 
     * @type {string}
     * @memberof MembershipHotelType
     */
    membership_hotel_type_id: string
    /**
     * 
     * @type {string}
     * @memberof MembershipHotelType
     */
    name: string
    /**
     * 
     * @type {boolean}
     * @memberof MembershipHotelType
     */
    is_room_type_selectable?: boolean
}
/**
 * 
 * @export
 * @interface MembershipTicketListItem
 */
export class MembershipTicketListItem {
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    business_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    contract_group_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    hotel_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    hotel_name?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    hotel_right_id?: string
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTicketListItem
     */
    is_printed?: boolean
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    owner_customer_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    owner_customer_name?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    pass_code?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    reservation_id?: string
    /**
     * 
     * @type {number}
     * @memberof MembershipTicketListItem
     */
    sequence?: number
    /**
     * 
     * @type {MembershipTicketStatusId}
     * @memberof MembershipTicketListItem
     */
    ticket_status_id?: MembershipTicketStatusId
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    ticket_type_id?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    use_date_end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    use_date_start?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    user_customer_id?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketListItem
     */
    user_customer_name?: string
}
/**
 * 
 * @export
 * @interface MembershipTicketReceiverCondition
 */
export class MembershipTicketReceiverCondition {
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketReceiverCondition
     */
    mail_from_auth_request?: string
    /**
     * 
     * @type {string}
     * @memberof MembershipTicketReceiverCondition
     */
    mail_from_auth_request_domain?: string
    /**
     * 
     * @type {number}
     * @memberof MembershipTicketReceiverCondition
     */
    auth_request_expiration_hours?: number
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MembershipTicketReceiverStatusId = {
    Created: 'Created',
    AuthorizeCompleted: 'Authorize_Completed',
    AuthorizeRequested: 'Authorize_Requested',
    AuthorizeTimeout: 'Authorize_Timeout',
    Deleted: 'Deleted'
} as const;

export type MembershipTicketReceiverStatusId = typeof MembershipTicketReceiverStatusId[keyof typeof MembershipTicketReceiverStatusId];


/**
 * 未使用 予約済み 使用済み 
 * @export
 * @enum {string}
 */

export const MembershipTicketStatusId = {
    UnUsed: 'UnUsed',
    Reserved: 'Reserved',
    Used: 'Used'
} as const;

export type MembershipTicketStatusId = typeof MembershipTicketStatusId[keyof typeof MembershipTicketStatusId];


/**
 * 
 * @export
 * @interface MembershipTicketSummary
 */
export class MembershipTicketSummary {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    business_id?: string
    /**
     * 会員制_契約_グループID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    contract_group_id?: string
    /**
     * ホテルID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    hotel_id?: string
    /**
     * ホテル名
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    hotel_name?: string
    /**
     * 会員権ID（会員権番号）
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    hotel_right_id?: string
    /**
     * 印刷した利用券
     * @type {boolean}
     * @memberof MembershipTicketSummary
     */
    is_print_required?: boolean
    /**
     * 利用利用内訳
     * @type {Array<MembershipTicketSummaryTicketType>}
     * @memberof MembershipTicketSummary
     */
    ticket_types?: Array<MembershipTicketSummaryTicketType>
    /**
     * 会員権を持っている顧客ID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    owner_customer_id?: string
    /**
     * 会員権を持っている顧客名
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    owner_customer_name?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    reserve_date_start?: string
    /**
     * 予約開始日設定値
     * @type {number}
     * @memberof MembershipTicketSummary
     */
    reserve_date_start_value?: number
    /**
     * 
     * @type {ReserveDateStartUnitId}
     * @memberof MembershipTicketSummary
     */
    reserve_date_start_unit_id?: ReserveDateStartUnitId
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    use_date_end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    use_date_start?: string
    /**
     * 利用年度
     * @type {number}
     * @memberof MembershipTicketSummary
     */
    use_year?: number
    /**
     * 利用する顧客ID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    user_customer_id?: string
    /**
     * 利用する顧客ID
     * @type {string}
     * @memberof MembershipTicketSummary
     */
    user_customer_name?: string
}
/**
 * 
 * @export
 * @interface MembershipTicketSummaryTicketType
 */
export class MembershipTicketSummaryTicketType {
    /**
     * 利用可能枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_available?: number
    /**
     * 発行枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_issued?: number
    /**
     * 失効枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_lost?: number
    /**
     * 受け取った枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_received?: number
    /**
     * 予約した枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_reserved?: number
    /**
     * 贈った枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_sent?: number
    /**
     * 印刷した枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_printed?: number
    /**
     * 発行したが未使用の枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_unused?: number
    /**
     * 利用した枚数
     * @type {number}
     * @memberof MembershipTicketSummaryTicketType
     */
    number_used?: number
    /**
     * 会員制利用券タイプID
     * @type {string}
     * @memberof MembershipTicketSummaryTicketType
     */
    ticket_type_id?: string
    /**
     * 会員制利用券タイプ名
     * @type {string}
     * @memberof MembershipTicketSummaryTicketType
     */
    name?: string
}
/**
 * 
 * @export
 * @interface MembershipTicketTypeItem
 */
export class MembershipTicketTypeItem {
    /**
     * membership ticket type id
     * @type {string}
     * @memberof MembershipTicketTypeItem
     */
    membership_ticket_type_id?: string
    /**
     * name
     * @type {string}
     * @memberof MembershipTicketTypeItem
     */
    name?: string
}
/**
 * 予約
 * @export
 * @interface Reservation
 */
export class Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    reservation_id?: string
    /**
     * ホテルコード(2桁) + 自動採番(8桁)
     * @type {string}
     * @memberof Reservation
     */
    reservation_number?: string
    /**
     * 
     * @type {StayGuest}
     * @memberof Reservation
     */
    guest_main?: StayGuest
    /**
     * 
     * @type {StayGuest}
     * @memberof Reservation
     */
    guest_reserved_by?: StayGuest
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    hotel_name?: string
    /**
     * キャンセル済み
     * @type {boolean}
     * @memberof Reservation
     */
    is_cancelled?: boolean
    /**
     * 
     * @type {Array<number>}
     * @memberof Reservation
     */
    person_count?: Array<number>
    /**
     * 
     * @type {StayProvision}
     * @memberof Reservation
     */
    provisions?: StayProvision
    /**
     * 
     * @type {ReservationClassId}
     * @memberof Reservation
     */
    reservation_class_id: ReservationClassId
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof Reservation
     */
    reservation_status_id: ReservationStatusId
    /**
     * 
     * @type {StayPattern}
     * @memberof Reservation
     */
    stay_patterns?: StayPattern
}
/**
 * * `DayVisit` - 日帰り * `Stay` - 滞在 
 * @export
 * @enum {string}
 */

export const ReservationClassId = {
    DayVisit: 'DayVisit',
    Stay: 'Stay'
} as const;

export type ReservationClassId = typeof ReservationClassId[keyof typeof ReservationClassId];


/**
 * ReservationDynamic
 * @export
 * @interface ReservationDynamic
 */
export class ReservationDynamic {
    /**
     * 
     * @type {StayGuest}
     * @memberof ReservationDynamic
     */
    guest_main?: StayGuest
    /**
     * 
     * @type {StayGuest}
     * @memberof ReservationDynamic
     */
    guest_reserved_by?: StayGuest
    /**
     * 
     * @type {string}
     * @memberof ReservationDynamic
     */
    hotel_name?: string
    /**
     * キャンセル済み
     * @type {boolean}
     * @memberof ReservationDynamic
     */
    is_cancelled?: boolean
    /**
     * 
     * @type {Array<number>}
     * @memberof ReservationDynamic
     */
    person_count?: Array<number>
    /**
     * 
     * @type {StayProvision}
     * @memberof ReservationDynamic
     */
    provisions?: StayProvision
    /**
     * 
     * @type {ReservationClassId}
     * @memberof ReservationDynamic
     */
    reservation_class_id: ReservationClassId
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof ReservationDynamic
     */
    reservation_status_id: ReservationStatusId
    /**
     * 
     * @type {StayPattern}
     * @memberof ReservationDynamic
     */
    stay_patterns?: StayPattern
}
/**
 * ReservationStatic
 * @export
 * @interface ReservationStatic
 */
export class ReservationStatic {
    /**
     * 
     * @type {string}
     * @memberof ReservationStatic
     */
    reservation_id?: string
    /**
     * ホテルコード(2桁) + 自動採番(8桁)
     * @type {string}
     * @memberof ReservationStatic
     */
    reservation_number?: string
}
/**
 * * `Confirmed` - 確定状態  * `KeepInventory` - 部屋のみ押さえた状態  * `Tentative` - 仮予約状態  * `Waiting` - キャンセル待ち状態 
 * @export
 * @enum {string}
 */

export const ReservationStatusId = {
    Confirmed: 'Confirmed',
    KeepInventory: 'KeepInventory',
    Tentative: 'Tentative',
    Waiting: 'Waiting'
} as const;

export type ReservationStatusId = typeof ReservationStatusId[keyof typeof ReservationStatusId];


/**
 * 日前 月前 
 * @export
 * @enum {string}
 */

export const ReserveDateStartUnitId = {
    DaysBefore: 'DaysBefore',
    MonthsBefore: 'MonthsBefore'
} as const;

export type ReserveDateStartUnitId = typeof ReserveDateStartUnitId[keyof typeof ReserveDateStartUnitId];


/**
 * 
 * @export
 * @interface Stay
 */
export class Stay {
    /**
     * 
     * @type {Array<StayGuest>}
     * @memberof Stay
     */
    guests?: Array<StayGuest>
    /**
     * 
     * @type {Array<StayProvision>}
     * @memberof Stay
     */
    provisions?: Array<StayProvision>
    /**
     * 
     * @type {string}
     * @memberof Stay
     */
    stay_id?: string
    /**
     * 
     * @type {number}
     * @memberof Stay
     */
    sequence?: number
}
/**
 * ゲスト情報
 * @export
 * @interface StayGuest
 */
export class StayGuest {
    /**
     * ゲストの顧客ID
     * @type {string}
     * @memberof StayGuest
     */
    customer_id?: string
    /**
     * ゲストID
     * @type {string}
     * @memberof StayGuest
     */
    stay_guest_id?: string
    /**
     * 
     * @type {StayGuestTypeId}
     * @memberof StayGuest
     */
    stay_guest_type_id?: StayGuestTypeId
    /**
     * 
     * @type {number}
     * @memberof StayGuest
     */
    sequence?: number
}
/**
 * * `MainGuest` - 利用代表者 * `ReservationGuest` -  予約者 * `RoomGuest` - 宿泊利用者 
 * @export
 * @enum {string}
 */

export const StayGuestTypeId = {
    MainGuest: 'MainGuest',
    ReservationGuest: 'ReservationGuest',
    RoomGuest: 'RoomGuest'
} as const;

export type StayGuestTypeId = typeof StayGuestTypeId[keyof typeof StayGuestTypeId];


/**
 * 滞在パターン
 * @export
 * @interface StayPattern
 */
export class StayPattern {
    /**
     * 泊数
     * @type {number}
     * @memberof StayPattern
     */
    nights_count: number
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    room_type_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    room_type_name?: string
    /**
     * 部屋数
     * @type {number}
     * @memberof StayPattern
     */
    rooms_count: number
    /**
     * 
     * @type {number}
     * @memberof StayPattern
     */
    sequence: number
    /**
     * 日付(Date)
     * @type {string}
     * @memberof StayPattern
     */
    stay_date_range_end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof StayPattern
     */
    stay_date_range_start: string
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    stay_pattern_id?: string
    /**
     * 
     * @type {Array<Stay>}
     * @memberof StayPattern
     */
    stays?: Array<Stay>
}
/**
 * 
 * @export
 * @interface StayProvision
 */
export class StayProvision {
    /**
     * 
     * @type {StayProvisionCondition}
     * @memberof StayProvision
     */
    condition?: StayProvisionCondition
    /**
     * 
     * @type {DateRange}
     * @memberof StayProvision
     */
    date_range?: DateRange
    /**
     * 在庫をもっている場合は手配品であればtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    has_inventory?: boolean
    /**
     * 予約期間と同じ期間手配する場合はtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    is_same_as_stay_date_range?: boolean
    /**
     * 全泊手配する場合はtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    is_each_day?: boolean
    /**
     * 手配品ID
     * @type {string}
     * @memberof StayProvision
     */
    provision_item_id?: string
    /**
     * 手配品数量
     * @type {number}
     * @memberof StayProvision
     */
    quantity?: number
    /**
     * 
     * @type {number}
     * @memberof StayProvision
     */
    sequence?: number
    /**
     * 
     * @type {StayProvisionReasonId}
     * @memberof StayProvision
     */
    stay_provision_reason_id?: StayProvisionReasonId
}
/**
 * 
 * @export
 * @interface StayProvisionCondition
 */
export class StayProvisionCondition {
    /**
     * 商品ID　商品の中に手配品がある場合セットされる
     * @type {string}
     * @memberof StayProvisionCondition
     */
    sales_item_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_range_condition_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_range_id?: string
}
/**
 * * `SpecialRequest` - 追加手配品 * `StayConditionSalesItemSet` - パッケージに含まれている手配品 
 * @export
 * @enum {string}
 */

export const StayProvisionReasonId = {
    SpecialRequest: 'SpecialRequest',
    StayConditionSalesItemSet: 'StayConditionSalesItemSet'
} as const;

export type StayProvisionReasonId = typeof StayProvisionReasonId[keyof typeof StayProvisionReasonId];


/**
 * 
 * @export
 * @interface UpdateMembershipCustomerAccountTicketReceiverRequest
 */
export class UpdateMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof UpdateMembershipCustomerAccountTicketReceiverRequest
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}
/**
 * 
 * @export
 * @interface UpdateMembershipCustomerAccountTicketReceiverResponse
 */
export class UpdateMembershipCustomerAccountTicketReceiverResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateMembershipCustomerAccountTicketReceiverResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateMembershipCustomerAccountTicketReceiverResponse
     */
    request_id?: string
    /**
     * 
     * @type {MembershipCustomerAccountTicketReceiver}
     * @memberof UpdateMembershipCustomerAccountTicketReceiverResponse
     */
    membership_customer_account_receiver?: MembershipCustomerAccountTicketReceiver
}

/**
 * MemberShipTicketDispatchesApi - axios parameter creator
 * @export
 */
export const MemberShipTicketDispatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CreateMembershipCustomerAccountTicketDispatchRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketDispatchRequestRequest} [createMembershipCustomerAccountTicketDispatchRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketDispatchRequest: async (businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketDispatchRequestRequest?: CreateMembershipCustomerAccountTicketDispatchRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketDispatchRequest', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketDispatchRequest', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-dispatch-requests`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMembershipCustomerAccountTicketDispatchRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetMembershipCustomerAccountTicketDispatchRequestCondition
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipCustomerAccountTicketDispatchRequestCondition: async (businessId: string, customerAccountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getMembershipCustomerAccountTicketDispatchRequestCondition', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('getMembershipCustomerAccountTicketDispatchRequestCondition', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-dispatch-request-condition`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberShipTicketDispatchesApi - functional programming interface
 * @export
 */
export const MemberShipTicketDispatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberShipTicketDispatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketDispatchRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketDispatchRequestRequest} [createMembershipCustomerAccountTicketDispatchRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipCustomerAccountTicketDispatchRequest(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketDispatchRequestRequest?: CreateMembershipCustomerAccountTicketDispatchRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMembershipCustomerAccountTicketDispatchRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipCustomerAccountTicketDispatchRequest(businessId, customerAccountId, createMembershipCustomerAccountTicketDispatchRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetMembershipCustomerAccountTicketDispatchRequestCondition
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipCustomerAccountTicketDispatchRequestCondition(businessId: string, customerAccountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMembershipCustomerAccountTicketDispatchRequestConditionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipCustomerAccountTicketDispatchRequestCondition(businessId, customerAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberShipTicketDispatchesApi - factory interface
 * @export
 */
export const MemberShipTicketDispatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberShipTicketDispatchesApiFp(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketDispatchRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketDispatchRequestRequest} [createMembershipCustomerAccountTicketDispatchRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketDispatchRequest(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketDispatchRequestRequest?: CreateMembershipCustomerAccountTicketDispatchRequestRequest, options?: any): AxiosPromise<CreateMembershipCustomerAccountTicketDispatchRequestResponse> {
            return localVarFp.createMembershipCustomerAccountTicketDispatchRequest(businessId, customerAccountId, createMembershipCustomerAccountTicketDispatchRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * GetMembershipCustomerAccountTicketDispatchRequestCondition
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipCustomerAccountTicketDispatchRequestCondition(businessId: string, customerAccountId: string, options?: any): AxiosPromise<GetMembershipCustomerAccountTicketDispatchRequestConditionResponse> {
            return localVarFp.getMembershipCustomerAccountTicketDispatchRequestCondition(businessId, customerAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembershipCustomerAccountTicketDispatchRequest operation in MemberShipTicketDispatchesApi.
 * @export
 * @interface MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequestRequest
 */
export class MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequestRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequest
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequest
     */
    customerAccountId: string

    /**
     * 
     * @type {CreateMembershipCustomerAccountTicketDispatchRequestRequest}
     * @memberof MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequest
     */
    createMembershipCustomerAccountTicketDispatchRequestRequest?: CreateMembershipCustomerAccountTicketDispatchRequestRequest
}

/**
 * Request parameters for getMembershipCustomerAccountTicketDispatchRequestCondition operation in MemberShipTicketDispatchesApi.
 * @export
 * @interface MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestConditionRequest
 */
export class MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestConditionRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestCondition
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestCondition
     */
    customerAccountId: string
}

/**
 * MemberShipTicketDispatchesApi - object-oriented interface
 * @export
 * @class MemberShipTicketDispatchesApi
 * @extends {BaseAPI}
 */
export class MemberShipTicketDispatchesApi extends BaseAPI {
    /**
     * CreateMembershipCustomerAccountTicketDispatchRequest
     * @param {MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketDispatchesApi
     */
    public createMembershipCustomerAccountTicketDispatchRequest(requestParameters: MemberShipTicketDispatchesApiCreateMembershipCustomerAccountTicketDispatchRequestRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketDispatchesApiFp(this.configuration).createMembershipCustomerAccountTicketDispatchRequest(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.createMembershipCustomerAccountTicketDispatchRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetMembershipCustomerAccountTicketDispatchRequestCondition
     * @param {MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestConditionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketDispatchesApi
     */
    public getMembershipCustomerAccountTicketDispatchRequestCondition(requestParameters: MemberShipTicketDispatchesApiGetMembershipCustomerAccountTicketDispatchRequestConditionRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketDispatchesApiFp(this.configuration).getMembershipCustomerAccountTicketDispatchRequestCondition(requestParameters.businessId, requestParameters.customerAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MemberShipTicketReceiversApi - axios parameter creator
 * @export
 */
export const MemberShipTicketReceiversApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CreateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketReceiverRequest} [createMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketReceiver: async (businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketReceiverRequest?: CreateMembershipCustomerAccountTicketReceiverRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketReceiver', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketReceiver', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMembershipCustomerAccountTicketReceiverRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CreateMembershipCustomerAccountTicketReceiverAuthRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest} [createMembershipCustomerAccountTicketReceiverAuthRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketReceiverAuthRequest: async (businessId: string, customerAccountId: string, membershipTicketReceiverId: string, createMembershipCustomerAccountTicketReceiverAuthRequestRequest?: CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketReceiverAuthRequest', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketReceiverAuthRequest', 'customerAccountId', customerAccountId)
            // verify required parameter 'membershipTicketReceiverId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketReceiverAuthRequest', 'membershipTicketReceiverId', membershipTicketReceiverId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers/{membership_ticket_receiver_id}/auth-requests`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)))
                .replace(`{${"membership_ticket_receiver_id"}}`, encodeURIComponent(String(membershipTicketReceiverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMembershipCustomerAccountTicketReceiverAuthRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DeleteMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembershipCustomerAccountTicketReceiver: async (businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('deleteMembershipCustomerAccountTicketReceiver', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('deleteMembershipCustomerAccountTicketReceiver', 'customerAccountId', customerAccountId)
            // verify required parameter 'membershipTicketReceiverId' is not null or undefined
            assertParamExists('deleteMembershipCustomerAccountTicketReceiver', 'membershipTicketReceiverId', membershipTicketReceiverId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers/{membership_ticket_receiver_id}`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)))
                .replace(`{${"membership_ticket_receiver_id"}}`, encodeURIComponent(String(membershipTicketReceiverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipCustomerAccountTicketReceiver: async (businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getMembershipCustomerAccountTicketReceiver', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('getMembershipCustomerAccountTicketReceiver', 'customerAccountId', customerAccountId)
            // verify required parameter 'membershipTicketReceiverId' is not null or undefined
            assertParamExists('getMembershipCustomerAccountTicketReceiver', 'membershipTicketReceiverId', membershipTicketReceiverId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers/{membership_ticket_receiver_id}`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)))
                .replace(`{${"membership_ticket_receiver_id"}}`, encodeURIComponent(String(membershipTicketReceiverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetMembershipTicketReceiverCondition
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipTicketReceiverCondition: async (businessId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getMembershipTicketReceiverCondition', 'businessId', businessId)
            const localVarPath = `/membership-businesses/{business_id}/ticket-receiver-condition`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ListMembershipCustomerAccountTicketReceivers
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerAccountTicketReceivers: async (businessId: string, customerAccountId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomerAccountTicketReceivers', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('listMembershipCustomerAccountTicketReceivers', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {UpdateMembershipCustomerAccountTicketReceiverRequest} [updateMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipCustomerAccountTicketReceiver: async (businessId: string, customerAccountId: string, membershipTicketReceiverId: string, updateMembershipCustomerAccountTicketReceiverRequest?: UpdateMembershipCustomerAccountTicketReceiverRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('updateMembershipCustomerAccountTicketReceiver', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('updateMembershipCustomerAccountTicketReceiver', 'customerAccountId', customerAccountId)
            // verify required parameter 'membershipTicketReceiverId' is not null or undefined
            assertParamExists('updateMembershipCustomerAccountTicketReceiver', 'membershipTicketReceiverId', membershipTicketReceiverId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-receivers/{membership_ticket_receiver_id}`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)))
                .replace(`{${"membership_ticket_receiver_id"}}`, encodeURIComponent(String(membershipTicketReceiverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMembershipCustomerAccountTicketReceiverRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberShipTicketReceiversApi - functional programming interface
 * @export
 */
export const MemberShipTicketReceiversApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberShipTicketReceiversApiAxiosParamCreator(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketReceiverRequest} [createMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketReceiverRequest?: CreateMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMembershipCustomerAccountTicketReceiverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, createMembershipCustomerAccountTicketReceiverRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CreateMembershipCustomerAccountTicketReceiverAuthRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest} [createMembershipCustomerAccountTicketReceiverAuthRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipCustomerAccountTicketReceiverAuthRequest(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, createMembershipCustomerAccountTicketReceiverAuthRequestRequest?: CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipCustomerAccountTicketReceiverAuthRequest(businessId, customerAccountId, membershipTicketReceiverId, createMembershipCustomerAccountTicketReceiverAuthRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DeleteMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMembershipCustomerAccountTicketReceiverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMembershipCustomerAccountTicketReceiverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetMembershipTicketReceiverCondition
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipTicketReceiverCondition(businessId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMembershipTicketReceiverConditionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipTicketReceiverCondition(businessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ListMembershipCustomerAccountTicketReceivers
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomerAccountTicketReceivers(businessId: string, customerAccountId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomerAccountTicketReceiversResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomerAccountTicketReceivers(businessId, customerAccountId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * UpdateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {UpdateMembershipCustomerAccountTicketReceiverRequest} [updateMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, updateMembershipCustomerAccountTicketReceiverRequest?: UpdateMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMembershipCustomerAccountTicketReceiverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, updateMembershipCustomerAccountTicketReceiverRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberShipTicketReceiversApi - factory interface
 * @export
 */
export const MemberShipTicketReceiversApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberShipTicketReceiversApiFp(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketReceiverRequest} [createMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketReceiverRequest?: CreateMembershipCustomerAccountTicketReceiverRequest, options?: any): AxiosPromise<CreateMembershipCustomerAccountTicketReceiverResponse> {
            return localVarFp.createMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, createMembershipCustomerAccountTicketReceiverRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CreateMembershipCustomerAccountTicketReceiverAuthRequest
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest} [createMembershipCustomerAccountTicketReceiverAuthRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketReceiverAuthRequest(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, createMembershipCustomerAccountTicketReceiverAuthRequestRequest?: CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest, options?: any): AxiosPromise<CreateMembershipCustomerAccountTicketReceiverAuthRequestResponse> {
            return localVarFp.createMembershipCustomerAccountTicketReceiverAuthRequest(businessId, customerAccountId, membershipTicketReceiverId, createMembershipCustomerAccountTicketReceiverAuthRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * DeleteMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options?: any): AxiosPromise<DeleteMembershipCustomerAccountTicketReceiverResponse> {
            return localVarFp.deleteMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, options?: any): AxiosPromise<GetMembershipCustomerAccountTicketReceiverResponse> {
            return localVarFp.getMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetMembershipTicketReceiverCondition
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipTicketReceiverCondition(businessId: string, options?: any): AxiosPromise<GetMembershipTicketReceiverConditionResponse> {
            return localVarFp.getMembershipTicketReceiverCondition(businessId, options).then((request) => request(axios, basePath));
        },
        /**
         * ListMembershipCustomerAccountTicketReceivers
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerAccountTicketReceivers(businessId: string, customerAccountId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipCustomerAccountTicketReceiversResponse> {
            return localVarFp.listMembershipCustomerAccountTicketReceivers(businessId, customerAccountId, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateMembershipCustomerAccountTicketReceiver
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {string} membershipTicketReceiverId membership ticket receiver id
         * @param {UpdateMembershipCustomerAccountTicketReceiverRequest} [updateMembershipCustomerAccountTicketReceiverRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipCustomerAccountTicketReceiver(businessId: string, customerAccountId: string, membershipTicketReceiverId: string, updateMembershipCustomerAccountTicketReceiverRequest?: UpdateMembershipCustomerAccountTicketReceiverRequest, options?: any): AxiosPromise<UpdateMembershipCustomerAccountTicketReceiverResponse> {
            return localVarFp.updateMembershipCustomerAccountTicketReceiver(businessId, customerAccountId, membershipTicketReceiverId, updateMembershipCustomerAccountTicketReceiverRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembershipCustomerAccountTicketReceiver operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverRequest
 */
export class MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiver
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiver
     */
    customerAccountId: string

    /**
     * 
     * @type {CreateMembershipCustomerAccountTicketReceiverRequest}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiver
     */
    createMembershipCustomerAccountTicketReceiverRequest?: CreateMembershipCustomerAccountTicketReceiverRequest
}

/**
 * Request parameters for createMembershipCustomerAccountTicketReceiverAuthRequest operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequestRequest
 */
export class MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequestRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequest
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequest
     */
    customerAccountId: string

    /**
     * membership ticket receiver id
     * @type {string}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequest
     */
    membershipTicketReceiverId: string

    /**
     * 
     * @type {CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest}
     * @memberof MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequest
     */
    createMembershipCustomerAccountTicketReceiverAuthRequestRequest?: CreateMembershipCustomerAccountTicketReceiverAuthRequestRequest
}

/**
 * Request parameters for deleteMembershipCustomerAccountTicketReceiver operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiverRequest
 */
export class MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiver
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiver
     */
    customerAccountId: string

    /**
     * membership ticket receiver id
     * @type {string}
     * @memberof MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiver
     */
    membershipTicketReceiverId: string
}

/**
 * Request parameters for getMembershipCustomerAccountTicketReceiver operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiverRequest
 */
export class MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiver
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiver
     */
    customerAccountId: string

    /**
     * membership ticket receiver id
     * @type {string}
     * @memberof MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiver
     */
    membershipTicketReceiverId: string
}

/**
 * Request parameters for getMembershipTicketReceiverCondition operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiGetMembershipTicketReceiverConditionRequest
 */
export class MemberShipTicketReceiversApiGetMembershipTicketReceiverConditionRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiGetMembershipTicketReceiverCondition
     */
    businessId: string
}

/**
 * Request parameters for listMembershipCustomerAccountTicketReceivers operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceiversRequest
 */
export class MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceiversRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceivers
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceivers
     */
    customerAccountId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceivers
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceivers
     */
    limit?: number
}

/**
 * Request parameters for updateMembershipCustomerAccountTicketReceiver operation in MemberShipTicketReceiversApi.
 * @export
 * @interface MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiverRequest
 */
export class MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiverRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiver
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiver
     */
    customerAccountId: string

    /**
     * membership ticket receiver id
     * @type {string}
     * @memberof MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiver
     */
    membershipTicketReceiverId: string

    /**
     * 
     * @type {UpdateMembershipCustomerAccountTicketReceiverRequest}
     * @memberof MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiver
     */
    updateMembershipCustomerAccountTicketReceiverRequest?: UpdateMembershipCustomerAccountTicketReceiverRequest
}

/**
 * MemberShipTicketReceiversApi - object-oriented interface
 * @export
 * @class MemberShipTicketReceiversApi
 * @extends {BaseAPI}
 */
export class MemberShipTicketReceiversApi extends BaseAPI {
    /**
     * CreateMembershipCustomerAccountTicketReceiver
     * @param {MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public createMembershipCustomerAccountTicketReceiver(requestParameters: MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).createMembershipCustomerAccountTicketReceiver(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.createMembershipCustomerAccountTicketReceiverRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CreateMembershipCustomerAccountTicketReceiverAuthRequest
     * @param {MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public createMembershipCustomerAccountTicketReceiverAuthRequest(requestParameters: MemberShipTicketReceiversApiCreateMembershipCustomerAccountTicketReceiverAuthRequestRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).createMembershipCustomerAccountTicketReceiverAuthRequest(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.membershipTicketReceiverId, requestParameters.createMembershipCustomerAccountTicketReceiverAuthRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DeleteMembershipCustomerAccountTicketReceiver
     * @param {MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public deleteMembershipCustomerAccountTicketReceiver(requestParameters: MemberShipTicketReceiversApiDeleteMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).deleteMembershipCustomerAccountTicketReceiver(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.membershipTicketReceiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetMembershipCustomerAccountTicketReceiver
     * @param {MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public getMembershipCustomerAccountTicketReceiver(requestParameters: MemberShipTicketReceiversApiGetMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).getMembershipCustomerAccountTicketReceiver(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.membershipTicketReceiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetMembershipTicketReceiverCondition
     * @param {MemberShipTicketReceiversApiGetMembershipTicketReceiverConditionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public getMembershipTicketReceiverCondition(requestParameters: MemberShipTicketReceiversApiGetMembershipTicketReceiverConditionRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).getMembershipTicketReceiverCondition(requestParameters.businessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ListMembershipCustomerAccountTicketReceivers
     * @param {MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceiversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public listMembershipCustomerAccountTicketReceivers(requestParameters: MemberShipTicketReceiversApiListMembershipCustomerAccountTicketReceiversRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).listMembershipCustomerAccountTicketReceivers(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * UpdateMembershipCustomerAccountTicketReceiver
     * @param {MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketReceiversApi
     */
    public updateMembershipCustomerAccountTicketReceiver(requestParameters: MemberShipTicketReceiversApiUpdateMembershipCustomerAccountTicketReceiverRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketReceiversApiFp(this.configuration).updateMembershipCustomerAccountTicketReceiver(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.membershipTicketReceiverId, requestParameters.updateMembershipCustomerAccountTicketReceiverRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MemberShipTicketsApi - axios parameter creator
 * @export
 */
export const MemberShipTicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 顧客が保持する利用券明細取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerTickets: async (businessId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomerTickets', 'businessId', businessId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listMembershipCustomerTickets', 'customerId', customerId)
            const localVarPath = `/membership-businesses/{business_id}/customers/{customer_id}/tickets`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 利用券情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [contractGroupId] 会員制契約グループID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipTickets: async (businessId: string, contractGroupId?: string, useYear?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipTickets', 'businessId', businessId)
            const localVarPath = `/membership-businesses/{business_id}/tickets`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (contractGroupId !== undefined) {
                localVarQueryParameter['contract_group_id'] = contractGroupId;
            }

            if (useYear !== undefined) {
                localVarQueryParameter['use_year'] = useYear;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberShipTicketsApi - functional programming interface
 * @export
 */
export const MemberShipTicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberShipTicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * 顧客が保持する利用券明細取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomerTickets(businessId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomerTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomerTickets(businessId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 利用券情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [contractGroupId] 会員制契約グループID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipTickets(businessId: string, contractGroupId?: string, useYear?: number, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipTickets(businessId, contractGroupId, useYear, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberShipTicketsApi - factory interface
 * @export
 */
export const MemberShipTicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberShipTicketsApiFp(configuration)
    return {
        /**
         * 顧客が保持する利用券明細取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerTickets(businessId: string, customerId: string, options?: any): AxiosPromise<ListMembershipCustomerTicketsResponse> {
            return localVarFp.listMembershipCustomerTickets(businessId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 利用券情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [contractGroupId] 会員制契約グループID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipTickets(businessId: string, contractGroupId?: string, useYear?: number, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipTicketsResponse> {
            return localVarFp.listMembershipTickets(businessId, contractGroupId, useYear, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipCustomerTickets operation in MemberShipTicketsApi.
 * @export
 * @interface MemberShipTicketsApiListMembershipCustomerTicketsRequest
 */
export class MemberShipTicketsApiListMembershipCustomerTicketsRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketsApiListMembershipCustomerTickets
     */
    businessId: string

    /**
     * 顧客ID
     * @type {string}
     * @memberof MemberShipTicketsApiListMembershipCustomerTickets
     */
    customerId: string
}

/**
 * Request parameters for listMembershipTickets operation in MemberShipTicketsApi.
 * @export
 * @interface MemberShipTicketsApiListMembershipTicketsRequest
 */
export class MemberShipTicketsApiListMembershipTicketsRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MemberShipTicketsApiListMembershipTickets
     */
    businessId: string

    /**
     * 会員制契約グループID
     * @type {string}
     * @memberof MemberShipTicketsApiListMembershipTickets
     */
    contractGroupId?: string

    /**
     * 利用年度
     * @type {number}
     * @memberof MemberShipTicketsApiListMembershipTickets
     */
    useYear?: number

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MemberShipTicketsApiListMembershipTickets
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MemberShipTicketsApiListMembershipTickets
     */
    limit?: number
}

/**
 * MemberShipTicketsApi - object-oriented interface
 * @export
 * @class MemberShipTicketsApi
 * @extends {BaseAPI}
 */
export class MemberShipTicketsApi extends BaseAPI {
    /**
     * 顧客が保持する利用券明細取得
     * @param {MemberShipTicketsApiListMembershipCustomerTicketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketsApi
     */
    public listMembershipCustomerTickets(requestParameters: MemberShipTicketsApiListMembershipCustomerTicketsRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketsApiFp(this.configuration).listMembershipCustomerTickets(requestParameters.businessId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 利用券情報取得
     * @param {MemberShipTicketsApiListMembershipTicketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberShipTicketsApi
     */
    public listMembershipTickets(requestParameters: MemberShipTicketsApiListMembershipTicketsRequest, options?: AxiosRequestConfig) {
        return MemberShipTicketsApiFp(this.configuration).listMembershipTickets(requestParameters.businessId, requestParameters.contractGroupId, requestParameters.useYear, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipContractGroupsApi - axios parameter creator
 * @export
 */
export const MembershipContractGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 顧客が所有する代表会員権番号取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerContractGroups: async (businessId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomerContractGroups', 'businessId', businessId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listMembershipCustomerContractGroups', 'customerId', customerId)
            const localVarPath = `/membership-businesses/{business_id}/customers/{customer_id}/contract_groups`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipContractGroupsApi - functional programming interface
 * @export
 */
export const MembershipContractGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipContractGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 顧客が所有する代表会員権番号取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomerContractGroups(businessId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomerContractGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomerContractGroups(businessId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipContractGroupsApi - factory interface
 * @export
 */
export const MembershipContractGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipContractGroupsApiFp(configuration)
    return {
        /**
         * 顧客が所有する代表会員権番号取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerContractGroups(businessId: string, customerId: string, options?: any): AxiosPromise<ListMembershipCustomerContractGroupsResponse> {
            return localVarFp.listMembershipCustomerContractGroups(businessId, customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipCustomerContractGroups operation in MembershipContractGroupsApi.
 * @export
 * @interface MembershipContractGroupsApiListMembershipCustomerContractGroupsRequest
 */
export class MembershipContractGroupsApiListMembershipCustomerContractGroupsRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipContractGroupsApiListMembershipCustomerContractGroups
     */
    businessId: string

    /**
     * 顧客ID
     * @type {string}
     * @memberof MembershipContractGroupsApiListMembershipCustomerContractGroups
     */
    customerId: string
}

/**
 * MembershipContractGroupsApi - object-oriented interface
 * @export
 * @class MembershipContractGroupsApi
 * @extends {BaseAPI}
 */
export class MembershipContractGroupsApi extends BaseAPI {
    /**
     * 顧客が所有する代表会員権番号取得
     * @param {MembershipContractGroupsApiListMembershipCustomerContractGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipContractGroupsApi
     */
    public listMembershipCustomerContractGroups(requestParameters: MembershipContractGroupsApiListMembershipCustomerContractGroupsRequest, options?: AxiosRequestConfig) {
        return MembershipContractGroupsApiFp(this.configuration).listMembershipCustomerContractGroups(requestParameters.businessId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipCustomersApi - axios parameter creator
 * @export
 */
export const MembershipCustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 1顧客の会員情報取得
         * @param {string} businessId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomer: async (businessId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomer', 'businessId', businessId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listMembershipCustomer', 'customerId', customerId)
            const localVarPath = `/membership-businesses/{business_id}/customers/{customer_id}`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客の会員情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [name] name
         * @param {string} [phoneNo] 携帯電話番号
         * @param {string} [mobilePhoneNo] 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomers: async (businessId: string, hotelRightId?: string, name?: string, phoneNo?: string, mobilePhoneNo?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomers', 'businessId', businessId)
            const localVarPath = `/membership-businesses/{business_id}/customers`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (hotelRightId !== undefined) {
                localVarQueryParameter['hotel_right_id'] = hotelRightId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (phoneNo !== undefined) {
                localVarQueryParameter['phone_no'] = phoneNo;
            }

            if (mobilePhoneNo !== undefined) {
                localVarQueryParameter['mobile_phone_no'] = mobilePhoneNo;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipCustomersApi - functional programming interface
 * @export
 */
export const MembershipCustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipCustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 1顧客の会員情報取得
         * @param {string} businessId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomer(businessId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomer(businessId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客の会員情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [name] name
         * @param {string} [phoneNo] 携帯電話番号
         * @param {string} [mobilePhoneNo] 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomers(businessId: string, hotelRightId?: string, name?: string, phoneNo?: string, mobilePhoneNo?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomers(businessId, hotelRightId, name, phoneNo, mobilePhoneNo, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipCustomersApi - factory interface
 * @export
 */
export const MembershipCustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipCustomersApiFp(configuration)
    return {
        /**
         * 1顧客の会員情報取得
         * @param {string} businessId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomer(businessId: string, customerId: string, options?: any): AxiosPromise<ListMembershipCustomersResponse> {
            return localVarFp.listMembershipCustomer(businessId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客の会員情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [name] name
         * @param {string} [phoneNo] 携帯電話番号
         * @param {string} [mobilePhoneNo] 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomers(businessId: string, hotelRightId?: string, name?: string, phoneNo?: string, mobilePhoneNo?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipCustomersResponse> {
            return localVarFp.listMembershipCustomers(businessId, hotelRightId, name, phoneNo, mobilePhoneNo, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipCustomer operation in MembershipCustomersApi.
 * @export
 * @interface MembershipCustomersApiListMembershipCustomerRequest
 */
export class MembershipCustomersApiListMembershipCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomer
     */
    businessId: string

    /**
     * 
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomer
     */
    customerId: string
}

/**
 * Request parameters for listMembershipCustomers operation in MembershipCustomersApi.
 * @export
 * @interface MembershipCustomersApiListMembershipCustomersRequest
 */
export class MembershipCustomersApiListMembershipCustomersRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    businessId: string

    /**
     * 会員権ID（会員権番号）
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    hotelRightId?: string

    /**
     * name
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    name?: string

    /**
     * 携帯電話番号
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    phoneNo?: string

    /**
     * 
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    mobilePhoneNo?: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MembershipCustomersApiListMembershipCustomers
     */
    limit?: number
}

/**
 * MembershipCustomersApi - object-oriented interface
 * @export
 * @class MembershipCustomersApi
 * @extends {BaseAPI}
 */
export class MembershipCustomersApi extends BaseAPI {
    /**
     * 1顧客の会員情報取得
     * @param {MembershipCustomersApiListMembershipCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipCustomersApi
     */
    public listMembershipCustomer(requestParameters: MembershipCustomersApiListMembershipCustomerRequest, options?: AxiosRequestConfig) {
        return MembershipCustomersApiFp(this.configuration).listMembershipCustomer(requestParameters.businessId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客の会員情報取得
     * @param {MembershipCustomersApiListMembershipCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipCustomersApi
     */
    public listMembershipCustomers(requestParameters: MembershipCustomersApiListMembershipCustomersRequest, options?: AxiosRequestConfig) {
        return MembershipCustomersApiFp(this.configuration).listMembershipCustomers(requestParameters.businessId, requestParameters.hotelRightId, requestParameters.name, requestParameters.phoneNo, requestParameters.mobilePhoneNo, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipHotelBusinessesApi - axios parameter creator
 * @export
 */
export const MembershipHotelBusinessesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * MembershipHotelBusinesses
         * @param {string} accountId account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipHotelBusinesses: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listMembershipHotelBusinesses', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/membership-businesses`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipHotelBusinessesApi - functional programming interface
 * @export
 */
export const MembershipHotelBusinessesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipHotelBusinessesApiAxiosParamCreator(configuration)
    return {
        /**
         * MembershipHotelBusinesses
         * @param {string} accountId account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipHotelBusinesses(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipHotelBusinessesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipHotelBusinesses(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipHotelBusinessesApi - factory interface
 * @export
 */
export const MembershipHotelBusinessesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipHotelBusinessesApiFp(configuration)
    return {
        /**
         * MembershipHotelBusinesses
         * @param {string} accountId account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipHotelBusinesses(accountId: string, options?: any): AxiosPromise<ListMembershipHotelBusinessesResponse> {
            return localVarFp.listMembershipHotelBusinesses(accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipHotelBusinesses operation in MembershipHotelBusinessesApi.
 * @export
 * @interface MembershipHotelBusinessesApiListMembershipHotelBusinessesRequest
 */
export class MembershipHotelBusinessesApiListMembershipHotelBusinessesRequest {
    /**
     * account ID
     * @type {string}
     * @memberof MembershipHotelBusinessesApiListMembershipHotelBusinesses
     */
    accountId: string
}

/**
 * MembershipHotelBusinessesApi - object-oriented interface
 * @export
 * @class MembershipHotelBusinessesApi
 * @extends {BaseAPI}
 */
export class MembershipHotelBusinessesApi extends BaseAPI {
    /**
     * MembershipHotelBusinesses
     * @param {MembershipHotelBusinessesApiListMembershipHotelBusinessesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipHotelBusinessesApi
     */
    public listMembershipHotelBusinesses(requestParameters: MembershipHotelBusinessesApiListMembershipHotelBusinessesRequest, options?: AxiosRequestConfig) {
        return MembershipHotelBusinessesApiFp(this.configuration).listMembershipHotelBusinesses(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipHotelReservationsApi - axios parameter creator
 * @export
 */
export const MembershipHotelReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 会員制ホテルの予約登録
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateMembershipHotelReservationRequest} [createMembershipHotelReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipHotelReservation: async (hotelId: string, createMembershipHotelReservationRequest?: CreateMembershipHotelReservationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('createMembershipHotelReservation', 'hotelId', hotelId)
            const localVarPath = `/membership-hotels/{hotel_id}/reservations`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMembershipHotelReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipHotelReservationsApi - functional programming interface
 * @export
 */
export const MembershipHotelReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipHotelReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 会員制ホテルの予約登録
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateMembershipHotelReservationRequest} [createMembershipHotelReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipHotelReservation(hotelId: string, createMembershipHotelReservationRequest?: CreateMembershipHotelReservationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMembershipHotelReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipHotelReservation(hotelId, createMembershipHotelReservationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipHotelReservationsApi - factory interface
 * @export
 */
export const MembershipHotelReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipHotelReservationsApiFp(configuration)
    return {
        /**
         * 会員制ホテルの予約登録
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateMembershipHotelReservationRequest} [createMembershipHotelReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipHotelReservation(hotelId: string, createMembershipHotelReservationRequest?: CreateMembershipHotelReservationRequest, options?: any): AxiosPromise<CreateMembershipHotelReservationResponse> {
            return localVarFp.createMembershipHotelReservation(hotelId, createMembershipHotelReservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembershipHotelReservation operation in MembershipHotelReservationsApi.
 * @export
 * @interface MembershipHotelReservationsApiCreateMembershipHotelReservationRequest
 */
export class MembershipHotelReservationsApiCreateMembershipHotelReservationRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof MembershipHotelReservationsApiCreateMembershipHotelReservation
     */
    hotelId: string

    /**
     * 
     * @type {CreateMembershipHotelReservationRequest}
     * @memberof MembershipHotelReservationsApiCreateMembershipHotelReservation
     */
    createMembershipHotelReservationRequest?: CreateMembershipHotelReservationRequest
}

/**
 * MembershipHotelReservationsApi - object-oriented interface
 * @export
 * @class MembershipHotelReservationsApi
 * @extends {BaseAPI}
 */
export class MembershipHotelReservationsApi extends BaseAPI {
    /**
     * 会員制ホテルの予約登録
     * @param {MembershipHotelReservationsApiCreateMembershipHotelReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipHotelReservationsApi
     */
    public createMembershipHotelReservation(requestParameters: MembershipHotelReservationsApiCreateMembershipHotelReservationRequest, options?: AxiosRequestConfig) {
        return MembershipHotelReservationsApiFp(this.configuration).createMembershipHotelReservation(requestParameters.hotelId, requestParameters.createMembershipHotelReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipHotelsApi - axios parameter creator
 * @export
 */
export const MembershipHotelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * MembershipHotels
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipHotels: async (businessId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipHotels', 'businessId', businessId)
            const localVarPath = `/membership-businesses/{business_id}/hotels`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipHotelsApi - functional programming interface
 * @export
 */
export const MembershipHotelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipHotelsApiAxiosParamCreator(configuration)
    return {
        /**
         * MembershipHotels
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipHotels(businessId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipHotels(businessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipHotelsApi - factory interface
 * @export
 */
export const MembershipHotelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipHotelsApiFp(configuration)
    return {
        /**
         * MembershipHotels
         * @param {string} businessId 会員制事業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipHotels(businessId: string, options?: any): AxiosPromise<ListMembershipHotelsResponse> {
            return localVarFp.listMembershipHotels(businessId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipHotels operation in MembershipHotelsApi.
 * @export
 * @interface MembershipHotelsApiListMembershipHotelsRequest
 */
export class MembershipHotelsApiListMembershipHotelsRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipHotelsApiListMembershipHotels
     */
    businessId: string
}

/**
 * MembershipHotelsApi - object-oriented interface
 * @export
 * @class MembershipHotelsApi
 * @extends {BaseAPI}
 */
export class MembershipHotelsApi extends BaseAPI {
    /**
     * MembershipHotels
     * @param {MembershipHotelsApiListMembershipHotelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipHotelsApi
     */
    public listMembershipHotels(requestParameters: MembershipHotelsApiListMembershipHotelsRequest, options?: AxiosRequestConfig) {
        return MembershipHotelsApiFp(this.configuration).listMembershipHotels(requestParameters.businessId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipTicketSummariesApi - axios parameter creator
 * @export
 */
export const MembershipTicketSummariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 顧客アカウントが所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerAccountTicketSummaries: async (businessId: string, customerAccountId: string, useYear?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomerAccountTicketSummaries', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('listMembershipCustomerAccountTicketSummaries', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-summaries`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (useYear !== undefined) {
                localVarQueryParameter['use_year'] = useYear;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客が所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerTicketSummaries: async (businessId: string, customerId: string, useYear?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipCustomerTicketSummaries', 'businessId', businessId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listMembershipCustomerTicketSummaries', 'customerId', customerId)
            const localVarPath = `/membership-businesses/{business_id}/customers/{customer_id}/ticket-summaries`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (useYear !== undefined) {
                localVarQueryParameter['use_year'] = useYear;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 利用券の集計データ取得
         * @param {string} businessId 会員制事業ID
         * @param {Array<string>} [hotelIds] ホテルID
         * @param {boolean} [isPrintRequired] 印刷を希望する
         * @param {number} [useYear] 利用年度
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipTicketSummaries: async (businessId: string, hotelIds?: Array<string>, isPrintRequired?: boolean, useYear?: number, hotelRightId?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('listMembershipTicketSummaries', 'businessId', businessId)
            const localVarPath = `/membership-businesses/{business_id}/ticket-summaries`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (hotelIds) {
                localVarQueryParameter['hotel_ids'] = hotelIds;
            }

            if (isPrintRequired !== undefined) {
                localVarQueryParameter['is_print_required'] = isPrintRequired;
            }

            if (useYear !== undefined) {
                localVarQueryParameter['use_year'] = useYear;
            }

            if (hotelRightId !== undefined) {
                localVarQueryParameter['hotel_right_id'] = hotelRightId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipTicketSummariesApi - functional programming interface
 * @export
 */
export const MembershipTicketSummariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipTicketSummariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 顧客アカウントが所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomerAccountTicketSummaries(businessId: string, customerAccountId: string, useYear?: number, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomerAccountTicketSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomerAccountTicketSummaries(businessId, customerAccountId, useYear, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客が所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipCustomerTicketSummaries(businessId: string, customerId: string, useYear?: number, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipCustomerTicketSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipCustomerTicketSummaries(businessId, customerId, useYear, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 利用券の集計データ取得
         * @param {string} businessId 会員制事業ID
         * @param {Array<string>} [hotelIds] ホテルID
         * @param {boolean} [isPrintRequired] 印刷を希望する
         * @param {number} [useYear] 利用年度
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipTicketSummaries(businessId: string, hotelIds?: Array<string>, isPrintRequired?: boolean, useYear?: number, hotelRightId?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembershipTicketSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipTicketSummaries(businessId, hotelIds, isPrintRequired, useYear, hotelRightId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipTicketSummariesApi - factory interface
 * @export
 */
export const MembershipTicketSummariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipTicketSummariesApiFp(configuration)
    return {
        /**
         * 顧客アカウントが所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerAccountTicketSummaries(businessId: string, customerAccountId: string, useYear?: number, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipCustomerAccountTicketSummariesResponse> {
            return localVarFp.listMembershipCustomerAccountTicketSummaries(businessId, customerAccountId, useYear, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客が所有する利用券集計情報取得
         * @param {string} businessId 会員制事業ID
         * @param {string} customerId 顧客ID
         * @param {number} [useYear] 利用年度
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipCustomerTicketSummaries(businessId: string, customerId: string, useYear?: number, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipCustomerTicketSummariesResponse> {
            return localVarFp.listMembershipCustomerTicketSummaries(businessId, customerId, useYear, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 利用券の集計データ取得
         * @param {string} businessId 会員制事業ID
         * @param {Array<string>} [hotelIds] ホテルID
         * @param {boolean} [isPrintRequired] 印刷を希望する
         * @param {number} [useYear] 利用年度
         * @param {string} [hotelRightId] 会員権ID（会員権番号）
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipTicketSummaries(businessId: string, hotelIds?: Array<string>, isPrintRequired?: boolean, useYear?: number, hotelRightId?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListMembershipTicketSummariesResponse> {
            return localVarFp.listMembershipTicketSummaries(businessId, hotelIds, isPrintRequired, useYear, hotelRightId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembershipCustomerAccountTicketSummaries operation in MembershipTicketSummariesApi.
 * @export
 * @interface MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummariesRequest
 */
export class MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummariesRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummaries
     */
    businessId: string

    /**
     * 
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummaries
     */
    customerAccountId: string

    /**
     * 利用年度
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummaries
     */
    useYear?: number

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummaries
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummaries
     */
    limit?: number
}

/**
 * Request parameters for listMembershipCustomerTicketSummaries operation in MembershipTicketSummariesApi.
 * @export
 * @interface MembershipTicketSummariesApiListMembershipCustomerTicketSummariesRequest
 */
export class MembershipTicketSummariesApiListMembershipCustomerTicketSummariesRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerTicketSummaries
     */
    businessId: string

    /**
     * 顧客ID
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerTicketSummaries
     */
    customerId: string

    /**
     * 利用年度
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerTicketSummaries
     */
    useYear?: number

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerTicketSummaries
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipCustomerTicketSummaries
     */
    limit?: number
}

/**
 * Request parameters for listMembershipTicketSummaries operation in MembershipTicketSummariesApi.
 * @export
 * @interface MembershipTicketSummariesApiListMembershipTicketSummariesRequest
 */
export class MembershipTicketSummariesApiListMembershipTicketSummariesRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    businessId: string

    /**
     * ホテルID
     * @type {Array<string>}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    hotelIds?: Array<string>

    /**
     * 印刷を希望する
     * @type {boolean}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    isPrintRequired?: boolean

    /**
     * 利用年度
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    useYear?: number

    /**
     * 会員権ID（会員権番号）
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    hotelRightId?: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof MembershipTicketSummariesApiListMembershipTicketSummaries
     */
    limit?: number
}

/**
 * MembershipTicketSummariesApi - object-oriented interface
 * @export
 * @class MembershipTicketSummariesApi
 * @extends {BaseAPI}
 */
export class MembershipTicketSummariesApi extends BaseAPI {
    /**
     * 顧客アカウントが所有する利用券集計情報取得
     * @param {MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipTicketSummariesApi
     */
    public listMembershipCustomerAccountTicketSummaries(requestParameters: MembershipTicketSummariesApiListMembershipCustomerAccountTicketSummariesRequest, options?: AxiosRequestConfig) {
        return MembershipTicketSummariesApiFp(this.configuration).listMembershipCustomerAccountTicketSummaries(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.useYear, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客が所有する利用券集計情報取得
     * @param {MembershipTicketSummariesApiListMembershipCustomerTicketSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipTicketSummariesApi
     */
    public listMembershipCustomerTicketSummaries(requestParameters: MembershipTicketSummariesApiListMembershipCustomerTicketSummariesRequest, options?: AxiosRequestConfig) {
        return MembershipTicketSummariesApiFp(this.configuration).listMembershipCustomerTicketSummaries(requestParameters.businessId, requestParameters.customerId, requestParameters.useYear, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 利用券の集計データ取得
     * @param {MembershipTicketSummariesApiListMembershipTicketSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipTicketSummariesApi
     */
    public listMembershipTicketSummaries(requestParameters: MembershipTicketSummariesApiListMembershipTicketSummariesRequest, options?: AxiosRequestConfig) {
        return MembershipTicketSummariesApiFp(this.configuration).listMembershipTicketSummaries(requestParameters.businessId, requestParameters.hotelIds, requestParameters.isPrintRequired, requestParameters.useYear, requestParameters.hotelRightId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipTicketTransfersApi - axios parameter creator
 * @export
 */
export const MembershipTicketTransfersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CreateMembershipCustomerAccountTicketTransfer
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketTransferRequest} [createMembershipCustomerAccountTicketTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketTransfer: async (businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketTransferRequest?: CreateMembershipCustomerAccountTicketTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketTransfer', 'businessId', businessId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('createMembershipCustomerAccountTicketTransfer', 'customerAccountId', customerAccountId)
            const localVarPath = `/membership-businesses/{business_id}/customer-accounts/{customer_account_id}/ticket-transfers`
                .replace(`{${"business_id"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMembershipCustomerAccountTicketTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipTicketTransfersApi - functional programming interface
 * @export
 */
export const MembershipTicketTransfersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipTicketTransfersApiAxiosParamCreator(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketTransfer
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketTransferRequest} [createMembershipCustomerAccountTicketTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipCustomerAccountTicketTransfer(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketTransferRequest?: CreateMembershipCustomerAccountTicketTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMembershipCustomerAccountTicketTransferResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipCustomerAccountTicketTransfer(businessId, customerAccountId, createMembershipCustomerAccountTicketTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipTicketTransfersApi - factory interface
 * @export
 */
export const MembershipTicketTransfersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipTicketTransfersApiFp(configuration)
    return {
        /**
         * CreateMembershipCustomerAccountTicketTransfer
         * @param {string} businessId 会員制事業ID
         * @param {string} customerAccountId 顧客アカウントID
         * @param {CreateMembershipCustomerAccountTicketTransferRequest} [createMembershipCustomerAccountTicketTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipCustomerAccountTicketTransfer(businessId: string, customerAccountId: string, createMembershipCustomerAccountTicketTransferRequest?: CreateMembershipCustomerAccountTicketTransferRequest, options?: any): AxiosPromise<CreateMembershipCustomerAccountTicketTransferResponse> {
            return localVarFp.createMembershipCustomerAccountTicketTransfer(businessId, customerAccountId, createMembershipCustomerAccountTicketTransferRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembershipCustomerAccountTicketTransfer operation in MembershipTicketTransfersApi.
 * @export
 * @interface MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransferRequest
 */
export class MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransferRequest {
    /**
     * 会員制事業ID
     * @type {string}
     * @memberof MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransfer
     */
    businessId: string

    /**
     * 顧客アカウントID
     * @type {string}
     * @memberof MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransfer
     */
    customerAccountId: string

    /**
     * 
     * @type {CreateMembershipCustomerAccountTicketTransferRequest}
     * @memberof MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransfer
     */
    createMembershipCustomerAccountTicketTransferRequest?: CreateMembershipCustomerAccountTicketTransferRequest
}

/**
 * MembershipTicketTransfersApi - object-oriented interface
 * @export
 * @class MembershipTicketTransfersApi
 * @extends {BaseAPI}
 */
export class MembershipTicketTransfersApi extends BaseAPI {
    /**
     * CreateMembershipCustomerAccountTicketTransfer
     * @param {MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipTicketTransfersApi
     */
    public createMembershipCustomerAccountTicketTransfer(requestParameters: MembershipTicketTransfersApiCreateMembershipCustomerAccountTicketTransferRequest, options?: AxiosRequestConfig) {
        return MembershipTicketTransfersApiFp(this.configuration).createMembershipCustomerAccountTicketTransfer(requestParameters.businessId, requestParameters.customerAccountId, requestParameters.createMembershipCustomerAccountTicketTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



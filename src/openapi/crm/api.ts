/* tslint:disable */
/* eslint-disable */
/**
 * Tap Hub API - CRM API
 * crm-root
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject,setAuthorizationTokenToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * * `Prefix` - Prefix * `Suffix` - Suffix 
 * @export
 * @enum {string}
 */

export const AffixationId = {
    Prefix: 'Prefix',
    Suffix: 'Suffix'
} as const;

export type AffixationId = typeof AffixationId[keyof typeof AffixationId];


/**
 * Request
 * @export
 * @interface ApiCommonResponseRequest
 */
export class ApiCommonResponseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    version?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    body?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    url?: string
}
/**
 * 
 * @export
 * @interface ApiCreateRequest
 */
export class ApiCreateRequest {
}
/**
 * 
 * @export
 * @interface ApiCreateResponse
 */
export class ApiCreateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiCreateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiCreateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiDeleteResponse
 */
export class ApiDeleteResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiDeleteResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiDeleteResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiError
 */
export class ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    code?: string
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ApiErrorResponseBadRequest
 */
export class ApiErrorResponseBadRequest {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseBadRequest
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseBadRequest
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof ApiErrorResponseBadRequest
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface ApiErrorResponseInternalError
 */
export class ApiErrorResponseInternalError {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseInternalError
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseInternalError
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseInternalError
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseNotFound
 */
export class ApiErrorResponseNotFound {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseNotFound
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseNotFound
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseNotFound
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseUnauthorized
 */
export class ApiErrorResponseUnauthorized {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseUnauthorized
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseUnauthorized
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseUnauthorized
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiGetResponse
 */
export class ApiGetResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiGetResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiGetResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiListResponse
 */
export class ApiListResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiListResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiListResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiListResponseAllOf
 */
export class ApiListResponseAllOf {
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponseAllOf
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export class ApiResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiUpdateRequest
 */
export class ApiUpdateRequest {
}
/**
 * 
 * @export
 * @interface ApiUpdateResponse
 */
export class ApiUpdateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiUpdateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiUpdateResponse
     */
    request_id?: string
}
/**
 * Corporate Customer
 * @export
 * @interface CorporateCustomer
 */
export class CorporateCustomer {
    /**
     * 
     * @type {EditInfo}
     * @memberof CorporateCustomer
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CorporateCustomer
     */
    change_info?: EditInfo
    /**
     * customer_id
     * @type {string}
     * @memberof CorporateCustomer
     */
    customer_id?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CorporateCustomer
     */
    ar_closing_date?: string
    /**
     * 
     * @type {Array<CustomerAttribute>}
     * @memberof CorporateCustomer
     */
    attributes?: Array<CustomerAttribute>
    /**
     * bill_address_id
     * @type {string}
     * @memberof CorporateCustomer
     */
    bill_address_id?: string
    /**
     * bill_address_name
     * @type {string}
     * @memberof CorporateCustomer
     */
    bill_address_name?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof CorporateCustomer
     */
    customer_class_id?: CustomerClassId
    /**
     * division_id
     * @type {string}
     * @memberof CorporateCustomer
     */
    division_id?: string
    /**
     * division_name
     * @type {string}
     * @memberof CorporateCustomer
     */
    division_name?: string
    /**
     * 
     * @type {Array<CustomerHotelDivision>}
     * @memberof CorporateCustomer
     */
    divisions?: Array<CustomerHotelDivision>
    /**
     * 
     * @type {CustomerDmDeliveryOptionId}
     * @memberof CorporateCustomer
     */
    dm_delivery_option_id?: CustomerDmDeliveryOptionId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CorporateCustomer
     */
    email_main?: string
    /**
     * 
     * @type {Array<CustomerEmail>}
     * @memberof CorporateCustomer
     */
    emails?: Array<CustomerEmail>
    /**
     * 
     * @type {Array<CustomerGiftPlan>}
     * @memberof CorporateCustomer
     */
    gift_plans?: Array<CustomerGiftPlan>
    /**
     * 
     * @type {Array<CustomerMembership>}
     * @memberof CorporateCustomer
     */
    memberships?: Array<CustomerMembership>
    /**
     * name
     * @type {string}
     * @memberof CorporateCustomer
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CorporateCustomer
     */
    name_alias?: string
    /**
     * name_second
     * @type {string}
     * @memberof CorporateCustomer
     */
    name_second?: string
    /**
     * name_second_alias
     * @type {string}
     * @memberof CorporateCustomer
     */
    name_second_alias?: string
    /**
     * 
     * @type {Array<CustomerPersonRelation>}
     * @memberof CorporateCustomer
     */
    person_relations?: Array<CustomerPersonRelation>
    /**
     * remark
     * @type {string}
     * @memberof CorporateCustomer
     */
    remark?: string
    /**
     * 
     * @type {Array<CustomerCorporationAddress>}
     * @memberof CorporateCustomer
     */
    addresses?: Array<CustomerCorporationAddress>
    /**
     * 
     * @type {CustomerCorporation}
     * @memberof CorporateCustomer
     */
    corporation?: CustomerCorporation
    /**
     * 
     * @type {string}
     * @memberof CorporateCustomer
     */
    parent_customer_id?: string
}
/**
 * 
 * @export
 * @interface CorporateCustomerAllOf
 */
export class CorporateCustomerAllOf {
    /**
     * 
     * @type {Array<CustomerCorporationAddress>}
     * @memberof CorporateCustomerAllOf
     */
    addresses?: Array<CustomerCorporationAddress>
    /**
     * 
     * @type {CustomerCorporation}
     * @memberof CorporateCustomerAllOf
     */
    corporation?: CustomerCorporation
    /**
     * 
     * @type {string}
     * @memberof CorporateCustomerAllOf
     */
    parent_customer_id?: string
}
/**
 * 
 * @export
 * @interface CreateCorporateCustomerRequest
 */
export class CreateCorporateCustomerRequest {
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof CreateCorporateCustomerRequest
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface CreateCorporateCustomerResponse
 */
export class CreateCorporateCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateCorporateCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateCorporateCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof CreateCorporateCustomerResponse
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface CreateCorporateCustomerResponseAllOf
 */
export class CreateCorporateCustomerResponseAllOf {
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof CreateCorporateCustomerResponseAllOf
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountLoginRequest
 */
export class CreateCustomerAccountLoginRequest {
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CreateCustomerAccountLoginRequest
     */
    email?: string
    /**
     * ログイン用パスワード
     * @type {string}
     * @memberof CreateCustomerAccountLoginRequest
     */
    password?: string
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountLoginRequestAllOf
 */
export class CreateCustomerAccountLoginRequestAllOf {
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CreateCustomerAccountLoginRequestAllOf
     */
    email?: string
    /**
     * ログイン用パスワード
     * @type {string}
     * @memberof CreateCustomerAccountLoginRequestAllOf
     */
    password?: string
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountLoginResponse
 */
export class CreateCustomerAccountLoginResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateCustomerAccountLoginResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateCustomerAccountLoginResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccountLogin}
     * @memberof CreateCustomerAccountLoginResponse
     */
    customer_account_login?: CustomerAccountLogin
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountLoginResponseAllOf
 */
export class CreateCustomerAccountLoginResponseAllOf {
    /**
     * 
     * @type {CustomerAccountLogin}
     * @memberof CreateCustomerAccountLoginResponseAllOf
     */
    customer_account_login?: CustomerAccountLogin
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountMessageRequest
 */
export class CreateCustomerAccountMessageRequest {
    /**
     * 
     * @type {CustomerAccountMessageStatic & CustomerAccountMessageDynamic}
     * @memberof CreateCustomerAccountMessageRequest
     */
    customer_message?: CustomerAccountMessageStatic & CustomerAccountMessageDynamic
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountMessageRequestAllOf
 */
export class CreateCustomerAccountMessageRequestAllOf {
    /**
     * 
     * @type {CustomerAccountMessageStatic & CustomerAccountMessageDynamic}
     * @memberof CreateCustomerAccountMessageRequestAllOf
     */
    customer_message?: CustomerAccountMessageStatic & CustomerAccountMessageDynamic
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountMessageResponse
 */
export class CreateCustomerAccountMessageResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateCustomerAccountMessageResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateCustomerAccountMessageResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccountMessage}
     * @memberof CreateCustomerAccountMessageResponse
     */
    customer_message?: CustomerAccountMessage
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountMessageResponseAllOf
 */
export class CreateCustomerAccountMessageResponseAllOf {
    /**
     * 
     * @type {CustomerAccountMessage}
     * @memberof CreateCustomerAccountMessageResponseAllOf
     */
    customer_message?: CustomerAccountMessage
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountRequest
 */
export class CreateCustomerAccountRequest {
    /**
     * 
     * @type {CustomerAccount}
     * @memberof CreateCustomerAccountRequest
     */
    customer_account?: CustomerAccount
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountResponse
 */
export class CreateCustomerAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateCustomerAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateCustomerAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccount}
     * @memberof CreateCustomerAccountResponse
     */
    customer_account?: CustomerAccount
}
/**
 * 
 * @export
 * @interface CreateCustomerAccountResponseAllOf
 */
export class CreateCustomerAccountResponseAllOf {
    /**
     * 
     * @type {CustomerAccount}
     * @memberof CreateCustomerAccountResponseAllOf
     */
    customer_account?: CustomerAccount
}
/**
 * 
 * @export
 * @interface CreateIndividualCustomerRequest
 */
export class CreateIndividualCustomerRequest {
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof CreateIndividualCustomerRequest
     */
    customer?: IndividualCustomer
}
/**
 * 
 * @export
 * @interface CreateIndividualCustomerResponse
 */
export class CreateIndividualCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateIndividualCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateIndividualCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof CreateIndividualCustomerResponse
     */
    customer?: IndividualCustomer
}
/**
 * 
 * @export
 * @interface CreateIndividualCustomerResponseAllOf
 */
export class CreateIndividualCustomerResponseAllOf {
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof CreateIndividualCustomerResponseAllOf
     */
    customer?: IndividualCustomer
}
/**
 * CustomerBasicInfo
 * @export
 * @interface Customer
 */
export class Customer {
    /**
     * 
     * @type {EditInfo}
     * @memberof Customer
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Customer
     */
    change_info?: EditInfo
    /**
     * customer_id
     * @type {string}
     * @memberof Customer
     */
    customer_id?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof Customer
     */
    ar_closing_date?: string
    /**
     * 
     * @type {Array<CustomerAttribute>}
     * @memberof Customer
     */
    attributes?: Array<CustomerAttribute>
    /**
     * bill_address_id
     * @type {string}
     * @memberof Customer
     */
    bill_address_id?: string
    /**
     * bill_address_name
     * @type {string}
     * @memberof Customer
     */
    bill_address_name?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof Customer
     */
    customer_class_id?: CustomerClassId
    /**
     * division_id
     * @type {string}
     * @memberof Customer
     */
    division_id?: string
    /**
     * division_name
     * @type {string}
     * @memberof Customer
     */
    division_name?: string
    /**
     * 
     * @type {Array<CustomerHotelDivision>}
     * @memberof Customer
     */
    divisions?: Array<CustomerHotelDivision>
    /**
     * 
     * @type {CustomerDmDeliveryOptionId}
     * @memberof Customer
     */
    dm_delivery_option_id?: CustomerDmDeliveryOptionId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof Customer
     */
    email_main?: string
    /**
     * 
     * @type {Array<CustomerEmail>}
     * @memberof Customer
     */
    emails?: Array<CustomerEmail>
    /**
     * 
     * @type {Array<CustomerGiftPlan>}
     * @memberof Customer
     */
    gift_plans?: Array<CustomerGiftPlan>
    /**
     * 
     * @type {Array<CustomerMembership>}
     * @memberof Customer
     */
    memberships?: Array<CustomerMembership>
    /**
     * name
     * @type {string}
     * @memberof Customer
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof Customer
     */
    name_alias?: string
    /**
     * name_second
     * @type {string}
     * @memberof Customer
     */
    name_second?: string
    /**
     * name_second_alias
     * @type {string}
     * @memberof Customer
     */
    name_second_alias?: string
    /**
     * 
     * @type {Array<CustomerPersonRelation>}
     * @memberof Customer
     */
    person_relations?: Array<CustomerPersonRelation>
    /**
     * remark
     * @type {string}
     * @memberof Customer
     */
    remark?: string
}
/**
 * Customer Account
 * @export
 * @interface CustomerAccount
 */
export class CustomerAccount {
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerAccount
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerAccount
     */
    change_info?: EditInfo
    /**
     * 顧客アカウント識別ID
     * @type {string}
     * @memberof CustomerAccount
     */
    customer_account_id?: string
    /**
     * 名
     * @type {string}
     * @memberof CustomerAccount
     */
    name_first?: string
    /**
     * 性
     * @type {string}
     * @memberof CustomerAccount
     */
    name_last?: string
    /**
     * 名(カナ)
     * @type {string}
     * @memberof CustomerAccount
     */
    name_alias_first?: string
    /**
     * 性(カナ)
     * @type {string}
     * @memberof CustomerAccount
     */
    name_alias_last?: string
    /**
     * 別名
     * @type {string}
     * @memberof CustomerAccount
     */
    name_second?: string
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof CustomerAccount
     */
    phone_no?: string
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerAccount
     */
    email?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerAccount
     */
    birth_date?: string
    /**
     * 
     * @type {GenderTypeId}
     * @memberof CustomerAccount
     */
    gender_type_id?: GenderTypeId
}
/**
 * 
 * @export
 * @interface CustomerAccountDynamic
 */
export class CustomerAccountDynamic {
    /**
     * 名
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    name_first?: string
    /**
     * 性
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    name_last?: string
    /**
     * 名(カナ)
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    name_alias_first?: string
    /**
     * 性(カナ)
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    name_alias_last?: string
    /**
     * 別名
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    name_second?: string
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    phone_no?: string
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    email?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerAccountDynamic
     */
    birth_date?: string
    /**
     * 
     * @type {GenderTypeId}
     * @memberof CustomerAccountDynamic
     */
    gender_type_id?: GenderTypeId
}
/**
 * 
 * @export
 * @interface CustomerAccountLogin
 */
export class CustomerAccountLogin {
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    phone_no_as_mfa?: string
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    expires_in?: string
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    id_token?: string
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    refresh_token?: string
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    token_type?: string
    /**
     * 顧客アカウント識別ID
     * @type {string}
     * @memberof CustomerAccountLogin
     */
    customer_account_id?: string
}
/**
 * Customer Account Message
 * @export
 * @interface CustomerAccountMessage
 */
export class CustomerAccountMessage {
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerAccountMessage
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerAccountMessage
     */
    change_info?: EditInfo
    /**
     * 顧客アカウント識別ID
     * @type {string}
     * @memberof CustomerAccountMessage
     */
    customer_account_id?: string
    /**
     * 顧客アカウントに対するメッセージ識別ID
     * @type {string}
     * @memberof CustomerAccountMessage
     */
    customer_account_message_id?: string
    /**
     * 
     * @type {CustomerAccountMessageEvent}
     * @memberof CustomerAccountMessage
     */
    customer_account_message_event?: CustomerAccountMessageEvent
    /**
     * 
     * @type {CustomerAccountMessageMarkAsRead}
     * @memberof CustomerAccountMessage
     */
    customer_account_message_mark_as_read?: CustomerAccountMessageMarkAsRead
}
/**
 * 
 * @export
 * @interface CustomerAccountMessageDynamic
 */
export class CustomerAccountMessageDynamic {
    /**
     * 
     * @type {CustomerAccountMessageEvent}
     * @memberof CustomerAccountMessageDynamic
     */
    customer_account_message_event?: CustomerAccountMessageEvent
    /**
     * 
     * @type {CustomerAccountMessageMarkAsRead}
     * @memberof CustomerAccountMessageDynamic
     */
    customer_account_message_mark_as_read?: CustomerAccountMessageMarkAsRead
}
/**
 * 
 * @export
 * @interface CustomerAccountMessageEvent
 */
export class CustomerAccountMessageEvent {
    /**
     * メッセージイベントが生成された時刻
     * @type {string}
     * @memberof CustomerAccountMessageEvent
     */
    create_timestamp?: string
    /**
     * メッセージイベント識別ID
     * @type {string}
     * @memberof CustomerAccountMessageEvent
     */
    message_event_type_id?: string
    /**
     * イベント名
     * @type {string}
     * @memberof CustomerAccountMessageEvent
     */
    message_event_type_name?: string
}
/**
 * 
 * @export
 * @interface CustomerAccountMessageMarkAsRead
 */
export class CustomerAccountMessageMarkAsRead {
    /**
     * 既読
     * @type {boolean}
     * @memberof CustomerAccountMessageMarkAsRead
     */
    is_read?: boolean
    /**
     * 既読の時刻
     * @type {string}
     * @memberof CustomerAccountMessageMarkAsRead
     */
    read_timestamp?: string
}
/**
 * 
 * @export
 * @interface CustomerAccountMessageStatic
 */
export class CustomerAccountMessageStatic {
    /**
     * 顧客アカウントに対するメッセージ識別ID
     * @type {string}
     * @memberof CustomerAccountMessageStatic
     */
    customer_account_message_id?: string
}
/**
 * 
 * @export
 * @interface CustomerAccountStatic
 */
export class CustomerAccountStatic {
    /**
     * 顧客アカウント識別ID
     * @type {string}
     * @memberof CustomerAccountStatic
     */
    customer_account_id?: string
}
/**
 * Customer Address
 * @export
 * @interface CustomerAddress
 */
export class CustomerAddress {
    /**
     * fax_no
     * @type {string}
     * @memberof CustomerAddress
     */
    fax_no?: string
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerAddress
     */
    lines?: Array<string>
    /**
     * 
     * @type {Array<PhoneNumber1>}
     * @memberof CustomerAddress
     */
    phone_nos?: Array<PhoneNumber1>
    /**
     * postal_code
     * @type {string}
     * @memberof CustomerAddress
     */
    postal_code?: string
    /**
     * remark
     * @type {string}
     * @memberof CustomerAddress
     */
    remark?: string
}
/**
 * Customer Attribute
 * @export
 * @interface CustomerAttribute
 */
export class CustomerAttribute {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerAttribute
     */
    boolean_value?: boolean
    /**
     * 
     * @type {number}
     * @memberof CustomerAttribute
     */
    index?: number
    /**
     * 
     * @type {CustomerAttributeInputMethodId}
     * @memberof CustomerAttribute
     */
    input_method_id?: CustomerAttributeInputMethodId
    /**
     * item_id
     * @type {string}
     * @memberof CustomerAttribute
     */
    item_id?: string
    /**
     * item_name
     * @type {string}
     * @memberof CustomerAttribute
     */
    item_name?: string
    /**
     * item_name_alias
     * @type {string}
     * @memberof CustomerAttribute
     */
    item_name_alias?: string
    /**
     * item_name_short
     * @type {string}
     * @memberof CustomerAttribute
     */
    item_name_short?: string
    /**
     * item_sequence
     * @type {number}
     * @memberof CustomerAttribute
     */
    item_sequence?: number
    /**
     * item_is_active
     * @type {boolean}
     * @memberof CustomerAttribute
     */
    item_is_active?: boolean
    /**
     * number_double
     * @type {number}
     * @memberof CustomerAttribute
     */
    number_double?: number
    /**
     * number_integer
     * @type {number}
     * @memberof CustomerAttribute
     */
    number_integer?: number
    /**
     * parent_item_id
     * @type {string}
     * @memberof CustomerAttribute
     */
    parent_item_id?: string
    /**
     * parent_item_name
     * @type {string}
     * @memberof CustomerAttribute
     */
    parent_item_name?: string
    /**
     * parent_item_type_id
     * @type {string}
     * @memberof CustomerAttribute
     */
    parent_item_type_id?: string
    /**
     * text
     * @type {string}
     * @memberof CustomerAttribute
     */
    text?: string
    /**
     * 
     * @type {CustomerAttributeTypeId}
     * @memberof CustomerAttribute
     */
    type_id?: CustomerAttributeTypeId
}
/**
 * CustomerAttributeInputMethodId
 * @export
 * @enum {string}
 */

export const CustomerAttributeInputMethodId = {
    Checkbox: 'Checkbox',
    Item: 'Item',
    ItemWithGroup: 'ItemWithGroup',
    MultiITem: 'MultiITem',
    NumberDouble: 'NumberDouble',
    NumberInteger: 'NumberInteger',
    Text: 'Text'
} as const;

export type CustomerAttributeInputMethodId = typeof CustomerAttributeInputMethodId[keyof typeof CustomerAttributeInputMethodId];


/**
 * CustomerAttributeTypeId
 * @export
 * @enum {string}
 */

export const CustomerAttributeTypeId = {
    BillAddressCreditAvailability: 'BillAddressCreditAvailability',
    BirthDayCelebration: 'BirthDayCelebration',
    Category: 'Category',
    Certification: 'Certification',
    Currency: 'Currency',
    General0: 'General0',
    General1: 'General1',
    General2: 'General2',
    General3: 'General3',
    General4: 'General4',
    General5: 'General5',
    General6: 'General6',
    General7: 'General7',
    General8: 'General8',
    General9: 'General9',
    HonorificTitle: 'HonorificTitle',
    JobFamily: 'JobFamily',
    Language: 'Language',
    LocationArea: 'LocationArea',
    LocationAreaRange: 'LocationAreaRange',
    LocationLine: 'LocationLine',
    LocationStation: 'LocationStation',
    Nationality: 'Nationality',
    Rank: 'Rank',
    RankReason: 'RankReason',
    SalesPerson: 'SalesPerson',
    SubCategory: 'SubCategory',
    WeddingAnniversary: 'WeddingAnniversary'
} as const;

export type CustomerAttributeTypeId = typeof CustomerAttributeTypeId[keyof typeof CustomerAttributeTypeId];


/**
 * Customer Car
 * @export
 * @interface CustomerCar
 */
export class CustomerCar {
    /**
     * Car Number
     * @type {string}
     * @memberof CustomerCar
     */
    number?: string
    /**
     * Car Name
     * @type {string}
     * @memberof CustomerCar
     */
    name?: string
}
/**
 * CustomerClassId
 * @export
 * @enum {string}
 */

export const CustomerClassId = {
    Corporation: 'Corporation',
    Individual: 'Individual'
} as const;

export type CustomerClassId = typeof CustomerClassId[keyof typeof CustomerClassId];


/**
 * Customer Corporation
 * @export
 * @interface CustomerCorporation
 */
export class CustomerCorporation {
    /**
     * 
     * @type {CustomerCorporationAddress}
     * @memberof CustomerCorporation
     */
    address?: CustomerCorporationAddress
    /**
     * capital_amount
     * @type {number}
     * @memberof CustomerCorporation
     */
    capital_amount?: number
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerCorporation
     */
    establishment_date?: string
    /**
     * is_supplier
     * @type {boolean}
     * @memberof CustomerCorporation
     */
    is_supplier?: boolean
    /**
     * Name
     * @type {string}
     * @memberof CustomerCorporation
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerCorporation
     */
    name_alias?: string
    /**
     * name_alias_normalized
     * @type {string}
     * @memberof CustomerCorporation
     */
    name_alias_normalized?: string
    /**
     * person_count
     * @type {number}
     * @memberof CustomerCorporation
     */
    person_count?: number
    /**
     * 
     * @type {CustomerCorporationRepresentative}
     * @memberof CustomerCorporation
     */
    representative?: CustomerCorporationRepresentative
    /**
     * 
     * @type {CustomerCorporationSupplier}
     * @memberof CustomerCorporation
     */
    supplier?: CustomerCorporationSupplier
    /**
     * 
     * @type {AffixationId}
     * @memberof CustomerCorporation
     */
    type_affixation_id?: AffixationId
    /**
     * 
     * @type {Url}
     * @memberof CustomerCorporation
     */
    url?: Url
}
/**
 * Customer Corporation Address
 * @export
 * @interface CustomerCorporationAddress
 */
export class CustomerCorporationAddress {
    /**
     * fax_no
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    fax_no?: string
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerCorporationAddress
     */
    lines?: Array<string>
    /**
     * 
     * @type {Array<PhoneNumber1>}
     * @memberof CustomerCorporationAddress
     */
    phone_nos?: Array<PhoneNumber1>
    /**
     * postal_code
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    postal_code?: string
    /**
     * remark
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    remark?: string
    /**
     * branch_name
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    branch_name?: string
    /**
     * branch_name_alias
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    branch_name_alias?: string
    /**
     * department_name
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    department_name?: string
    /**
     * 
     * @type {CustomerCorporationAddressPartner}
     * @memberof CustomerCorporationAddress
     */
    partner?: CustomerCorporationAddressPartner
    /**
     * phone_no_extension
     * @type {string}
     * @memberof CustomerCorporationAddress
     */
    phone_no_extension?: string
}
/**
 * 
 * @export
 * @interface CustomerCorporationAddressAllOf
 */
export class CustomerCorporationAddressAllOf {
    /**
     * branch_name
     * @type {string}
     * @memberof CustomerCorporationAddressAllOf
     */
    branch_name?: string
    /**
     * branch_name_alias
     * @type {string}
     * @memberof CustomerCorporationAddressAllOf
     */
    branch_name_alias?: string
    /**
     * department_name
     * @type {string}
     * @memberof CustomerCorporationAddressAllOf
     */
    department_name?: string
    /**
     * 
     * @type {CustomerCorporationAddressPartner}
     * @memberof CustomerCorporationAddressAllOf
     */
    partner?: CustomerCorporationAddressPartner
    /**
     * phone_no_extension
     * @type {string}
     * @memberof CustomerCorporationAddressAllOf
     */
    phone_no_extension?: string
}
/**
 * Customer Corporation Address Partner
 * @export
 * @interface CustomerCorporationAddressPartner
 */
export class CustomerCorporationAddressPartner {
    /**
     * name
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    name_alias?: string
    /**
     * 
     * @type {AffixationId}
     * @memberof CustomerCorporationAddressPartner
     */
    honorific_title_affixation_id?: AffixationId
    /**
     * honorific_title_id
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    honorific_title_id?: string
    /**
     * honorific_title_name
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    honorific_title_name?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    joined_date?: string
    /**
     * post_name
     * @type {string}
     * @memberof CustomerCorporationAddressPartner
     */
    post_name?: string
}
/**
 * Customer Corporation Representative
 * @export
 * @interface CustomerCorporationRepresentative
 */
export class CustomerCorporationRepresentative {
    /**
     * name
     * @type {string}
     * @memberof CustomerCorporationRepresentative
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerCorporationRepresentative
     */
    name_alias?: string
    /**
     * title
     * @type {string}
     * @memberof CustomerCorporationRepresentative
     */
    title?: string
}
/**
 * Customer Corporation Supplier
 * @export
 * @interface CustomerCorporationSupplier
 */
export class CustomerCorporationSupplier {
    /**
     * contract_number
     * @type {string}
     * @memberof CustomerCorporationSupplier
     */
    contract_number?: string
    /**
     * contract_division_name
     * @type {string}
     * @memberof CustomerCorporationSupplier
     */
    contract_division_name?: string
}
/**
 * CustomerDmDeliveryOptionId
 * @export
 * @enum {string}
 */

export const CustomerDmDeliveryOptionId = {
    Company: 'Company',
    Home: 'Home',
    NoDelivery: 'NoDelivery',
    Office: 'Office',
    Other: 'Other'
} as const;

export type CustomerDmDeliveryOptionId = typeof CustomerDmDeliveryOptionId[keyof typeof CustomerDmDeliveryOptionId];


/**
 * 
 * @export
 * @interface CustomerDynamic
 */
export class CustomerDynamic {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerDynamic
     */
    ar_closing_date?: string
    /**
     * 
     * @type {Array<CustomerAttribute>}
     * @memberof CustomerDynamic
     */
    attributes?: Array<CustomerAttribute>
    /**
     * bill_address_id
     * @type {string}
     * @memberof CustomerDynamic
     */
    bill_address_id?: string
    /**
     * bill_address_name
     * @type {string}
     * @memberof CustomerDynamic
     */
    bill_address_name?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof CustomerDynamic
     */
    customer_class_id?: CustomerClassId
    /**
     * division_id
     * @type {string}
     * @memberof CustomerDynamic
     */
    division_id?: string
    /**
     * division_name
     * @type {string}
     * @memberof CustomerDynamic
     */
    division_name?: string
    /**
     * 
     * @type {Array<CustomerHotelDivision>}
     * @memberof CustomerDynamic
     */
    divisions?: Array<CustomerHotelDivision>
    /**
     * 
     * @type {CustomerDmDeliveryOptionId}
     * @memberof CustomerDynamic
     */
    dm_delivery_option_id?: CustomerDmDeliveryOptionId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerDynamic
     */
    email_main?: string
    /**
     * 
     * @type {Array<CustomerEmail>}
     * @memberof CustomerDynamic
     */
    emails?: Array<CustomerEmail>
    /**
     * 
     * @type {Array<CustomerGiftPlan>}
     * @memberof CustomerDynamic
     */
    gift_plans?: Array<CustomerGiftPlan>
    /**
     * 
     * @type {Array<CustomerMembership>}
     * @memberof CustomerDynamic
     */
    memberships?: Array<CustomerMembership>
    /**
     * name
     * @type {string}
     * @memberof CustomerDynamic
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerDynamic
     */
    name_alias?: string
    /**
     * name_second
     * @type {string}
     * @memberof CustomerDynamic
     */
    name_second?: string
    /**
     * name_second_alias
     * @type {string}
     * @memberof CustomerDynamic
     */
    name_second_alias?: string
    /**
     * 
     * @type {Array<CustomerPersonRelation>}
     * @memberof CustomerDynamic
     */
    person_relations?: Array<CustomerPersonRelation>
    /**
     * remark
     * @type {string}
     * @memberof CustomerDynamic
     */
    remark?: string
}
/**
 * Customer Email
 * @export
 * @interface CustomerEmail
 */
export class CustomerEmail {
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerEmail
     */
    email?: string
    /**
     * is_enabled
     * @type {boolean}
     * @memberof CustomerEmail
     */
    is_enabled?: boolean
    /**
     * sequence
     * @type {number}
     * @memberof CustomerEmail
     */
    sequence?: number
    /**
     * 
     * @type {CustomerEmailTypeId}
     * @memberof CustomerEmail
     */
    type_id?: CustomerEmailTypeId
}
/**
 * CustomerEmailTypeId
 * @export
 * @enum {string}
 */

export const CustomerEmailTypeId = {
    Home: 'Home',
    Mobile: 'Mobile',
    Office: 'Office',
    Unknown: 'Unknown'
} as const;

export type CustomerEmailTypeId = typeof CustomerEmailTypeId[keyof typeof CustomerEmailTypeId];


/**
 * Customer Gift Plan
 * @export
 * @interface CustomerGiftPlan
 */
export class CustomerGiftPlan {
    /**
     * opportunity_id
     * @type {string}
     * @memberof CustomerGiftPlan
     */
    opportunity_id?: string
    /**
     * opportunity_name
     * @type {string}
     * @memberof CustomerGiftPlan
     */
    opportunity_name?: string
    /**
     * item_id
     * @type {string}
     * @memberof CustomerGiftPlan
     */
    item_id?: string
    /**
     * item_name
     * @type {string}
     * @memberof CustomerGiftPlan
     */
    item_name?: string
    /**
     * 
     * @type {number}
     * @memberof CustomerGiftPlan
     */
    quantity?: number
}
/**
 * Customer Hotel Division
 * @export
 * @interface CustomerHotelDivision
 */
export class CustomerHotelDivision {
    /**
     * 
     * @type {string}
     * @memberof CustomerHotelDivision
     */
    division_id?: string
    /**
     * 
     * @type {string}
     * @memberof CustomerHotelDivision
     */
    division_name?: string
}
/**
 * CustomerListItem
 * @export
 * @interface CustomerListItem
 */
export class CustomerListItem {
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerListItem
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerListItem
     */
    change_info?: EditInfo
    /**
     * address_lines
     * @type {Array<string>}
     * @memberof CustomerListItem
     */
    address_lines?: Array<string>
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerListItem
     */
    birth_date?: string
    /**
     * customer_id
     * @type {string}
     * @memberof CustomerListItem
     */
    customer_id?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof CustomerListItem
     */
    customer_class_id?: CustomerClassId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof CustomerListItem
     */
    email?: string
    /**
     * fax_no
     * @type {string}
     * @memberof CustomerListItem
     */
    fax_no?: string
    /**
     * is_active
     * @type {boolean}
     * @memberof CustomerListItem
     */
    is_active?: boolean
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerListItem
     */
    name_alias?: string
    /**
     * number_of_times
     * @type {number}
     * @memberof CustomerListItem
     */
    number_of_times?: number
    /**
     * phone_no_0
     * @type {string}
     * @memberof CustomerListItem
     */
    phone_no_0?: string
    /**
     * phone_no_1
     * @type {string}
     * @memberof CustomerListItem
     */
    phone_no_1?: string
    /**
     * postal_code
     * @type {string}
     * @memberof CustomerListItem
     */
    postal_code?: string
}
/**
 * Customer Membership
 * @export
 * @interface CustomerMembership
 */
export class CustomerMembership {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerMembership
     */
    cancellation_date?: string
    /**
     * cancellation_reason_id
     * @type {string}
     * @memberof CustomerMembership
     */
    cancellation_reason_id?: string
    /**
     * cancellation_reason_name
     * @type {string}
     * @memberof CustomerMembership
     */
    cancellation_reason_name?: string
    /**
     * customer_id
     * @type {string}
     * @memberof CustomerMembership
     */
    customer_id?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerMembership
     */
    expiration_date?: string
    /**
     * membership_program_id
     * @type {string}
     * @memberof CustomerMembership
     */
    membership_program_id?: string
    /**
     * membership_program_name
     * @type {string}
     * @memberof CustomerMembership
     */
    membership_program_name?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerMembership
     */
    joined_date?: string
    /**
     * number
     * @type {string}
     * @memberof CustomerMembership
     */
    number?: string
    /**
     * number_type_name
     * @type {string}
     * @memberof CustomerMembership
     */
    number_type_name?: string
    /**
     * remark
     * @type {string}
     * @memberof CustomerMembership
     */
    remark?: string
    /**
     * 
     * @type {MembershipStatusId}
     * @memberof CustomerMembership
     */
    status_id?: MembershipStatusId
}
/**
 * Customer Person
 * @export
 * @interface CustomerPerson
 */
export class CustomerPerson {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof CustomerPerson
     */
    birth_date?: string
    /**
     * customer_person_id
     * @type {string}
     * @memberof CustomerPerson
     */
    customer_person_id?: string
    /**
     * 
     * @type {GenderTypeId}
     * @memberof CustomerPerson
     */
    gender_type_id?: GenderTypeId
    /**
     * honorific_title_id
     * @type {string}
     * @memberof CustomerPerson
     */
    honorific_title_id?: string
    /**
     * honorific_title_name
     * @type {string}
     * @memberof CustomerPerson
     */
    honorific_title_name?: string
    /**
     * 
     * @type {AffixationId}
     * @memberof CustomerPerson
     */
    honorific_title_affixation_id?: AffixationId
    /**
     * is_no_smoking
     * @type {boolean}
     * @memberof CustomerPerson
     */
    is_no_smoking?: boolean
    /**
     * marital_status_id
     * @type {string}
     * @memberof CustomerPerson
     */
    marital_status_id?: string
    /**
     * marital_status_name
     * @type {string}
     * @memberof CustomerPerson
     */
    marital_status_name?: string
    /**
     * name_first
     * @type {string}
     * @memberof CustomerPerson
     */
    name_first?: string
    /**
     * name_last
     * @type {string}
     * @memberof CustomerPerson
     */
    name_last?: string
    /**
     * name_alias_first
     * @type {string}
     * @memberof CustomerPerson
     */
    name_alias_first?: string
    /**
     * name_alias_last
     * @type {string}
     * @memberof CustomerPerson
     */
    name_alias_last?: string
    /**
     * name_second_alias_first
     * @type {string}
     * @memberof CustomerPerson
     */
    name_second_alias_first?: string
    /**
     * name_second_alias_last
     * @type {string}
     * @memberof CustomerPerson
     */
    name_second_alias_last?: string
    /**
     * name_second_first
     * @type {string}
     * @memberof CustomerPerson
     */
    name_second_first?: string
    /**
     * name_second_last
     * @type {string}
     * @memberof CustomerPerson
     */
    name_second_last?: string
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerPerson
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerPerson
     */
    change_info?: EditInfo
}
/**
 * CustomerPersonRelation
 * @export
 * @interface CustomerPersonRelation
 */
export class CustomerPersonRelation {
    /**
     * 
     * @type {CustomerAddress}
     * @memberof CustomerPersonRelation
     */
    address?: CustomerAddress
    /**
     * customer_person_relation_id
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    customer_person_relation_id?: string
    /**
     * job_family_id
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    job_family_id?: string
    /**
     * job_family_name
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    job_family_name?: string
    /**
     * name
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    name_alias?: string
    /**
     * office_name
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    office_name?: string
    /**
     * 
     * @type {CustomerPerson}
     * @memberof CustomerPersonRelation
     */
    person?: CustomerPerson
    /**
     * person_customer_id
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    person_customer_id?: string
    /**
     * relation_type_group_id
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    relation_type_group_id?: string
    /**
     * relation_type_group_name
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    relation_type_group_name?: string
    /**
     * relation_type_id
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    relation_type_id?: string
    /**
     * relation_type_name
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    relation_type_name?: string
    /**
     * remark
     * @type {string}
     * @memberof CustomerPersonRelation
     */
    remark?: string
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerPersonRelation
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof CustomerPersonRelation
     */
    change_info?: EditInfo
}
/**
 * 
 * @export
 * @interface CustomerStatic
 */
export class CustomerStatic {
    /**
     * customer_id
     * @type {string}
     * @memberof CustomerStatic
     */
    customer_id?: string
}
/**
 * 
 * @export
 * @interface DeleteCustomerAccountResponse
 */
export class DeleteCustomerAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteCustomerAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteCustomerAccountResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeleteCustomerResponse
 */
export class DeleteCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteCustomerResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface EditInfo
 */
export class EditInfo {
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    host_name?: string
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    time_stamp?: string
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    user_account_id?: string
}
/**
 * 
 * @export
 * @interface Editable
 */
export class Editable {
    /**
     * 
     * @type {EditInfo}
     * @memberof Editable
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Editable
     */
    change_info?: EditInfo
}
/**
 * 性別(Gender Type)
 * @export
 * @enum {string}
 */

export const GenderTypeId = {
    Male: 'Male',
    Female: 'Female',
    Other: 'Other'
} as const;

export type GenderTypeId = typeof GenderTypeId[keyof typeof GenderTypeId];


/**
 * 
 * @export
 * @interface GetCorporateCustomerResponse
 */
export class GetCorporateCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetCorporateCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetCorporateCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof GetCorporateCustomerResponse
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface GetCustomerAccountMessageResponse
 */
export class GetCustomerAccountMessageResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetCustomerAccountMessageResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetCustomerAccountMessageResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccountMessage}
     * @memberof GetCustomerAccountMessageResponse
     */
    customer_message?: CustomerAccountMessage
}
/**
 * 
 * @export
 * @interface GetCustomerAccountResponse
 */
export class GetCustomerAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetCustomerAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetCustomerAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccount}
     * @memberof GetCustomerAccountResponse
     */
    customer_account?: CustomerAccount
}
/**
 * 
 * @export
 * @interface GetIndividualCustomerResponse
 */
export class GetIndividualCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetIndividualCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetIndividualCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof GetIndividualCustomerResponse
     */
    customer?: IndividualCustomer
}
/**
 * Individual Customer
 * @export
 * @interface IndividualCustomer
 */
export class IndividualCustomer {
    /**
     * 
     * @type {EditInfo}
     * @memberof IndividualCustomer
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof IndividualCustomer
     */
    change_info?: EditInfo
    /**
     * customer_id
     * @type {string}
     * @memberof IndividualCustomer
     */
    customer_id?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof IndividualCustomer
     */
    ar_closing_date?: string
    /**
     * 
     * @type {Array<CustomerAttribute>}
     * @memberof IndividualCustomer
     */
    attributes?: Array<CustomerAttribute>
    /**
     * bill_address_id
     * @type {string}
     * @memberof IndividualCustomer
     */
    bill_address_id?: string
    /**
     * bill_address_name
     * @type {string}
     * @memberof IndividualCustomer
     */
    bill_address_name?: string
    /**
     * 
     * @type {CustomerClassId}
     * @memberof IndividualCustomer
     */
    customer_class_id?: CustomerClassId
    /**
     * division_id
     * @type {string}
     * @memberof IndividualCustomer
     */
    division_id?: string
    /**
     * division_name
     * @type {string}
     * @memberof IndividualCustomer
     */
    division_name?: string
    /**
     * 
     * @type {Array<CustomerHotelDivision>}
     * @memberof IndividualCustomer
     */
    divisions?: Array<CustomerHotelDivision>
    /**
     * 
     * @type {CustomerDmDeliveryOptionId}
     * @memberof IndividualCustomer
     */
    dm_delivery_option_id?: CustomerDmDeliveryOptionId
    /**
     * メールアドレス(EMail)
     * @type {string}
     * @memberof IndividualCustomer
     */
    email_main?: string
    /**
     * 
     * @type {Array<CustomerEmail>}
     * @memberof IndividualCustomer
     */
    emails?: Array<CustomerEmail>
    /**
     * 
     * @type {Array<CustomerGiftPlan>}
     * @memberof IndividualCustomer
     */
    gift_plans?: Array<CustomerGiftPlan>
    /**
     * 
     * @type {Array<CustomerMembership>}
     * @memberof IndividualCustomer
     */
    memberships?: Array<CustomerMembership>
    /**
     * name
     * @type {string}
     * @memberof IndividualCustomer
     */
    name?: string
    /**
     * name_alias
     * @type {string}
     * @memberof IndividualCustomer
     */
    name_alias?: string
    /**
     * name_second
     * @type {string}
     * @memberof IndividualCustomer
     */
    name_second?: string
    /**
     * name_second_alias
     * @type {string}
     * @memberof IndividualCustomer
     */
    name_second_alias?: string
    /**
     * 
     * @type {Array<CustomerPersonRelation>}
     * @memberof IndividualCustomer
     */
    person_relations?: Array<CustomerPersonRelation>
    /**
     * remark
     * @type {string}
     * @memberof IndividualCustomer
     */
    remark?: string
    /**
     * 
     * @type {Array<CustomerAddress>}
     * @memberof IndividualCustomer
     */
    addresses?: Array<CustomerAddress>
    /**
     * 
     * @type {IndividualCustomerAnniversary}
     * @memberof IndividualCustomer
     */
    anniversaries?: IndividualCustomerAnniversary
    /**
     * birth_place_name
     * @type {string}
     * @memberof IndividualCustomer
     */
    birth_place_name?: string
    /**
     * 
     * @type {Array<CustomerCar>}
     * @memberof IndividualCustomer
     */
    cars?: Array<CustomerCar>
    /**
     * 
     * @type {CustomerCorporation}
     * @memberof IndividualCustomer
     */
    corporation?: CustomerCorporation
    /**
     * 
     * @type {Array<IndividualCustomerCorporationAttribute>}
     * @memberof IndividualCustomer
     */
    corporation_attributes?: Array<IndividualCustomerCorporationAttribute>
    /**
     * 
     * @type {CustomerCorporationAddress}
     * @memberof IndividualCustomer
     */
    office_address?: CustomerCorporationAddress
    /**
     * 
     * @type {Array<IndividualCustomerOrganization>}
     * @memberof IndividualCustomer
     */
    organizations?: Array<IndividualCustomerOrganization>
    /**
     * 
     * @type {Passport}
     * @memberof IndividualCustomer
     */
    passport?: Passport
    /**
     * 
     * @type {CustomerPerson}
     * @memberof IndividualCustomer
     */
    person?: CustomerPerson
    /**
     * 
     * @type {ResidenceTypeId}
     * @memberof IndividualCustomer
     */
    residence_type_id?: ResidenceTypeId
    /**
     * 
     * @type {Url}
     * @memberof IndividualCustomer
     */
    url?: Url
}
/**
 * 
 * @export
 * @interface IndividualCustomerAllOf
 */
export class IndividualCustomerAllOf {
    /**
     * 
     * @type {Array<CustomerAddress>}
     * @memberof IndividualCustomerAllOf
     */
    addresses?: Array<CustomerAddress>
    /**
     * 
     * @type {IndividualCustomerAnniversary}
     * @memberof IndividualCustomerAllOf
     */
    anniversaries?: IndividualCustomerAnniversary
    /**
     * birth_place_name
     * @type {string}
     * @memberof IndividualCustomerAllOf
     */
    birth_place_name?: string
    /**
     * 
     * @type {Array<CustomerCar>}
     * @memberof IndividualCustomerAllOf
     */
    cars?: Array<CustomerCar>
    /**
     * 
     * @type {CustomerCorporation}
     * @memberof IndividualCustomerAllOf
     */
    corporation?: CustomerCorporation
    /**
     * 
     * @type {Array<IndividualCustomerCorporationAttribute>}
     * @memberof IndividualCustomerAllOf
     */
    corporation_attributes?: Array<IndividualCustomerCorporationAttribute>
    /**
     * 
     * @type {CustomerCorporationAddress}
     * @memberof IndividualCustomerAllOf
     */
    office_address?: CustomerCorporationAddress
    /**
     * 
     * @type {Array<IndividualCustomerOrganization>}
     * @memberof IndividualCustomerAllOf
     */
    organizations?: Array<IndividualCustomerOrganization>
    /**
     * 
     * @type {Passport}
     * @memberof IndividualCustomerAllOf
     */
    passport?: Passport
    /**
     * 
     * @type {CustomerPerson}
     * @memberof IndividualCustomerAllOf
     */
    person?: CustomerPerson
    /**
     * 
     * @type {ResidenceTypeId}
     * @memberof IndividualCustomerAllOf
     */
    residence_type_id?: ResidenceTypeId
    /**
     * 
     * @type {Url}
     * @memberof IndividualCustomerAllOf
     */
    url?: Url
}
/**
 * Individua Customer Anniversary
 * @export
 * @interface IndividualCustomerAnniversary
 */
export class IndividualCustomerAnniversary {
    /**
     * engagement_hotel_id
     * @type {string}
     * @memberof IndividualCustomerAnniversary
     */
    engagement_hotel_id?: string
    /**
     * engagement_hotel_name
     * @type {string}
     * @memberof IndividualCustomerAnniversary
     */
    engagement_hotel_name?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof IndividualCustomerAnniversary
     */
    wedding_date?: string
    /**
     * wedding_hotel_id
     * @type {string}
     * @memberof IndividualCustomerAnniversary
     */
    wedding_hotel_id?: string
    /**
     * wedding_hotel_name
     * @type {string}
     * @memberof IndividualCustomerAnniversary
     */
    wedding_hotel_name?: string
}
/**
 * Individual Customer Corporation Attribute
 * @export
 * @interface IndividualCustomerCorporationAttribute
 */
export class IndividualCustomerCorporationAttribute {
    /**
     * 
     * @type {boolean}
     * @memberof IndividualCustomerCorporationAttribute
     */
    boolean_value?: boolean
    /**
     * 
     * @type {number}
     * @memberof IndividualCustomerCorporationAttribute
     */
    index?: number
    /**
     * 
     * @type {CustomerAttributeInputMethodId}
     * @memberof IndividualCustomerCorporationAttribute
     */
    input_method_id?: CustomerAttributeInputMethodId
    /**
     * item_id
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_id?: string
    /**
     * item_name
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_name?: string
    /**
     * item_name_alias
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_name_alias?: string
    /**
     * item_name_short
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_name_short?: string
    /**
     * item_sequence
     * @type {number}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_sequence?: number
    /**
     * item_is_active
     * @type {boolean}
     * @memberof IndividualCustomerCorporationAttribute
     */
    item_is_active?: boolean
    /**
     * number_double
     * @type {number}
     * @memberof IndividualCustomerCorporationAttribute
     */
    number_double?: number
    /**
     * number_integer
     * @type {number}
     * @memberof IndividualCustomerCorporationAttribute
     */
    number_integer?: number
    /**
     * parent_item_id
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    parent_item_id?: string
    /**
     * parent_item_name
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    parent_item_name?: string
    /**
     * parent_item_type_id
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    parent_item_type_id?: string
    /**
     * text
     * @type {string}
     * @memberof IndividualCustomerCorporationAttribute
     */
    text?: string
    /**
     * 
     * @type {CustomerAttributeTypeId}
     * @memberof IndividualCustomerCorporationAttribute
     */
    type_id?: CustomerAttributeTypeId
}
/**
 * Individual Customer Organization
 * @export
 * @interface IndividualCustomerOrganization
 */
export class IndividualCustomerOrganization {
    /**
     * name
     * @type {string}
     * @memberof IndividualCustomerOrganization
     */
    name?: string
    /**
     * title_name
     * @type {string}
     * @memberof IndividualCustomerOrganization
     */
    title_name?: string
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export class InlineResponse400 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse400
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse400
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof InlineResponse400
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export class InlineResponse401 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse401
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse401
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse401
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export class InlineResponse404 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse404
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse404
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse404
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export class InlineResponse500 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse500
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse500
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse500
     */
    errors?: ApiError
}
/**
 * InvalidParameter
 * @export
 * @interface InvalidParameter
 */
export class InvalidParameter {
    /**
     * parameter name
     * @type {string}
     * @memberof InvalidParameter
     */
    parameter?: string
    /**
     * error detail
     * @type {string}
     * @memberof InvalidParameter
     */
    detail?: string
    /**
     * error code
     * @type {string}
     * @memberof InvalidParameter
     */
    code?: string
    /**
     * parameter value
     * @type {string}
     * @memberof InvalidParameter
     */
    value?: string
    /**
     * error message
     * @type {string}
     * @memberof InvalidParameter
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ListCustomerAccountMessagesResponse
 */
export class ListCustomerAccountMessagesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListCustomerAccountMessagesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListCustomerAccountMessagesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListCustomerAccountMessagesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<CustomerAccountMessage>}
     * @memberof ListCustomerAccountMessagesResponse
     */
    customer_messages?: Array<CustomerAccountMessage>
}
/**
 * 
 * @export
 * @interface ListCustomerAccountMessagesResponseAllOf
 */
export class ListCustomerAccountMessagesResponseAllOf {
    /**
     * 
     * @type {Array<CustomerAccountMessage>}
     * @memberof ListCustomerAccountMessagesResponseAllOf
     */
    customer_messages?: Array<CustomerAccountMessage>
}
/**
 * 
 * @export
 * @interface ListCustomersResponse
 */
export class ListCustomersResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListCustomersResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListCustomersResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListCustomersResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<CustomerListItem>}
     * @memberof ListCustomersResponse
     */
    customers?: Array<CustomerListItem>
}
/**
 * returns a list of customer
 * @export
 * @interface ListCustomersResponseAllOf
 */
export class ListCustomersResponseAllOf {
    /**
     * 
     * @type {Array<CustomerListItem>}
     * @memberof ListCustomersResponseAllOf
     */
    customers?: Array<CustomerListItem>
}
/**
 * 
 * @export
 * @interface Login
 */
export class Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    expires_in?: string
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    id_token?: string
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    refresh_token?: string
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    token_type?: string
}
/**
 * MembershipStatusId
 * @export
 * @enum {string}
 */

export const MembershipStatusId = {
    Cancelled: 'Cancelled',
    Recess: 'Recess',
    Valid: 'Valid'
} as const;

export type MembershipStatusId = typeof MembershipStatusId[keyof typeof MembershipStatusId];


/**
 * Passport
 * @export
 * @interface Passport
 */
export class Passport {
    /**
     * number
     * @type {string}
     * @memberof Passport
     */
    number?: string
}
/**
 * PhoneNumber
 * @export
 * @interface PhoneNumber1
 */
export class PhoneNumber1 {
    /**
     * number
     * @type {string}
     * @memberof PhoneNumber1
     */
    phone_no?: string
}
/**
 * ResidenceTypeId
 * @export
 * @enum {string}
 */

export const ResidenceTypeId = {
    DomesticResidence: 'DomesticResidence',
    ForeignNonResidence: 'ForeignNonResidence',
    DomesticNonResidence: 'DomesticNonResidence',
    ForeignResidence: 'ForeignResidence'
} as const;

export type ResidenceTypeId = typeof ResidenceTypeId[keyof typeof ResidenceTypeId];


/**
 * UpdatePolicyRequest
 * @export
 * @interface UpdateCorporateCustomerRequest
 */
export class UpdateCorporateCustomerRequest {
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof UpdateCorporateCustomerRequest
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface UpdateCorporateCustomerResponse
 */
export class UpdateCorporateCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateCorporateCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateCorporateCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {CorporateCustomer}
     * @memberof UpdateCorporateCustomerResponse
     */
    customer?: CorporateCustomer
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountPasswordRequest
 */
export class UpdateCustomerAccountPasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdateCustomerAccountPasswordRequest
     */
    current?: string
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof UpdateCustomerAccountPasswordRequest
     */
    new?: string
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountPasswordResponse
 */
export class UpdateCustomerAccountPasswordResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateCustomerAccountPasswordResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateCustomerAccountPasswordResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountPhoneNoAsMFARequest
 */
export class UpdateCustomerAccountPhoneNoAsMFARequest {
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof UpdateCustomerAccountPhoneNoAsMFARequest
     */
    phone_no?: string
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountPhoneNoAsMFAResponse
 */
export class UpdateCustomerAccountPhoneNoAsMFAResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateCustomerAccountPhoneNoAsMFAResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateCustomerAccountPhoneNoAsMFAResponse
     */
    request_id?: string
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof UpdateCustomerAccountPhoneNoAsMFAResponse
     */
    phone_no?: string
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountPhoneNoAsMFAResponseAllOf
 */
export class UpdateCustomerAccountPhoneNoAsMFAResponseAllOf {
    /**
     * 電話番号(PhoneNumber)
     * @type {string}
     * @memberof UpdateCustomerAccountPhoneNoAsMFAResponseAllOf
     */
    phone_no?: string
}
/**
 * UpdatePolicyRequest
 * @export
 * @interface UpdateCustomerAccountRequest
 */
export class UpdateCustomerAccountRequest {
    /**
     * 
     * @type {CustomerAccountDynamic}
     * @memberof UpdateCustomerAccountRequest
     */
    customer_account?: CustomerAccountDynamic
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountRequestAllOf
 */
export class UpdateCustomerAccountRequestAllOf {
    /**
     * 
     * @type {CustomerAccountDynamic}
     * @memberof UpdateCustomerAccountRequestAllOf
     */
    customer_account?: CustomerAccountDynamic
}
/**
 * 
 * @export
 * @interface UpdateCustomerAccountResponse
 */
export class UpdateCustomerAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateCustomerAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateCustomerAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {CustomerAccount}
     * @memberof UpdateCustomerAccountResponse
     */
    customer_account?: CustomerAccount
}
/**
 * UpdatePolicyRequest
 * @export
 * @interface UpdateIndividualCustomerRequest
 */
export class UpdateIndividualCustomerRequest {
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof UpdateIndividualCustomerRequest
     */
    customer?: IndividualCustomer
}
/**
 * 
 * @export
 * @interface UpdateIndividualCustomerResponse
 */
export class UpdateIndividualCustomerResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateIndividualCustomerResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateIndividualCustomerResponse
     */
    request_id?: string
    /**
     * 
     * @type {IndividualCustomer}
     * @memberof UpdateIndividualCustomerResponse
     */
    customer?: IndividualCustomer
}
/**
 * 
 * @export
 * @interface UpdatePasswordRequest
 */
export class UpdatePasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    current?: string
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    new?: string
}
/**
 * 
 * @export
 * @interface UpdatePasswordRequestAllOf
 */
export class UpdatePasswordRequestAllOf {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof UpdatePasswordRequestAllOf
     */
    current?: string
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof UpdatePasswordRequestAllOf
     */
    new?: string
}
/**
 * 
 * @export
 * @interface UpdatePasswordsResponse
 */
export class UpdatePasswordsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdatePasswordsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdatePasswordsResponse
     */
    request_id?: string
}
/**
 * Url
 * @export
 * @interface Url
 */
export class Url {
    /**
     * url
     * @type {string}
     * @memberof Url
     */
    url?: string
}

/**
 * CustomerAccountLoginApi - axios parameter creator
 * @export
 */
export const CustomerAccountLoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Customer Account Login
         * @param {string} accountId 
         * @param {CreateCustomerAccountLoginRequest} [createCustomerAccountLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccountLogin: async (accountId: string, createCustomerAccountLoginRequest?: CreateCustomerAccountLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createCustomerAccountLogin', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/customer-account-login`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerAccountLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAccountLoginApi - functional programming interface
 * @export
 */
export const CustomerAccountLoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAccountLoginApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Customer Account Login
         * @param {string} accountId 
         * @param {CreateCustomerAccountLoginRequest} [createCustomerAccountLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerAccountLogin(accountId: string, createCustomerAccountLoginRequest?: CreateCustomerAccountLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerAccountLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerAccountLogin(accountId, createCustomerAccountLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerAccountLoginApi - factory interface
 * @export
 */
export const CustomerAccountLoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAccountLoginApiFp(configuration)
    return {
        /**
         * Create Customer Account Login
         * @param {string} accountId 
         * @param {CreateCustomerAccountLoginRequest} [createCustomerAccountLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccountLogin(accountId: string, createCustomerAccountLoginRequest?: CreateCustomerAccountLoginRequest, options?: any): AxiosPromise<CreateCustomerAccountLoginResponse> {
            return localVarFp.createCustomerAccountLogin(accountId, createCustomerAccountLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCustomerAccountLogin operation in CustomerAccountLoginApi.
 * @export
 * @interface CustomerAccountLoginApiCreateCustomerAccountLoginRequest
 */
export class CustomerAccountLoginApiCreateCustomerAccountLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountLoginApiCreateCustomerAccountLogin
     */
    accountId: string

    /**
     * 
     * @type {CreateCustomerAccountLoginRequest}
     * @memberof CustomerAccountLoginApiCreateCustomerAccountLogin
     */
    createCustomerAccountLoginRequest?: CreateCustomerAccountLoginRequest
}

/**
 * CustomerAccountLoginApi - object-oriented interface
 * @export
 * @class CustomerAccountLoginApi
 * @extends {BaseAPI}
 */
export class CustomerAccountLoginApi extends BaseAPI {
    /**
     * Create Customer Account Login
     * @param {CustomerAccountLoginApiCreateCustomerAccountLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountLoginApi
     */
    public createCustomerAccountLogin(requestParameters: CustomerAccountLoginApiCreateCustomerAccountLoginRequest, options?: AxiosRequestConfig) {
        return CustomerAccountLoginApiFp(this.configuration).createCustomerAccountLogin(requestParameters.accountId, requestParameters.createCustomerAccountLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerAccountMessagesApi - axios parameter creator
 * @export
 */
export const CustomerAccountMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {CreateCustomerAccountMessageRequest} [createCustomerAccountMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccountMessage: async (accountId: string, customerAccountId: string, createCustomerAccountMessageRequest?: CreateCustomerAccountMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createCustomerAccountMessage', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('createCustomerAccountMessage', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/messages`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerAccountMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} customerAccountMessageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccountMessage: async (accountId: string, customerAccountId: string, customerAccountMessageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCustomerAccountMessage', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('getCustomerAccountMessage', 'customerAccountId', customerAccountId)
            // verify required parameter 'customerAccountMessageId' is not null or undefined
            assertParamExists('getCustomerAccountMessage', 'customerAccountMessageId', customerAccountMessageId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/messages/{customer_account_message_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)))
                .replace(`{${"customer_account_message_id"}}`, encodeURIComponent(String(customerAccountMessageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Customer Messages
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerAccountMessages: async (accountId: string, customerAccountId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listCustomerAccountMessages', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('listCustomerAccountMessages', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/messages`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAccountMessagesApi - functional programming interface
 * @export
 */
export const CustomerAccountMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAccountMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {CreateCustomerAccountMessageRequest} [createCustomerAccountMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerAccountMessage(accountId: string, customerAccountId: string, createCustomerAccountMessageRequest?: CreateCustomerAccountMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerAccountMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerAccountMessage(accountId, customerAccountId, createCustomerAccountMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} customerAccountMessageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAccountMessage(accountId: string, customerAccountId: string, customerAccountMessageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerAccountMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerAccountMessage(accountId, customerAccountId, customerAccountMessageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Customer Messages
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerAccountMessages(accountId: string, customerAccountId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerAccountMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerAccountMessages(accountId, customerAccountId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerAccountMessagesApi - factory interface
 * @export
 */
export const CustomerAccountMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAccountMessagesApiFp(configuration)
    return {
        /**
         * Create Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {CreateCustomerAccountMessageRequest} [createCustomerAccountMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccountMessage(accountId: string, customerAccountId: string, createCustomerAccountMessageRequest?: CreateCustomerAccountMessageRequest, options?: any): AxiosPromise<CreateCustomerAccountMessageResponse> {
            return localVarFp.createCustomerAccountMessage(accountId, customerAccountId, createCustomerAccountMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Customer Account Message
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} customerAccountMessageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccountMessage(accountId: string, customerAccountId: string, customerAccountMessageId: string, options?: any): AxiosPromise<GetCustomerAccountMessageResponse> {
            return localVarFp.getCustomerAccountMessage(accountId, customerAccountId, customerAccountMessageId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Customer Messages
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerAccountMessages(accountId: string, customerAccountId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListCustomerAccountMessagesResponse> {
            return localVarFp.listCustomerAccountMessages(accountId, customerAccountId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCustomerAccountMessage operation in CustomerAccountMessagesApi.
 * @export
 * @interface CustomerAccountMessagesApiCreateCustomerAccountMessageRequest
 */
export class CustomerAccountMessagesApiCreateCustomerAccountMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiCreateCustomerAccountMessage
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiCreateCustomerAccountMessage
     */
    customerAccountId: string

    /**
     * 
     * @type {CreateCustomerAccountMessageRequest}
     * @memberof CustomerAccountMessagesApiCreateCustomerAccountMessage
     */
    createCustomerAccountMessageRequest?: CreateCustomerAccountMessageRequest
}

/**
 * Request parameters for getCustomerAccountMessage operation in CustomerAccountMessagesApi.
 * @export
 * @interface CustomerAccountMessagesApiGetCustomerAccountMessageRequest
 */
export class CustomerAccountMessagesApiGetCustomerAccountMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiGetCustomerAccountMessage
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiGetCustomerAccountMessage
     */
    customerAccountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiGetCustomerAccountMessage
     */
    customerAccountMessageId: string
}

/**
 * Request parameters for listCustomerAccountMessages operation in CustomerAccountMessagesApi.
 * @export
 * @interface CustomerAccountMessagesApiListCustomerAccountMessagesRequest
 */
export class CustomerAccountMessagesApiListCustomerAccountMessagesRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiListCustomerAccountMessages
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountMessagesApiListCustomerAccountMessages
     */
    customerAccountId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof CustomerAccountMessagesApiListCustomerAccountMessages
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof CustomerAccountMessagesApiListCustomerAccountMessages
     */
    limit?: number
}

/**
 * CustomerAccountMessagesApi - object-oriented interface
 * @export
 * @class CustomerAccountMessagesApi
 * @extends {BaseAPI}
 */
export class CustomerAccountMessagesApi extends BaseAPI {
    /**
     * Create Customer Account Message
     * @param {CustomerAccountMessagesApiCreateCustomerAccountMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountMessagesApi
     */
    public createCustomerAccountMessage(requestParameters: CustomerAccountMessagesApiCreateCustomerAccountMessageRequest, options?: AxiosRequestConfig) {
        return CustomerAccountMessagesApiFp(this.configuration).createCustomerAccountMessage(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.createCustomerAccountMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Customer Account Message
     * @param {CustomerAccountMessagesApiGetCustomerAccountMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountMessagesApi
     */
    public getCustomerAccountMessage(requestParameters: CustomerAccountMessagesApiGetCustomerAccountMessageRequest, options?: AxiosRequestConfig) {
        return CustomerAccountMessagesApiFp(this.configuration).getCustomerAccountMessage(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.customerAccountMessageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Customer Messages
     * @param {CustomerAccountMessagesApiListCustomerAccountMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountMessagesApi
     */
    public listCustomerAccountMessages(requestParameters: CustomerAccountMessagesApiListCustomerAccountMessagesRequest, options?: AxiosRequestConfig) {
        return CustomerAccountMessagesApiFp(this.configuration).listCustomerAccountMessages(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerAccountsApi - axios parameter creator
 * @export
 */
export const CustomerAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新規顧客アカウントの作成
         * @summary 新規顧客アカウントの作成
         * @param {string} accountId 
         * @param {CreateCustomerAccountRequest} [createCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccount: async (accountId: string, createCustomerAccountRequest?: CreateCustomerAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createCustomerAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントの削除
         * @summary 顧客アカウントの削除
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAccount: async (accountId: string, customerAccountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteCustomerAccount', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('deleteCustomerAccount', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントの取得
         * @summary 顧客アカウントの取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccount: async (accountId: string, customerAccountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCustomerAccount', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('getCustomerAccount', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントの更新
         * @summary 顧客アカウントの更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountRequest} [updateCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccount: async (accountId: string, customerAccountId: string, updateCustomerAccountRequest?: UpdateCustomerAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateCustomerAccount', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('updateCustomerAccount', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントのパスワード更新
         * @summary 顧客アカウントのパスワード更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPasswordRequest} [updateCustomerAccountPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccountPassword: async (accountId: string, customerAccountId: string, updateCustomerAccountPasswordRequest?: UpdateCustomerAccountPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateCustomerAccountPassword', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('updateCustomerAccountPassword', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/password`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerAccountPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントの多段階認証用の電話番号更新
         * @summary 顧客アカウントの多段階認証用の電話番号更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPhoneNoAsMFARequest} [updateCustomerAccountPhoneNoAsMFARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccountPhoneNoAsMFA: async (accountId: string, customerAccountId: string, updateCustomerAccountPhoneNoAsMFARequest?: UpdateCustomerAccountPhoneNoAsMFARequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateCustomerAccountPhoneNoAsMFA', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('updateCustomerAccountPhoneNoAsMFA', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/phone-no-as-mfa`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerAccountPhoneNoAsMFARequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAccountsApi - functional programming interface
 * @export
 */
export const CustomerAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 新規顧客アカウントの作成
         * @summary 新規顧客アカウントの作成
         * @param {string} accountId 
         * @param {CreateCustomerAccountRequest} [createCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerAccount(accountId: string, createCustomerAccountRequest?: CreateCustomerAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerAccount(accountId, createCustomerAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントの削除
         * @summary 顧客アカウントの削除
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerAccount(accountId: string, customerAccountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerAccount(accountId, customerAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントの取得
         * @summary 顧客アカウントの取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAccount(accountId: string, customerAccountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerAccount(accountId, customerAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントの更新
         * @summary 顧客アカウントの更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountRequest} [updateCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerAccount(accountId: string, customerAccountId: string, updateCustomerAccountRequest?: UpdateCustomerAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomerAccount(accountId, customerAccountId, updateCustomerAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントのパスワード更新
         * @summary 顧客アカウントのパスワード更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPasswordRequest} [updateCustomerAccountPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerAccountPassword(accountId: string, customerAccountId: string, updateCustomerAccountPasswordRequest?: UpdateCustomerAccountPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerAccountPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomerAccountPassword(accountId, customerAccountId, updateCustomerAccountPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントの多段階認証用の電話番号更新
         * @summary 顧客アカウントの多段階認証用の電話番号更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPhoneNoAsMFARequest} [updateCustomerAccountPhoneNoAsMFARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerAccountPhoneNoAsMFA(accountId: string, customerAccountId: string, updateCustomerAccountPhoneNoAsMFARequest?: UpdateCustomerAccountPhoneNoAsMFARequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerAccountPhoneNoAsMFAResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomerAccountPhoneNoAsMFA(accountId, customerAccountId, updateCustomerAccountPhoneNoAsMFARequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerAccountsApi - factory interface
 * @export
 */
export const CustomerAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAccountsApiFp(configuration)
    return {
        /**
         * 新規顧客アカウントの作成
         * @summary 新規顧客アカウントの作成
         * @param {string} accountId 
         * @param {CreateCustomerAccountRequest} [createCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAccount(accountId: string, createCustomerAccountRequest?: CreateCustomerAccountRequest, options?: any): AxiosPromise<CreateCustomerAccountResponse> {
            return localVarFp.createCustomerAccount(accountId, createCustomerAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントの削除
         * @summary 顧客アカウントの削除
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAccount(accountId: string, customerAccountId: string, options?: any): AxiosPromise<DeleteCustomerAccountResponse> {
            return localVarFp.deleteCustomerAccount(accountId, customerAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントの取得
         * @summary 顧客アカウントの取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccount(accountId: string, customerAccountId: string, options?: any): AxiosPromise<GetCustomerAccountResponse> {
            return localVarFp.getCustomerAccount(accountId, customerAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントの更新
         * @summary 顧客アカウントの更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountRequest} [updateCustomerAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccount(accountId: string, customerAccountId: string, updateCustomerAccountRequest?: UpdateCustomerAccountRequest, options?: any): AxiosPromise<UpdateCustomerAccountResponse> {
            return localVarFp.updateCustomerAccount(accountId, customerAccountId, updateCustomerAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントのパスワード更新
         * @summary 顧客アカウントのパスワード更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPasswordRequest} [updateCustomerAccountPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccountPassword(accountId: string, customerAccountId: string, updateCustomerAccountPasswordRequest?: UpdateCustomerAccountPasswordRequest, options?: any): AxiosPromise<UpdateCustomerAccountPasswordResponse> {
            return localVarFp.updateCustomerAccountPassword(accountId, customerAccountId, updateCustomerAccountPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントの多段階認証用の電話番号更新
         * @summary 顧客アカウントの多段階認証用の電話番号更新
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {UpdateCustomerAccountPhoneNoAsMFARequest} [updateCustomerAccountPhoneNoAsMFARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAccountPhoneNoAsMFA(accountId: string, customerAccountId: string, updateCustomerAccountPhoneNoAsMFARequest?: UpdateCustomerAccountPhoneNoAsMFARequest, options?: any): AxiosPromise<UpdateCustomerAccountPhoneNoAsMFAResponse> {
            return localVarFp.updateCustomerAccountPhoneNoAsMFA(accountId, customerAccountId, updateCustomerAccountPhoneNoAsMFARequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCustomerAccount operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiCreateCustomerAccountRequest
 */
export class CustomerAccountsApiCreateCustomerAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiCreateCustomerAccount
     */
    accountId: string

    /**
     * 
     * @type {CreateCustomerAccountRequest}
     * @memberof CustomerAccountsApiCreateCustomerAccount
     */
    createCustomerAccountRequest?: CreateCustomerAccountRequest
}

/**
 * Request parameters for deleteCustomerAccount operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiDeleteCustomerAccountRequest
 */
export class CustomerAccountsApiDeleteCustomerAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiDeleteCustomerAccount
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiDeleteCustomerAccount
     */
    customerAccountId: string
}

/**
 * Request parameters for getCustomerAccount operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiGetCustomerAccountRequest
 */
export class CustomerAccountsApiGetCustomerAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiGetCustomerAccount
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiGetCustomerAccount
     */
    customerAccountId: string
}

/**
 * Request parameters for updateCustomerAccount operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiUpdateCustomerAccountRequest
 */
export class CustomerAccountsApiUpdateCustomerAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccount
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccount
     */
    customerAccountId: string

    /**
     * 
     * @type {UpdateCustomerAccountRequest}
     * @memberof CustomerAccountsApiUpdateCustomerAccount
     */
    updateCustomerAccountRequest?: UpdateCustomerAccountRequest
}

/**
 * Request parameters for updateCustomerAccountPassword operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiUpdateCustomerAccountPasswordRequest
 */
export class CustomerAccountsApiUpdateCustomerAccountPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPassword
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPassword
     */
    customerAccountId: string

    /**
     * 
     * @type {UpdateCustomerAccountPasswordRequest}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPassword
     */
    updateCustomerAccountPasswordRequest?: UpdateCustomerAccountPasswordRequest
}

/**
 * Request parameters for updateCustomerAccountPhoneNoAsMFA operation in CustomerAccountsApi.
 * @export
 * @interface CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFARequest
 */
export class CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFARequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFA
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFA
     */
    customerAccountId: string

    /**
     * 
     * @type {UpdateCustomerAccountPhoneNoAsMFARequest}
     * @memberof CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFA
     */
    updateCustomerAccountPhoneNoAsMFARequest?: UpdateCustomerAccountPhoneNoAsMFARequest
}

/**
 * CustomerAccountsApi - object-oriented interface
 * @export
 * @class CustomerAccountsApi
 * @extends {BaseAPI}
 */
export class CustomerAccountsApi extends BaseAPI {
    /**
     * 新規顧客アカウントの作成
     * @summary 新規顧客アカウントの作成
     * @param {CustomerAccountsApiCreateCustomerAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public createCustomerAccount(requestParameters: CustomerAccountsApiCreateCustomerAccountRequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).createCustomerAccount(requestParameters.accountId, requestParameters.createCustomerAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントの削除
     * @summary 顧客アカウントの削除
     * @param {CustomerAccountsApiDeleteCustomerAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public deleteCustomerAccount(requestParameters: CustomerAccountsApiDeleteCustomerAccountRequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).deleteCustomerAccount(requestParameters.accountId, requestParameters.customerAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントの取得
     * @summary 顧客アカウントの取得
     * @param {CustomerAccountsApiGetCustomerAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public getCustomerAccount(requestParameters: CustomerAccountsApiGetCustomerAccountRequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).getCustomerAccount(requestParameters.accountId, requestParameters.customerAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントの更新
     * @summary 顧客アカウントの更新
     * @param {CustomerAccountsApiUpdateCustomerAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public updateCustomerAccount(requestParameters: CustomerAccountsApiUpdateCustomerAccountRequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).updateCustomerAccount(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.updateCustomerAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントのパスワード更新
     * @summary 顧客アカウントのパスワード更新
     * @param {CustomerAccountsApiUpdateCustomerAccountPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public updateCustomerAccountPassword(requestParameters: CustomerAccountsApiUpdateCustomerAccountPasswordRequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).updateCustomerAccountPassword(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.updateCustomerAccountPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントの多段階認証用の電話番号更新
     * @summary 顧客アカウントの多段階認証用の電話番号更新
     * @param {CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountsApi
     */
    public updateCustomerAccountPhoneNoAsMFA(requestParameters: CustomerAccountsApiUpdateCustomerAccountPhoneNoAsMFARequest, options?: AxiosRequestConfig) {
        return CustomerAccountsApiFp(this.configuration).updateCustomerAccountPhoneNoAsMFA(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.updateCustomerAccountPhoneNoAsMFARequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Corporate Customer
         * @param {string} accountId 
         * @param {CreateCorporateCustomerRequest} [createCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCorporateCustomer: async (accountId: string, createCorporateCustomerRequest?: CreateCorporateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createCorporateCustomer', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/corporate-customers`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCorporateCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Individual Customer
         * @param {string} accountId 
         * @param {CreateIndividualCustomerRequest} [createIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualCustomer: async (accountId: string, createIndividualCustomerRequest?: CreateIndividualCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createIndividualCustomer', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/individual-customers`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIndividualCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (accountId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteCustomer', 'accountId', accountId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('deleteCustomer', 'customerId', customerId)
            const localVarPath = `/accounts/{account_id}/customers/{customer_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a corporate customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorporateCustomer: async (accountId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCorporateCustomer', 'accountId', accountId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCorporateCustomer', 'customerId', customerId)
            const localVarPath = `/accounts/{account_id}/corporate-customers/{customer_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a individual customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualCustomer: async (accountId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getIndividualCustomer', 'accountId', accountId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getIndividualCustomer', 'customerId', customerId)
            const localVarPath = `/accounts/{account_id}/individual-customers/{customer_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a list of customer
         * @param {string} accountId 
         * @param {'Corporation' | 'Individual'} customerClassId customer class
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [email] customer email
         * @param {Array<string>} [hotelIds] hotel id array
         * @param {string} [name] customer name
         * @param {string} [phoneNo] customer phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: async (accountId: string, customerClassId: 'Corporation' | 'Individual', cursor?: string, limit?: number, email?: string, hotelIds?: Array<string>, name?: string, phoneNo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listCustomers', 'accountId', accountId)
            // verify required parameter 'customerClassId' is not null or undefined
            assertParamExists('listCustomers', 'customerClassId', customerClassId)
            const localVarPath = `/accounts/{account_id}/customers`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (customerClassId !== undefined) {
                localVarQueryParameter['customer_class_id'] = customerClassId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (hotelIds) {
                localVarQueryParameter['hotel_ids'] = hotelIds;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (phoneNo !== undefined) {
                localVarQueryParameter['phone_no'] = phoneNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Corporate Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateCorporateCustomerRequest} [updateCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCorporateCustomer: async (accountId: string, customerId: string, updateCorporateCustomerRequest?: UpdateCorporateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateCorporateCustomer', 'accountId', accountId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('updateCorporateCustomer', 'customerId', customerId)
            const localVarPath = `/accounts/{account_id}/corporate-customers/{customer_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCorporateCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Individual Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateIndividualCustomerRequest} [updateIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualCustomer: async (accountId: string, customerId: string, updateIndividualCustomerRequest?: UpdateIndividualCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateIndividualCustomer', 'accountId', accountId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('updateIndividualCustomer', 'customerId', customerId)
            const localVarPath = `/accounts/{account_id}/individual-customers/{customer_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIndividualCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Corporate Customer
         * @param {string} accountId 
         * @param {CreateCorporateCustomerRequest} [createCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCorporateCustomer(accountId: string, createCorporateCustomerRequest?: CreateCorporateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCorporateCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCorporateCustomer(accountId, createCorporateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Individual Customer
         * @param {string} accountId 
         * @param {CreateIndividualCustomerRequest} [createIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndividualCustomer(accountId: string, createIndividualCustomerRequest?: CreateIndividualCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIndividualCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndividualCustomer(accountId, createIndividualCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(accountId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(accountId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a corporate customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCorporateCustomer(accountId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCorporateCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCorporateCustomer(accountId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a individual customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividualCustomer(accountId: string, customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIndividualCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividualCustomer(accountId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a list of customer
         * @param {string} accountId 
         * @param {'Corporation' | 'Individual'} customerClassId customer class
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [email] customer email
         * @param {Array<string>} [hotelIds] hotel id array
         * @param {string} [name] customer name
         * @param {string} [phoneNo] customer phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomers(accountId: string, customerClassId: 'Corporation' | 'Individual', cursor?: string, limit?: number, email?: string, hotelIds?: Array<string>, name?: string, phoneNo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomers(accountId, customerClassId, cursor, limit, email, hotelIds, name, phoneNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Corporate Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateCorporateCustomerRequest} [updateCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCorporateCustomer(accountId: string, customerId: string, updateCorporateCustomerRequest?: UpdateCorporateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCorporateCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCorporateCustomer(accountId, customerId, updateCorporateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Individual Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateIndividualCustomerRequest} [updateIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIndividualCustomer(accountId: string, customerId: string, updateIndividualCustomerRequest?: UpdateIndividualCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIndividualCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIndividualCustomer(accountId, customerId, updateIndividualCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * Create Corporate Customer
         * @param {string} accountId 
         * @param {CreateCorporateCustomerRequest} [createCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCorporateCustomer(accountId: string, createCorporateCustomerRequest?: CreateCorporateCustomerRequest, options?: any): AxiosPromise<CreateCorporateCustomerResponse> {
            return localVarFp.createCorporateCustomer(accountId, createCorporateCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Individual Customer
         * @param {string} accountId 
         * @param {CreateIndividualCustomerRequest} [createIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualCustomer(accountId: string, createIndividualCustomerRequest?: CreateIndividualCustomerRequest, options?: any): AxiosPromise<CreateIndividualCustomerResponse> {
            return localVarFp.createIndividualCustomer(accountId, createIndividualCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(accountId: string, customerId: string, options?: any): AxiosPromise<DeleteCustomerResponse> {
            return localVarFp.deleteCustomer(accountId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * get a corporate customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorporateCustomer(accountId: string, customerId: string, options?: any): AxiosPromise<GetCorporateCustomerResponse> {
            return localVarFp.getCorporateCustomer(accountId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * get a individual customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualCustomer(accountId: string, customerId: string, options?: any): AxiosPromise<GetIndividualCustomerResponse> {
            return localVarFp.getIndividualCustomer(accountId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * get a list of customer
         * @param {string} accountId 
         * @param {'Corporation' | 'Individual'} customerClassId customer class
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [email] customer email
         * @param {Array<string>} [hotelIds] hotel id array
         * @param {string} [name] customer name
         * @param {string} [phoneNo] customer phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(accountId: string, customerClassId: 'Corporation' | 'Individual', cursor?: string, limit?: number, email?: string, hotelIds?: Array<string>, name?: string, phoneNo?: string, options?: any): AxiosPromise<ListCustomersResponse> {
            return localVarFp.listCustomers(accountId, customerClassId, cursor, limit, email, hotelIds, name, phoneNo, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Corporate Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateCorporateCustomerRequest} [updateCorporateCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCorporateCustomer(accountId: string, customerId: string, updateCorporateCustomerRequest?: UpdateCorporateCustomerRequest, options?: any): AxiosPromise<UpdateCorporateCustomerResponse> {
            return localVarFp.updateCorporateCustomer(accountId, customerId, updateCorporateCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Individual Customer
         * @param {string} accountId 
         * @param {string} customerId 
         * @param {UpdateIndividualCustomerRequest} [updateIndividualCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualCustomer(accountId: string, customerId: string, updateIndividualCustomerRequest?: UpdateIndividualCustomerRequest, options?: any): AxiosPromise<UpdateIndividualCustomerResponse> {
            return localVarFp.updateIndividualCustomer(accountId, customerId, updateIndividualCustomerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCorporateCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiCreateCorporateCustomerRequest
 */
export class CustomersApiCreateCorporateCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiCreateCorporateCustomer
     */
    accountId: string

    /**
     * 
     * @type {CreateCorporateCustomerRequest}
     * @memberof CustomersApiCreateCorporateCustomer
     */
    createCorporateCustomerRequest?: CreateCorporateCustomerRequest
}

/**
 * Request parameters for createIndividualCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiCreateIndividualCustomerRequest
 */
export class CustomersApiCreateIndividualCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiCreateIndividualCustomer
     */
    accountId: string

    /**
     * 
     * @type {CreateIndividualCustomerRequest}
     * @memberof CustomersApiCreateIndividualCustomer
     */
    createIndividualCustomerRequest?: CreateIndividualCustomerRequest
}

/**
 * Request parameters for deleteCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiDeleteCustomerRequest
 */
export class CustomersApiDeleteCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiDeleteCustomer
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomersApiDeleteCustomer
     */
    customerId: string
}

/**
 * Request parameters for getCorporateCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiGetCorporateCustomerRequest
 */
export class CustomersApiGetCorporateCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiGetCorporateCustomer
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomersApiGetCorporateCustomer
     */
    customerId: string
}

/**
 * Request parameters for getIndividualCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiGetIndividualCustomerRequest
 */
export class CustomersApiGetIndividualCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiGetIndividualCustomer
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomersApiGetIndividualCustomer
     */
    customerId: string
}

/**
 * Request parameters for listCustomers operation in CustomersApi.
 * @export
 * @interface CustomersApiListCustomersRequest
 */
export class CustomersApiListCustomersRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiListCustomers
     */
    accountId: string

    /**
     * customer class
     * @type {'Corporation' | 'Individual'}
     * @memberof CustomersApiListCustomers
     */
    customerClassId: 'Corporation' | 'Individual'

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof CustomersApiListCustomers
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof CustomersApiListCustomers
     */
    limit?: number

    /**
     * customer email
     * @type {string}
     * @memberof CustomersApiListCustomers
     */
    email?: string

    /**
     * hotel id array
     * @type {Array<string>}
     * @memberof CustomersApiListCustomers
     */
    hotelIds?: Array<string>

    /**
     * customer name
     * @type {string}
     * @memberof CustomersApiListCustomers
     */
    name?: string

    /**
     * customer phone number
     * @type {string}
     * @memberof CustomersApiListCustomers
     */
    phoneNo?: string
}

/**
 * Request parameters for updateCorporateCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiUpdateCorporateCustomerRequest
 */
export class CustomersApiUpdateCorporateCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiUpdateCorporateCustomer
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomersApiUpdateCorporateCustomer
     */
    customerId: string

    /**
     * 
     * @type {UpdateCorporateCustomerRequest}
     * @memberof CustomersApiUpdateCorporateCustomer
     */
    updateCorporateCustomerRequest?: UpdateCorporateCustomerRequest
}

/**
 * Request parameters for updateIndividualCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiUpdateIndividualCustomerRequest
 */
export class CustomersApiUpdateIndividualCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomersApiUpdateIndividualCustomer
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof CustomersApiUpdateIndividualCustomer
     */
    customerId: string

    /**
     * 
     * @type {UpdateIndividualCustomerRequest}
     * @memberof CustomersApiUpdateIndividualCustomer
     */
    updateIndividualCustomerRequest?: UpdateIndividualCustomerRequest
}

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * Create Corporate Customer
     * @param {CustomersApiCreateCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public createCorporateCustomer(requestParameters: CustomersApiCreateCorporateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).createCorporateCustomer(requestParameters.accountId, requestParameters.createCorporateCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Individual Customer
     * @param {CustomersApiCreateIndividualCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public createIndividualCustomer(requestParameters: CustomersApiCreateIndividualCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).createIndividualCustomer(requestParameters.accountId, requestParameters.createIndividualCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Customer
     * @param {CustomersApiDeleteCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public deleteCustomer(requestParameters: CustomersApiDeleteCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).deleteCustomer(requestParameters.accountId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a corporate customer
     * @param {CustomersApiGetCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public getCorporateCustomer(requestParameters: CustomersApiGetCorporateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).getCorporateCustomer(requestParameters.accountId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a individual customer
     * @param {CustomersApiGetIndividualCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public getIndividualCustomer(requestParameters: CustomersApiGetIndividualCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).getIndividualCustomer(requestParameters.accountId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a list of customer
     * @param {CustomersApiListCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public listCustomers(requestParameters: CustomersApiListCustomersRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).listCustomers(requestParameters.accountId, requestParameters.customerClassId, requestParameters.cursor, requestParameters.limit, requestParameters.email, requestParameters.hotelIds, requestParameters.name, requestParameters.phoneNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Corporate Customer
     * @param {CustomersApiUpdateCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public updateCorporateCustomer(requestParameters: CustomersApiUpdateCorporateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).updateCorporateCustomer(requestParameters.accountId, requestParameters.customerId, requestParameters.updateCorporateCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Individual Customer
     * @param {CustomersApiUpdateIndividualCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public updateIndividualCustomer(requestParameters: CustomersApiUpdateIndividualCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).updateIndividualCustomer(requestParameters.accountId, requestParameters.customerId, requestParameters.updateIndividualCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



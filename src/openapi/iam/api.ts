/* tslint:disable */
/* eslint-disable */
/**
 * Tap Hub API - IAM API
 * API References
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject,setAuthorizationTokenToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export class Account {
    /**
     * 
     * @type {EditInfo}
     * @memberof Account
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Account
     */
    change_info?: EditInfo
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    account_id?: string
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name?: string
}
/**
 * 
 * @export
 * @interface AccountAllOf
 */
export class AccountAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    account_id?: string
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    name?: string
}
/**
 * Request
 * @export
 * @interface ApiCommonResponseRequest
 */
export class ApiCommonResponseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    version?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    body?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    url?: string
}
/**
 * 
 * @export
 * @interface ApiCreateRequest
 */
export class ApiCreateRequest {
}
/**
 * 
 * @export
 * @interface ApiCreateResponse
 */
export class ApiCreateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiCreateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiCreateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiDeleteResponse
 */
export class ApiDeleteResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiDeleteResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiDeleteResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiError
 */
export class ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    code?: string
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ApiErrorResponseBadRequest
 */
export class ApiErrorResponseBadRequest {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseBadRequest
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseBadRequest
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof ApiErrorResponseBadRequest
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface ApiErrorResponseInternalError
 */
export class ApiErrorResponseInternalError {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseInternalError
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseInternalError
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseInternalError
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseNotFound
 */
export class ApiErrorResponseNotFound {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseNotFound
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseNotFound
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseNotFound
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseUnauthorized
 */
export class ApiErrorResponseUnauthorized {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseUnauthorized
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseUnauthorized
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseUnauthorized
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiGetResponse
 */
export class ApiGetResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiGetResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiGetResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiListResponse
 */
export class ApiListResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiListResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiListResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiListResponseAllOf
 */
export class ApiListResponseAllOf {
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponseAllOf
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export class ApiResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiUpdateRequest
 */
export class ApiUpdateRequest {
}
/**
 * 
 * @export
 * @interface ApiUpdateResponse
 */
export class ApiUpdateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiUpdateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiUpdateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface CreateGroupRequest
 */
export class CreateGroupRequest {
    /**
     * 
     * @type {Group}
     * @memberof CreateGroupRequest
     */
    group?: Group
}
/**
 * 
 * @export
 * @interface CreateGroupResponse
 */
export class CreateGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {Group}
     * @memberof CreateGroupResponse
     */
    group?: Group
}
/**
 * 
 * @export
 * @interface CreateGroupResponseAllOf
 */
export class CreateGroupResponseAllOf {
    /**
     * 
     * @type {Group}
     * @memberof CreateGroupResponseAllOf
     */
    group?: Group
}
/**
 * CreatePolicyRequest
 * @export
 * @interface CreatePolicyRequest
 */
export class CreatePolicyRequest {
    /**
     * 
     * @type {Policy}
     * @memberof CreatePolicyRequest
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface CreatePolicyResponse
 */
export class CreatePolicyResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreatePolicyResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreatePolicyResponse
     */
    request_id?: string
    /**
     * 
     * @type {Policy}
     * @memberof CreatePolicyResponse
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface CreatePolicyResponseAllOf
 */
export class CreatePolicyResponseAllOf {
    /**
     * 
     * @type {Policy}
     * @memberof CreatePolicyResponseAllOf
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface CreateUserPermissionGroupRequest
 */
export class CreateUserPermissionGroupRequest {
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof CreateUserPermissionGroupRequest
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface CreateUserPermissionGroupResponse
 */
export class CreateUserPermissionGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateUserPermissionGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateUserPermissionGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof CreateUserPermissionGroupResponse
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface CreateUserPermissionGroupResponseAllOf
 */
export class CreateUserPermissionGroupResponseAllOf {
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof CreateUserPermissionGroupResponseAllOf
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export class CreateUserRequest {
    /**
     * 
     * @type {User}
     * @memberof CreateUserRequest
     */
    user?: User
}
/**
 * 
 * @export
 * @interface CreateUserResponse
 */
export class CreateUserResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateUserResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateUserResponse
     */
    request_id?: string
    /**
     * 
     * @type {User}
     * @memberof CreateUserResponse
     */
    user?: User
}
/**
 * 
 * @export
 * @interface CreateUserResponseAllOf
 */
export class CreateUserResponseAllOf {
    /**
     * 
     * @type {User}
     * @memberof CreateUserResponseAllOf
     */
    user?: User
}
/**
 * 
 * @export
 * @interface DeleteGroupResponse
 */
export class DeleteGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteGroupResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeletePolicyResponse
 */
export class DeletePolicyResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeletePolicyResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeletePolicyResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeleteUserPermissionGroupResponse
 */
export class DeleteUserPermissionGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteUserPermissionGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteUserPermissionGroupResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface DeleteUserResponse
 */
export class DeleteUserResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof DeleteUserResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof DeleteUserResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface EditInfo
 */
export class EditInfo {
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    host_name?: string
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    time_stamp?: string
    /**
     * 
     * @type {string}
     * @memberof EditInfo
     */
    user_account_id?: string
}
/**
 * 
 * @export
 * @interface Editable
 */
export class Editable {
    /**
     * 
     * @type {EditInfo}
     * @memberof Editable
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Editable
     */
    change_info?: EditInfo
}
/**
 * 
 * @export
 * @interface GetAccountResponse
 */
export class GetAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {Account}
     * @memberof GetAccountResponse
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface GetAccountResponseAllOf
 */
export class GetAccountResponseAllOf {
    /**
     * 
     * @type {Account}
     * @memberof GetAccountResponseAllOf
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface GetGroupResponse
 */
export class GetGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {Group}
     * @memberof GetGroupResponse
     */
    group?: Group
}
/**
 * 
 * @export
 * @interface GetPolicyResponse
 */
export class GetPolicyResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetPolicyResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetPolicyResponse
     */
    request_id?: string
    /**
     * 
     * @type {Policy}
     * @memberof GetPolicyResponse
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface GetUserPermissionGroupResponse
 */
export class GetUserPermissionGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetUserPermissionGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetUserPermissionGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof GetUserPermissionGroupResponse
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export class GetUserResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetUserResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetUserResponse
     */
    request_id?: string
    /**
     * 
     * @type {User}
     * @memberof GetUserResponse
     */
    user?: User
}
/**
 * 
 * @export
 * @interface Group
 */
export class Group {
    /**
     * 
     * @type {EditInfo}
     * @memberof Group
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Group
     */
    change_info?: EditInfo
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    account_id?: string
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    group_id?: string
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name?: string
    /**
     * 
     * @type {Array<GroupPolicy>}
     * @memberof Group
     */
    policy_ids?: Array<GroupPolicy>
}
/**
 * 
 * @export
 * @interface GroupAllOf
 */
export class GroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof GroupAllOf
     */
    account_id?: string
    /**
     * 
     * @type {string}
     * @memberof GroupAllOf
     */
    group_id?: string
    /**
     * 
     * @type {string}
     * @memberof GroupAllOf
     */
    name?: string
    /**
     * 
     * @type {Array<GroupPolicy>}
     * @memberof GroupAllOf
     */
    policy_ids?: Array<GroupPolicy>
}
/**
 * 
 * @export
 * @interface GroupPolicy
 */
export class GroupPolicy {
    /**
     * 
     * @type {string}
     * @memberof GroupPolicy
     */
    policy_id?: string
}
/**
 * 
 * @export
 * @interface GroupsGroupIdBody
 */
export class GroupsGroupIdBody {
    /**
     * 
     * @type {Group}
     * @memberof GroupsGroupIdBody
     */
    group?: Group
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export class InlineResponse200 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse200
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse200
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export class InlineResponse400 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse400
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse400
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof InlineResponse400
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export class InlineResponse401 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse401
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse401
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse401
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export class InlineResponse404 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse404
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse404
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse404
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export class InlineResponse500 {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof InlineResponse500
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof InlineResponse500
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof InlineResponse500
     */
    errors?: ApiError
}
/**
 * InvalidParameter
 * @export
 * @interface InvalidParameter
 */
export class InvalidParameter {
    /**
     * parameter name
     * @type {string}
     * @memberof InvalidParameter
     */
    parameter?: string
    /**
     * error detail
     * @type {string}
     * @memberof InvalidParameter
     */
    detail?: string
    /**
     * error code
     * @type {string}
     * @memberof InvalidParameter
     */
    code?: string
    /**
     * parameter value
     * @type {string}
     * @memberof InvalidParameter
     */
    value?: string
    /**
     * error message
     * @type {string}
     * @memberof InvalidParameter
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ListGroupsResponse
 */
export class ListGroupsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListGroupsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListGroupsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListGroupsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<Group>}
     * @memberof ListGroupsResponse
     */
    groups?: Array<Group>
}
/**
 * 
 * @export
 * @interface ListGroupsResponseAllOf
 */
export class ListGroupsResponseAllOf {
    /**
     * 
     * @type {Array<Group>}
     * @memberof ListGroupsResponseAllOf
     */
    groups?: Array<Group>
}
/**
 * ListPoliciesResponse
 * @export
 * @interface ListPoliciesResponse
 */
export class ListPoliciesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListPoliciesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListPoliciesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListPoliciesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<Policy>}
     * @memberof ListPoliciesResponse
     */
    policies?: Array<Policy>
}
/**
 * 
 * @export
 * @interface ListPoliciesResponseAllOf
 */
export class ListPoliciesResponseAllOf {
    /**
     * 
     * @type {Array<Policy>}
     * @memberof ListPoliciesResponseAllOf
     */
    policies?: Array<Policy>
}
/**
 * 
 * @export
 * @interface ListUserPermissionGroupsResponse
 */
export class ListUserPermissionGroupsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListUserPermissionGroupsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListUserPermissionGroupsResponse
     */
    request_id?: string
    /**
     * 
     * @type {Array<UserPermissionGroup>}
     * @memberof ListUserPermissionGroupsResponse
     */
    user_permission_groups?: Array<UserPermissionGroup>
}
/**
 * 
 * @export
 * @interface ListUserPermissionGroupsResponseAllOf
 */
export class ListUserPermissionGroupsResponseAllOf {
    /**
     * 
     * @type {Array<UserPermissionGroup>}
     * @memberof ListUserPermissionGroupsResponseAllOf
     */
    user_permission_groups?: Array<UserPermissionGroup>
}
/**
 * 
 * @export
 * @interface ListUsersResponse
 */
export class ListUsersResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListUsersResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListUsersResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListUsersResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    users?: Array<User>
}
/**
 * 
 * @export
 * @interface ListUsersResponseAllOf
 */
export class ListUsersResponseAllOf {
    /**
     * 
     * @type {Array<User>}
     * @memberof ListUsersResponseAllOf
     */
    users?: Array<User>
}
/**
 * Policy
 * @export
 * @interface Policy
 */
export class Policy {
    /**
     * 
     * @type {EditInfo}
     * @memberof Policy
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof Policy
     */
    change_info?: EditInfo
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    policy_id?: string
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    name?: string
}
/**
 * 
 * @export
 * @interface PolicyAllOf
 */
export class PolicyAllOf {
    /**
     * 
     * @type {string}
     * @memberof PolicyAllOf
     */
    policy_id?: string
    /**
     * 
     * @type {string}
     * @memberof PolicyAllOf
     */
    name?: string
}
/**
 * 
 * @export
 * @interface UpdateAccountRequest
 */
export class UpdateAccountRequest {
    /**
     * 
     * @type {Account}
     * @memberof UpdateAccountRequest
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface UpdateAccountResponse
 */
export class UpdateAccountResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateAccountResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateAccountResponse
     */
    request_id?: string
    /**
     * 
     * @type {Account}
     * @memberof UpdateAccountResponse
     */
    account?: Account
}
/**
 * 
 * @export
 * @interface UpdateGroupRequest
 */
export class UpdateGroupRequest {
    /**
     * 
     * @type {Group}
     * @memberof UpdateGroupRequest
     */
    group?: Group
}
/**
 * 
 * @export
 * @interface UpdateGroupResponse
 */
export class UpdateGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {Group}
     * @memberof UpdateGroupResponse
     */
    group?: Group
}
/**
 * UpdatePolicyRequest
 * @export
 * @interface UpdatePolicyRequest
 */
export class UpdatePolicyRequest {
    /**
     * 
     * @type {Policy}
     * @memberof UpdatePolicyRequest
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface UpdatePolicyResponse
 */
export class UpdatePolicyResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdatePolicyResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdatePolicyResponse
     */
    request_id?: string
    /**
     * 
     * @type {Policy}
     * @memberof UpdatePolicyResponse
     */
    policy?: Policy
}
/**
 * 
 * @export
 * @interface UpdateUserPermissionGroupRequest
 */
export class UpdateUserPermissionGroupRequest {
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof UpdateUserPermissionGroupRequest
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface UpdateUserPermissionGroupResponse
 */
export class UpdateUserPermissionGroupResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateUserPermissionGroupResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateUserPermissionGroupResponse
     */
    request_id?: string
    /**
     * 
     * @type {UserPermissionGroup}
     * @memberof UpdateUserPermissionGroupResponse
     */
    user_permission_group?: UserPermissionGroup
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export class UpdateUserRequest {
    /**
     * 
     * @type {User}
     * @memberof UpdateUserRequest
     */
    user?: User
}
/**
 * 
 * @export
 * @interface UpdateUserResponse
 */
export class UpdateUserResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateUserResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateUserResponse
     */
    request_id?: string
    /**
     * 
     * @type {User}
     * @memberof UpdateUserResponse
     */
    user?: User
}
/**
 * 
 * @export
 * @interface User
 */
export class User {
    /**
     * 
     * @type {EditInfo}
     * @memberof User
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof User
     */
    change_info?: EditInfo
    /**
     * 
     * @type {string}
     * @memberof User
     */
    user_id?: string
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string
}
/**
 * 
 * @export
 * @interface UserAllOf
 */
export class UserAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserAllOf
     */
    user_id?: string
    /**
     * 
     * @type {string}
     * @memberof UserAllOf
     */
    name?: string
}
/**
 * 
 * @export
 * @interface UserPermissionGroup
 */
export class UserPermissionGroup {
    /**
     * 
     * @type {EditInfo}
     * @memberof UserPermissionGroup
     */
    create_info?: EditInfo
    /**
     * 
     * @type {EditInfo}
     * @memberof UserPermissionGroup
     */
    change_info?: EditInfo
    /**
     * 
     * @type {string}
     * @memberof UserPermissionGroup
     */
    permission_group_id?: string
}
/**
 * 
 * @export
 * @interface UserPermissionGroupAllOf
 */
export class UserPermissionGroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserPermissionGroupAllOf
     */
    permission_group_id?: string
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * GetAccount
         * @summary GetAccount
         * @param {string} accountId account_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Account
         * @summary UpdateAccount
         * @param {string} accountId account_id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (accountId: string, updateAccountRequest?: UpdateAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * GetAccount
         * @summary GetAccount
         * @param {string} accountId account_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Account
         * @summary UpdateAccount
         * @param {string} accountId account_id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(accountId, updateAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * GetAccount
         * @summary GetAccount
         * @param {string} accountId account_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: string, options?: any): AxiosPromise<GetAccountResponse> {
            return localVarFp.getAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Account
         * @summary UpdateAccount
         * @param {string} accountId account_id
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: any): AxiosPromise<UpdateAccountResponse> {
            return localVarFp.updateAccount(accountId, updateAccountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRequest
 */
export class AccountsApiGetAccountRequest {
    /**
     * account_id
     * @type {string}
     * @memberof AccountsApiGetAccount
     */
    accountId: string
}

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export class AccountsApiUpdateAccountRequest {
    /**
     * account_id
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    accountId: string

    /**
     * 
     * @type {UpdateAccountRequest}
     * @memberof AccountsApiUpdateAccount
     */
    updateAccountRequest?: UpdateAccountRequest
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * GetAccount
     * @summary GetAccount
     * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccount(requestParameters: AccountsApiGetAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccount(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Account
     * @summary UpdateAccount
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccount(requestParameters.accountId, requestParameters.updateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CreateGroup
         * @summary CreateGroup
         * @param {string} accountId account_id
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (accountId: string, createGroupRequest?: CreateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createGroup', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/groups`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DeleteGroup
         * @summary DeleteGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (accountId: string, groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteGroup', 'accountId', accountId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroup', 'groupId', groupId)
            const localVarPath = `/accounts/{account_id}/groups/{group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetGroup
         * @summary GetGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (accountId: string, groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getGroup', 'accountId', accountId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroup', 'groupId', groupId)
            const localVarPath = `/accounts/{account_id}/groups/{group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ListGroups
         * @summary ListGroups
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (accountId: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listGroups', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/groups`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateGroup
         * @summary UpdateGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {GroupsGroupIdBody} [groupsGroupIdBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (accountId: string, groupId: string, groupsGroupIdBody?: GroupsGroupIdBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateGroup', 'accountId', accountId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroup', 'groupId', groupId)
            const localVarPath = `/accounts/{account_id}/groups/{group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupsGroupIdBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * CreateGroup
         * @summary CreateGroup
         * @param {string} accountId account_id
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(accountId: string, createGroupRequest?: CreateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(accountId, createGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DeleteGroup
         * @summary DeleteGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(accountId: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(accountId, groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetGroup
         * @summary GetGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(accountId: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(accountId, groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ListGroups
         * @summary ListGroups
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(accountId: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(accountId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * UpdateGroup
         * @summary UpdateGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {GroupsGroupIdBody} [groupsGroupIdBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(accountId: string, groupId: string, groupsGroupIdBody?: GroupsGroupIdBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(accountId, groupId, groupsGroupIdBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * CreateGroup
         * @summary CreateGroup
         * @param {string} accountId account_id
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(accountId: string, createGroupRequest?: CreateGroupRequest, options?: any): AxiosPromise<CreateGroupResponse> {
            return localVarFp.createGroup(accountId, createGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * DeleteGroup
         * @summary DeleteGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(accountId: string, groupId: string, options?: any): AxiosPromise<DeleteGroupResponse> {
            return localVarFp.deleteGroup(accountId, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetGroup
         * @summary GetGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(accountId: string, groupId: string, options?: any): AxiosPromise<GetGroupResponse> {
            return localVarFp.getGroup(accountId, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * ListGroups
         * @summary ListGroups
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(accountId: string, name?: string, options?: any): AxiosPromise<ListGroupsResponse> {
            return localVarFp.listGroups(accountId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateGroup
         * @summary UpdateGroup
         * @param {string} accountId account_id
         * @param {string} groupId group id
         * @param {GroupsGroupIdBody} [groupsGroupIdBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(accountId: string, groupId: string, groupsGroupIdBody?: GroupsGroupIdBody, options?: any): AxiosPromise<UpdateGroupResponse> {
            return localVarFp.updateGroup(accountId, groupId, groupsGroupIdBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiCreateGroupRequest
 */
export class GroupsApiCreateGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof GroupsApiCreateGroup
     */
    accountId: string

    /**
     * 
     * @type {CreateGroupRequest}
     * @memberof GroupsApiCreateGroup
     */
    createGroupRequest?: CreateGroupRequest
}

/**
 * Request parameters for deleteGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupRequest
 */
export class GroupsApiDeleteGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    accountId: string

    /**
     * group id
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    groupId: string
}

/**
 * Request parameters for getGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiGetGroupRequest
 */
export class GroupsApiGetGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof GroupsApiGetGroup
     */
    accountId: string

    /**
     * group id
     * @type {string}
     * @memberof GroupsApiGetGroup
     */
    groupId: string
}

/**
 * Request parameters for listGroups operation in GroupsApi.
 * @export
 * @interface GroupsApiListGroupsRequest
 */
export class GroupsApiListGroupsRequest {
    /**
     * account_id
     * @type {string}
     * @memberof GroupsApiListGroups
     */
    accountId: string

    /**
     * name
     * @type {string}
     * @memberof GroupsApiListGroups
     */
    name?: string
}

/**
 * Request parameters for updateGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupRequest
 */
export class GroupsApiUpdateGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    accountId: string

    /**
     * group id
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    groupId: string

    /**
     * 
     * @type {GroupsGroupIdBody}
     * @memberof GroupsApiUpdateGroup
     */
    groupsGroupIdBody?: GroupsGroupIdBody
}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * CreateGroup
     * @summary CreateGroup
     * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(requestParameters.accountId, requestParameters.createGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DeleteGroup
     * @summary DeleteGroup
     * @param {GroupsApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(requestParameters: GroupsApiDeleteGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(requestParameters.accountId, requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetGroup
     * @summary GetGroup
     * @param {GroupsApiGetGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroup(requestParameters: GroupsApiGetGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroup(requestParameters.accountId, requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ListGroups
     * @summary ListGroups
     * @param {GroupsApiListGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public listGroups(requestParameters: GroupsApiListGroupsRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).listGroups(requestParameters.accountId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * UpdateGroup
     * @summary UpdateGroup
     * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(requestParameters.accountId, requestParameters.groupId, requestParameters.groupsGroupIdBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Policy
         * @summary Create Policy
         * @param {string} accountId account_id
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (accountId: string, createPolicyRequest?: CreatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createPolicy', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/policies`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Policy
         * @summary Delete Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (accountId: string, policyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deletePolicy', 'accountId', accountId)
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('deletePolicy', 'policyId', policyId)
            const localVarPath = `/accounts/{account_id}/policies/{policy_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Policy
         * @summary Get Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (accountId: string, policyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getPolicy', 'accountId', accountId)
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('getPolicy', 'policyId', policyId)
            const localVarPath = `/accounts/{account_id}/policies/{policy_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Policies
         * @summary List Policies
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies: async (accountId: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listPolicies', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/policies`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Policy
         * @summary Update Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {UpdatePolicyRequest} [updatePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (accountId: string, policyId: string, updatePolicyRequest?: UpdatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updatePolicy', 'accountId', accountId)
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('updatePolicy', 'policyId', policyId)
            const localVarPath = `/accounts/{account_id}/policies/{policy_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Policy
         * @summary Create Policy
         * @param {string} accountId account_id
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(accountId: string, createPolicyRequest?: CreatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(accountId, createPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Policy
         * @summary Delete Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(accountId: string, policyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletePolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(accountId, policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Policy
         * @summary Get Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(accountId: string, policyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicy(accountId, policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Policies
         * @summary List Policies
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPolicies(accountId: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPoliciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicies(accountId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Policy
         * @summary Update Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {UpdatePolicyRequest} [updatePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(accountId: string, policyId: string, updatePolicyRequest?: UpdatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatePolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(accountId, policyId, updatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * Create Policy
         * @summary Create Policy
         * @param {string} accountId account_id
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(accountId: string, createPolicyRequest?: CreatePolicyRequest, options?: any): AxiosPromise<CreatePolicyResponse> {
            return localVarFp.createPolicy(accountId, createPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Policy
         * @summary Delete Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(accountId: string, policyId: string, options?: any): AxiosPromise<DeletePolicyResponse> {
            return localVarFp.deletePolicy(accountId, policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Policy
         * @summary Get Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(accountId: string, policyId: string, options?: any): AxiosPromise<GetPolicyResponse> {
            return localVarFp.getPolicy(accountId, policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Policies
         * @summary List Policies
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies(accountId: string, name?: string, options?: any): AxiosPromise<ListPoliciesResponse> {
            return localVarFp.listPolicies(accountId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Policy
         * @summary Update Policy
         * @param {string} accountId account_id
         * @param {string} policyId policy_id
         * @param {UpdatePolicyRequest} [updatePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(accountId: string, policyId: string, updatePolicyRequest?: UpdatePolicyRequest, options?: any): AxiosPromise<UpdatePolicyResponse> {
            return localVarFp.updatePolicy(accountId, policyId, updatePolicyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiCreatePolicyRequest
 */
export class PoliciesApiCreatePolicyRequest {
    /**
     * account_id
     * @type {string}
     * @memberof PoliciesApiCreatePolicy
     */
    accountId: string

    /**
     * 
     * @type {CreatePolicyRequest}
     * @memberof PoliciesApiCreatePolicy
     */
    createPolicyRequest?: CreatePolicyRequest
}

/**
 * Request parameters for deletePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiDeletePolicyRequest
 */
export class PoliciesApiDeletePolicyRequest {
    /**
     * account_id
     * @type {string}
     * @memberof PoliciesApiDeletePolicy
     */
    accountId: string

    /**
     * policy_id
     * @type {string}
     * @memberof PoliciesApiDeletePolicy
     */
    policyId: string
}

/**
 * Request parameters for getPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyRequest
 */
export class PoliciesApiGetPolicyRequest {
    /**
     * account_id
     * @type {string}
     * @memberof PoliciesApiGetPolicy
     */
    accountId: string

    /**
     * policy_id
     * @type {string}
     * @memberof PoliciesApiGetPolicy
     */
    policyId: string
}

/**
 * Request parameters for listPolicies operation in PoliciesApi.
 * @export
 * @interface PoliciesApiListPoliciesRequest
 */
export class PoliciesApiListPoliciesRequest {
    /**
     * account_id
     * @type {string}
     * @memberof PoliciesApiListPolicies
     */
    accountId: string

    /**
     * name
     * @type {string}
     * @memberof PoliciesApiListPolicies
     */
    name?: string
}

/**
 * Request parameters for updatePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiUpdatePolicyRequest
 */
export class PoliciesApiUpdatePolicyRequest {
    /**
     * account_id
     * @type {string}
     * @memberof PoliciesApiUpdatePolicy
     */
    accountId: string

    /**
     * policy_id
     * @type {string}
     * @memberof PoliciesApiUpdatePolicy
     */
    policyId: string

    /**
     * 
     * @type {UpdatePolicyRequest}
     * @memberof PoliciesApiUpdatePolicy
     */
    updatePolicyRequest?: UpdatePolicyRequest
}

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * Create Policy
     * @summary Create Policy
     * @param {PoliciesApiCreatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createPolicy(requestParameters: PoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).createPolicy(requestParameters.accountId, requestParameters.createPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Policy
     * @summary Delete Policy
     * @param {PoliciesApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public deletePolicy(requestParameters: PoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).deletePolicy(requestParameters.accountId, requestParameters.policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Policy
     * @summary Get Policy
     * @param {PoliciesApiGetPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicy(requestParameters: PoliciesApiGetPolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicy(requestParameters.accountId, requestParameters.policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Policies
     * @summary List Policies
     * @param {PoliciesApiListPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public listPolicies(requestParameters: PoliciesApiListPoliciesRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).listPolicies(requestParameters.accountId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Policy
     * @summary Update Policy
     * @param {PoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public updatePolicy(requestParameters: PoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).updatePolicy(requestParameters.accountId, requestParameters.policyId, requestParameters.updatePolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserPermissionGroupsApi - axios parameter creator
 * @export
 */
export const UserPermissionGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create UserPermissionGroup
         * @summary Create UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {CreateUserPermissionGroupRequest} [createUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserPermissionGroup: async (accountId: string, userId: string, createUserPermissionGroupRequest?: CreateUserPermissionGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createUserPermissionGroup', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createUserPermissionGroup', 'userId', userId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}/permission-groups`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserPermissionGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete UserPermissionGroup
         * @summary Delete UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPermissionGroup: async (accountId: string, userId: string, permissionGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteUserPermissionGroup', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserPermissionGroup', 'userId', userId)
            // verify required parameter 'permissionGroupId' is not null or undefined
            assertParamExists('deleteUserPermissionGroup', 'permissionGroupId', permissionGroupId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}/permission-groups/{permission_group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"permission_group_id"}}`, encodeURIComponent(String(permissionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get UserPermissionGroup
         * @summary Get UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionGroup: async (accountId: string, userId: string, permissionGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserPermissionGroup', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserPermissionGroup', 'userId', userId)
            // verify required parameter 'permissionGroupId' is not null or undefined
            assertParamExists('getUserPermissionGroup', 'permissionGroupId', permissionGroupId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}/permission-groups/{permission_group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"permission_group_id"}}`, encodeURIComponent(String(permissionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List User Permission Groups
         * @summary List UserPermissionGroups
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissionGroups: async (accountId: string, userId: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listUserPermissionGroups', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserPermissionGroups', 'userId', userId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}/permission-groups`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update UserPermissionGroup
         * @summary Update UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {UpdateUserPermissionGroupRequest} [updateUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermissionGroup: async (accountId: string, userId: string, permissionGroupId: string, updateUserPermissionGroupRequest?: UpdateUserPermissionGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateUserPermissionGroup', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserPermissionGroup', 'userId', userId)
            // verify required parameter 'permissionGroupId' is not null or undefined
            assertParamExists('updateUserPermissionGroup', 'permissionGroupId', permissionGroupId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}/permission-groups/{permission_group_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"permission_group_id"}}`, encodeURIComponent(String(permissionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPermissionGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserPermissionGroupsApi - functional programming interface
 * @export
 */
export const UserPermissionGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserPermissionGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create UserPermissionGroup
         * @summary Create UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {CreateUserPermissionGroupRequest} [createUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserPermissionGroup(accountId: string, userId: string, createUserPermissionGroupRequest?: CreateUserPermissionGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserPermissionGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserPermissionGroup(accountId, userId, createUserPermissionGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete UserPermissionGroup
         * @summary Delete UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserPermissionGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserPermissionGroup(accountId, userId, permissionGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get UserPermissionGroup
         * @summary Get UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserPermissionGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPermissionGroup(accountId, userId, permissionGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List User Permission Groups
         * @summary List UserPermissionGroups
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserPermissionGroups(accountId: string, userId: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserPermissionGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserPermissionGroups(accountId, userId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update UserPermissionGroup
         * @summary Update UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {UpdateUserPermissionGroupRequest} [updateUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, updateUserPermissionGroupRequest?: UpdateUserPermissionGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserPermissionGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPermissionGroup(accountId, userId, permissionGroupId, updateUserPermissionGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserPermissionGroupsApi - factory interface
 * @export
 */
export const UserPermissionGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserPermissionGroupsApiFp(configuration)
    return {
        /**
         * Create UserPermissionGroup
         * @summary Create UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {CreateUserPermissionGroupRequest} [createUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserPermissionGroup(accountId: string, userId: string, createUserPermissionGroupRequest?: CreateUserPermissionGroupRequest, options?: any): AxiosPromise<CreateUserPermissionGroupResponse> {
            return localVarFp.createUserPermissionGroup(accountId, userId, createUserPermissionGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete UserPermissionGroup
         * @summary Delete UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, options?: any): AxiosPromise<DeleteUserPermissionGroupResponse> {
            return localVarFp.deleteUserPermissionGroup(accountId, userId, permissionGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get UserPermissionGroup
         * @summary Get UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, options?: any): AxiosPromise<GetUserPermissionGroupResponse> {
            return localVarFp.getUserPermissionGroup(accountId, userId, permissionGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * List User Permission Groups
         * @summary List UserPermissionGroups
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissionGroups(accountId: string, userId: string, name?: string, options?: any): AxiosPromise<ListUserPermissionGroupsResponse> {
            return localVarFp.listUserPermissionGroups(accountId, userId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Update UserPermissionGroup
         * @summary Update UserPermissionGroup
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {string} permissionGroupId permission_group_id
         * @param {UpdateUserPermissionGroupRequest} [updateUserPermissionGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermissionGroup(accountId: string, userId: string, permissionGroupId: string, updateUserPermissionGroupRequest?: UpdateUserPermissionGroupRequest, options?: any): AxiosPromise<UpdateUserPermissionGroupResponse> {
            return localVarFp.updateUserPermissionGroup(accountId, userId, permissionGroupId, updateUserPermissionGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserPermissionGroup operation in UserPermissionGroupsApi.
 * @export
 * @interface UserPermissionGroupsApiCreateUserPermissionGroupRequest
 */
export class UserPermissionGroupsApiCreateUserPermissionGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UserPermissionGroupsApiCreateUserPermissionGroup
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UserPermissionGroupsApiCreateUserPermissionGroup
     */
    userId: string

    /**
     * 
     * @type {CreateUserPermissionGroupRequest}
     * @memberof UserPermissionGroupsApiCreateUserPermissionGroup
     */
    createUserPermissionGroupRequest?: CreateUserPermissionGroupRequest
}

/**
 * Request parameters for deleteUserPermissionGroup operation in UserPermissionGroupsApi.
 * @export
 * @interface UserPermissionGroupsApiDeleteUserPermissionGroupRequest
 */
export class UserPermissionGroupsApiDeleteUserPermissionGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UserPermissionGroupsApiDeleteUserPermissionGroup
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UserPermissionGroupsApiDeleteUserPermissionGroup
     */
    userId: string

    /**
     * permission_group_id
     * @type {string}
     * @memberof UserPermissionGroupsApiDeleteUserPermissionGroup
     */
    permissionGroupId: string
}

/**
 * Request parameters for getUserPermissionGroup operation in UserPermissionGroupsApi.
 * @export
 * @interface UserPermissionGroupsApiGetUserPermissionGroupRequest
 */
export class UserPermissionGroupsApiGetUserPermissionGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UserPermissionGroupsApiGetUserPermissionGroup
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UserPermissionGroupsApiGetUserPermissionGroup
     */
    userId: string

    /**
     * permission_group_id
     * @type {string}
     * @memberof UserPermissionGroupsApiGetUserPermissionGroup
     */
    permissionGroupId: string
}

/**
 * Request parameters for listUserPermissionGroups operation in UserPermissionGroupsApi.
 * @export
 * @interface UserPermissionGroupsApiListUserPermissionGroupsRequest
 */
export class UserPermissionGroupsApiListUserPermissionGroupsRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UserPermissionGroupsApiListUserPermissionGroups
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UserPermissionGroupsApiListUserPermissionGroups
     */
    userId: string

    /**
     * name
     * @type {string}
     * @memberof UserPermissionGroupsApiListUserPermissionGroups
     */
    name?: string
}

/**
 * Request parameters for updateUserPermissionGroup operation in UserPermissionGroupsApi.
 * @export
 * @interface UserPermissionGroupsApiUpdateUserPermissionGroupRequest
 */
export class UserPermissionGroupsApiUpdateUserPermissionGroupRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UserPermissionGroupsApiUpdateUserPermissionGroup
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UserPermissionGroupsApiUpdateUserPermissionGroup
     */
    userId: string

    /**
     * permission_group_id
     * @type {string}
     * @memberof UserPermissionGroupsApiUpdateUserPermissionGroup
     */
    permissionGroupId: string

    /**
     * 
     * @type {UpdateUserPermissionGroupRequest}
     * @memberof UserPermissionGroupsApiUpdateUserPermissionGroup
     */
    updateUserPermissionGroupRequest?: UpdateUserPermissionGroupRequest
}

/**
 * UserPermissionGroupsApi - object-oriented interface
 * @export
 * @class UserPermissionGroupsApi
 * @extends {BaseAPI}
 */
export class UserPermissionGroupsApi extends BaseAPI {
    /**
     * Create UserPermissionGroup
     * @summary Create UserPermissionGroup
     * @param {UserPermissionGroupsApiCreateUserPermissionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionGroupsApi
     */
    public createUserPermissionGroup(requestParameters: UserPermissionGroupsApiCreateUserPermissionGroupRequest, options?: AxiosRequestConfig) {
        return UserPermissionGroupsApiFp(this.configuration).createUserPermissionGroup(requestParameters.accountId, requestParameters.userId, requestParameters.createUserPermissionGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete UserPermissionGroup
     * @summary Delete UserPermissionGroup
     * @param {UserPermissionGroupsApiDeleteUserPermissionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionGroupsApi
     */
    public deleteUserPermissionGroup(requestParameters: UserPermissionGroupsApiDeleteUserPermissionGroupRequest, options?: AxiosRequestConfig) {
        return UserPermissionGroupsApiFp(this.configuration).deleteUserPermissionGroup(requestParameters.accountId, requestParameters.userId, requestParameters.permissionGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get UserPermissionGroup
     * @summary Get UserPermissionGroup
     * @param {UserPermissionGroupsApiGetUserPermissionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionGroupsApi
     */
    public getUserPermissionGroup(requestParameters: UserPermissionGroupsApiGetUserPermissionGroupRequest, options?: AxiosRequestConfig) {
        return UserPermissionGroupsApiFp(this.configuration).getUserPermissionGroup(requestParameters.accountId, requestParameters.userId, requestParameters.permissionGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List User Permission Groups
     * @summary List UserPermissionGroups
     * @param {UserPermissionGroupsApiListUserPermissionGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionGroupsApi
     */
    public listUserPermissionGroups(requestParameters: UserPermissionGroupsApiListUserPermissionGroupsRequest, options?: AxiosRequestConfig) {
        return UserPermissionGroupsApiFp(this.configuration).listUserPermissionGroups(requestParameters.accountId, requestParameters.userId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update UserPermissionGroup
     * @summary Update UserPermissionGroup
     * @param {UserPermissionGroupsApiUpdateUserPermissionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionGroupsApi
     */
    public updateUserPermissionGroup(requestParameters: UserPermissionGroupsApiUpdateUserPermissionGroupRequest, options?: AxiosRequestConfig) {
        return UserPermissionGroupsApiFp(this.configuration).updateUserPermissionGroup(requestParameters.accountId, requestParameters.userId, requestParameters.permissionGroupId, requestParameters.updateUserPermissionGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create User
         * @summary Create User
         * @param {string} accountId account_id
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (accountId: string, createUserRequest?: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createUser', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/users`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete User
         * @summary Delete User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (accountId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteUser', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User
         * @summary Get User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (accountId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUser', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Users
         * @summary List User
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (accountId: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listUsers', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/users`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update User
         * @summary Update User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (accountId: string, userId: string, updateUserRequest?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateUser', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            const localVarPath = `/accounts/{account_id}/users/{user_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create User
         * @summary Create User
         * @param {string} accountId account_id
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(accountId: string, createUserRequest?: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(accountId, createUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete User
         * @summary Delete User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(accountId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(accountId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get User
         * @summary Get User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(accountId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(accountId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Users
         * @summary List User
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(accountId: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(accountId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update User
         * @summary Update User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(accountId: string, userId: string, updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(accountId, userId, updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create User
         * @summary Create User
         * @param {string} accountId account_id
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(accountId: string, createUserRequest?: CreateUserRequest, options?: any): AxiosPromise<CreateUserResponse> {
            return localVarFp.createUser(accountId, createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete User
         * @summary Delete User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(accountId: string, userId: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.deleteUser(accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User
         * @summary Get User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(accountId: string, userId: string, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.getUser(accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Users
         * @summary List User
         * @param {string} accountId account_id
         * @param {string} [name] name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(accountId: string, name?: string, options?: any): AxiosPromise<ListUsersResponse> {
            return localVarFp.listUsers(accountId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Update User
         * @summary Update User
         * @param {string} accountId account_id
         * @param {string} userId user_id
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(accountId: string, userId: string, updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<UpdateUserResponse> {
            return localVarFp.updateUser(accountId, userId, updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export class UsersApiCreateUserRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UsersApiCreateUser
     */
    accountId: string

    /**
     * 
     * @type {CreateUserRequest}
     * @memberof UsersApiCreateUser
     */
    createUserRequest?: CreateUserRequest
}

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export class UsersApiDeleteUserRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    userId: string
}

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export class UsersApiGetUserRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UsersApiGetUser
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UsersApiGetUser
     */
    userId: string
}

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export class UsersApiListUsersRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UsersApiListUsers
     */
    accountId: string

    /**
     * name
     * @type {string}
     * @memberof UsersApiListUsers
     */
    name?: string
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export class UsersApiUpdateUserRequest {
    /**
     * account_id
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    accountId: string

    /**
     * user_id
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    userId: string

    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof UsersApiUpdateUser
     */
    updateUserRequest?: UpdateUserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create User
     * @summary Create User
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(requestParameters.accountId, requestParameters.createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete User
     * @summary Delete User
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.accountId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User
     * @summary Get User
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(requestParameters.accountId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Users
     * @summary List User
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(requestParameters.accountId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update User
     * @summary Update User
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.accountId, requestParameters.userId, requestParameters.updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



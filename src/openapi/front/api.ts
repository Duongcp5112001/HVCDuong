/* tslint:disable */
/* eslint-disable */
/**
 * Tap Hub API - Front API
 * API References
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject,setAuthorizationTokenToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Request
 * @export
 * @interface ApiCommonResponseRequest
 */
export class ApiCommonResponseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    version?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    body?: string
    /**
     * 
     * @type {string}
     * @memberof ApiCommonResponseRequest
     */
    url?: string
}
/**
 * 
 * @export
 * @interface ApiCreateRequest
 */
export class ApiCreateRequest {
}
/**
 * 
 * @export
 * @interface ApiCreateResponse
 */
export class ApiCreateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiCreateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiCreateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiError
 */
export class ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    code?: string
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ApiErrorResponseBadRequest
 */
export class ApiErrorResponseBadRequest {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseBadRequest
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseBadRequest
     */
    request_id?: string
    /**
     * 
     * @type {Array<InvalidParameter>}
     * @memberof ApiErrorResponseBadRequest
     */
    errors?: Array<InvalidParameter>
}
/**
 * 
 * @export
 * @interface ApiErrorResponseInternalError
 */
export class ApiErrorResponseInternalError {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseInternalError
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseInternalError
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseInternalError
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseNotFound
 */
export class ApiErrorResponseNotFound {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseNotFound
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseNotFound
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseNotFound
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiErrorResponseUnauthorized
 */
export class ApiErrorResponseUnauthorized {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiErrorResponseUnauthorized
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiErrorResponseUnauthorized
     */
    request_id?: string
    /**
     * 
     * @type {ApiError}
     * @memberof ApiErrorResponseUnauthorized
     */
    errors?: ApiError
}
/**
 * 
 * @export
 * @interface ApiGetResponse
 */
export class ApiGetResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiGetResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiGetResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiListResponse
 */
export class ApiListResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiListResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiListResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponse
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiListResponseAllOf
 */
export class ApiListResponseAllOf {
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ApiListResponseAllOf
     */
    next_cursor?: string
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export class ApiResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface ApiUpdateRequest
 */
export class ApiUpdateRequest {
}
/**
 * 
 * @export
 * @interface ApiUpdateResponse
 */
export class ApiUpdateResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ApiUpdateResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ApiUpdateResponse
     */
    request_id?: string
}
/**
 * 
 * @export
 * @interface CreateReservationCancelRequest
 */
export class CreateReservationCancelRequest {
    /**
     * 
     * @type {ReservationCancel}
     * @memberof CreateReservationCancelRequest
     */
    reservation_cancel?: ReservationCancel
}
/**
 * 
 * @export
 * @interface CreateReservationCancelResponse
 */
export class CreateReservationCancelResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateReservationCancelResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateReservationCancelResponse
     */
    request_id?: string
    /**
     * 
     * @type {ReservationCancel}
     * @memberof CreateReservationCancelResponse
     */
    reservation_cancel?: ReservationCancel
}
/**
 * 
 * @export
 * @interface CreateReservationCancelResponseAllOf
 */
export class CreateReservationCancelResponseAllOf {
    /**
     * 
     * @type {ReservationCancel}
     * @memberof CreateReservationCancelResponseAllOf
     */
    reservation_cancel?: ReservationCancel
}
/**
 * 
 * @export
 * @interface CreateReservationRequest
 */
export class CreateReservationRequest {
    /**
     * 
     * @type {ReservationDynamic}
     * @memberof CreateReservationRequest
     */
    reservation?: ReservationDynamic
}
/**
 * 
 * @export
 * @interface CreateReservationRequestAllOf
 */
export class CreateReservationRequestAllOf {
    /**
     * 
     * @type {ReservationDynamic}
     * @memberof CreateReservationRequestAllOf
     */
    reservation?: ReservationDynamic
}
/**
 * 
 * @export
 * @interface CreateReservationResponse
 */
export class CreateReservationResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof CreateReservationResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof CreateReservationResponse
     */
    request_id?: string
    /**
     * 
     * @type {Reservation}
     * @memberof CreateReservationResponse
     */
    reservation?: Reservation
}
/**
 * 
 * @export
 * @interface CreateReservationResponseAllOf
 */
export class CreateReservationResponseAllOf {
    /**
     * 
     * @type {Reservation}
     * @memberof CreateReservationResponseAllOf
     */
    reservation?: Reservation
}
/**
 * 
 * @export
 * @interface CustomerAccountReservation
 */
export class CustomerAccountReservation {
    /**
     * ホテルコード
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    hotel_code?: string
    /**
     * ホテルID
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    hotel_id?: string
    /**
     * ホテル名
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    hotel_name?: string
    /**
     * 泊数　 滞在期間の最短日と最長日の泊数を返します 
     * @type {number}
     * @memberof CustomerAccountReservation
     */
    nights_count?: number
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    reservation_id?: string
    /**
     * 滞在期間の最長日　 複数部屋の際に旅程が変わる場合は最後の日程を返します 
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    stay_date_range_end_max?: string
    /**
     * 滞在期間の最短日　 複数部屋の際に旅程が変わる場合は最初の日程を返します 
     * @type {string}
     * @memberof CustomerAccountReservation
     */
    stay_date_range_start_min?: string
}
/**
 * 
 * @export
 * @interface DateRange
 */
export class DateRange {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof DateRange
     */
    end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof DateRange
     */
    start?: string
}
/**
 * 曜日
 * @export
 * @enum {string}
 */

export const DayOfWeek = {
    Sunday: 'Sunday',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday'
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


/**
 * 
 * @export
 * @interface ExtraServiceItemGroup
 */
export class ExtraServiceItemGroup {
    /**
     * グループID
     * @type {string}
     * @memberof ExtraServiceItemGroup
     */
    extra_service_item_group_id?: string
    /**
     * 付帯サービスグループ名
     * @type {string}
     * @memberof ExtraServiceItemGroup
     */
    name?: string
}
/**
 * 
 * @export
 * @interface GetReservationResponse
 */
export class GetReservationResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof GetReservationResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof GetReservationResponse
     */
    request_id?: string
    /**
     * 
     * @type {Reservation}
     * @memberof GetReservationResponse
     */
    reservation?: Reservation
}
/**
 * InvalidParameter
 * @export
 * @interface InvalidParameter
 */
export class InvalidParameter {
    /**
     * parameter name
     * @type {string}
     * @memberof InvalidParameter
     */
    parameter?: string
    /**
     * error detail
     * @type {string}
     * @memberof InvalidParameter
     */
    detail?: string
    /**
     * error code
     * @type {string}
     * @memberof InvalidParameter
     */
    code?: string
    /**
     * parameter value
     * @type {string}
     * @memberof InvalidParameter
     */
    value?: string
    /**
     * error message
     * @type {string}
     * @memberof InvalidParameter
     */
    message?: string
}
/**
 * 
 * @export
 * @interface ListCustomerAccountReservationsResponse
 */
export class ListCustomerAccountReservationsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListCustomerAccountReservationsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListCustomerAccountReservationsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListCustomerAccountReservationsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<CustomerAccountReservation>}
     * @memberof ListCustomerAccountReservationsResponse
     */
    customer_account_reservations?: Array<CustomerAccountReservation>
}
/**
 * 
 * @export
 * @interface ListCustomerAccountReservationsResponseAllOf
 */
export class ListCustomerAccountReservationsResponseAllOf {
    /**
     * 
     * @type {Array<CustomerAccountReservation>}
     * @memberof ListCustomerAccountReservationsResponseAllOf
     */
    customer_account_reservations?: Array<CustomerAccountReservation>
}
/**
 * 
 * @export
 * @interface ListExtraServiceItemGroupsResponse
 */
export class ListExtraServiceItemGroupsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListExtraServiceItemGroupsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListExtraServiceItemGroupsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListExtraServiceItemGroupsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<ExtraServiceItemGroup>}
     * @memberof ListExtraServiceItemGroupsResponse
     */
    extra_service_item_groups?: Array<ExtraServiceItemGroup>
}
/**
 * 
 * @export
 * @interface ListExtraServiceItemGroupsResponseAllOf
 */
export class ListExtraServiceItemGroupsResponseAllOf {
    /**
     * 
     * @type {Array<ExtraServiceItemGroup>}
     * @memberof ListExtraServiceItemGroupsResponseAllOf
     */
    extra_service_item_groups?: Array<ExtraServiceItemGroup>
}
/**
 * 
 * @export
 * @interface ListMealPlacesResponse
 */
export class ListMealPlacesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListMealPlacesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListMealPlacesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListMealPlacesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<MealPlace>}
     * @memberof ListMealPlacesResponse
     */
    meal_places?: Array<MealPlace>
}
/**
 * 
 * @export
 * @interface ListMealPlacesResponseAllOf
 */
export class ListMealPlacesResponseAllOf {
    /**
     * 
     * @type {Array<MealPlace>}
     * @memberof ListMealPlacesResponseAllOf
     */
    meal_places?: Array<MealPlace>
}
/**
 * 
 * @export
 * @interface ListProvisionItemsResponse
 */
export class ListProvisionItemsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListProvisionItemsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListProvisionItemsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListProvisionItemsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<ProvisionItem>}
     * @memberof ListProvisionItemsResponse
     */
    provision_items?: Array<ProvisionItem>
}
/**
 * 
 * @export
 * @interface ListProvisionItemsResponseAllOf
 */
export class ListProvisionItemsResponseAllOf {
    /**
     * 
     * @type {Array<ProvisionItem>}
     * @memberof ListProvisionItemsResponseAllOf
     */
    provision_items?: Array<ProvisionItem>
}
/**
 * 
 * @export
 * @interface ListReservationCancelReasonsResponse
 */
export class ListReservationCancelReasonsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListReservationCancelReasonsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListReservationCancelReasonsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListReservationCancelReasonsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<ReservationCancelReason>}
     * @memberof ListReservationCancelReasonsResponse
     */
    reservation_cancel_reasons?: Array<ReservationCancelReason>
}
/**
 * 
 * @export
 * @interface ListReservationCancelReasonsResponseAllOf
 */
export class ListReservationCancelReasonsResponseAllOf {
    /**
     * 
     * @type {Array<ReservationCancelReason>}
     * @memberof ListReservationCancelReasonsResponseAllOf
     */
    reservation_cancel_reasons?: Array<ReservationCancelReason>
}
/**
 * 
 * @export
 * @interface ListReservationsResponse
 */
export class ListReservationsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListReservationsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListReservationsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListReservationsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<ReservationListItem>}
     * @memberof ListReservationsResponse
     */
    reservations?: Array<ReservationListItem>
}
/**
 * 
 * @export
 * @interface ListReservationsResponseAllOf
 */
export class ListReservationsResponseAllOf {
    /**
     * 
     * @type {Array<ReservationListItem>}
     * @memberof ListReservationsResponseAllOf
     */
    reservations?: Array<ReservationListItem>
}
/**
 * 
 * @export
 * @interface ListRoomInventoriesResponse
 */
export class ListRoomInventoriesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListRoomInventoriesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListRoomInventoriesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListRoomInventoriesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<RoomInventory>}
     * @memberof ListRoomInventoriesResponse
     */
    room_inventories?: Array<RoomInventory>
}
/**
 * 
 * @export
 * @interface ListRoomInventoriesResponseAllOf
 */
export class ListRoomInventoriesResponseAllOf {
    /**
     * 
     * @type {Array<RoomInventory>}
     * @memberof ListRoomInventoriesResponseAllOf
     */
    room_inventories?: Array<RoomInventory>
}
/**
 * 
 * @export
 * @interface ListRoomInventoryCalendarsResponse
 */
export class ListRoomInventoryCalendarsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListRoomInventoryCalendarsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListRoomInventoryCalendarsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListRoomInventoryCalendarsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<RoomInventoryCalendar>}
     * @memberof ListRoomInventoryCalendarsResponse
     */
    room_inventories?: Array<RoomInventoryCalendar>
}
/**
 * 
 * @export
 * @interface ListRoomInventoryCalendarsResponseAllOf
 */
export class ListRoomInventoryCalendarsResponseAllOf {
    /**
     * 
     * @type {Array<RoomInventoryCalendar>}
     * @memberof ListRoomInventoryCalendarsResponseAllOf
     */
    room_inventories?: Array<RoomInventoryCalendar>
}
/**
 * 
 * @export
 * @interface ListRoomTypesResponse
 */
export class ListRoomTypesResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListRoomTypesResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListRoomTypesResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListRoomTypesResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<RoomType>}
     * @memberof ListRoomTypesResponse
     */
    room_types?: Array<RoomType>
}
/**
 * 
 * @export
 * @interface ListRoomTypesResponseAllOf
 */
export class ListRoomTypesResponseAllOf {
    /**
     * 
     * @type {Array<RoomType>}
     * @memberof ListRoomTypesResponseAllOf
     */
    room_types?: Array<RoomType>
}
/**
 * 
 * @export
 * @interface ListSalesItemSetsResponse
 */
export class ListSalesItemSetsResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof ListSalesItemSetsResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof ListSalesItemSetsResponse
     */
    request_id?: string
    /**
     * Indicates the position of the next entity. If an entity less than a limit is returned by the current page of the result set, then Cursor value is null.
     * @type {string}
     * @memberof ListSalesItemSetsResponse
     */
    next_cursor?: string
    /**
     * 
     * @type {Array<SalesItemSetListItem>}
     * @memberof ListSalesItemSetsResponse
     */
    sales_item_sets?: Array<SalesItemSetListItem>
}
/**
 * 
 * @export
 * @interface ListSalesItemSetsResponseAllOf
 */
export class ListSalesItemSetsResponseAllOf {
    /**
     * 
     * @type {Array<SalesItemSetListItem>}
     * @memberof ListSalesItemSetsResponseAllOf
     */
    sales_item_sets?: Array<SalesItemSetListItem>
}
/**
 * 
 * @export
 * @interface MealPlace
 */
export class MealPlace {
    /**
     * 
     * @type {boolean}
     * @memberof MealPlace
     */
    is_active: boolean
    /**
     * 
     * @type {string}
     * @memberof MealPlace
     */
    meal_place_id?: string
    /**
     * 名前
     * @type {string}
     * @memberof MealPlace
     */
    name: string
    /**
     * 別名
     * @type {string}
     * @memberof MealPlace
     */
    name_alias: string
    /**
     * 略称
     * @type {string}
     * @memberof MealPlace
     */
    name_short: string
}
/**
 * 
 * @export
 * @interface ProvisionItem
 */
export class ProvisionItem {
    /**
     * 在庫管理する場合はtrue
     * @type {boolean}
     * @memberof ProvisionItem
     */
    has_inventory?: boolean
    /**
     * 日付指定ありの場合、期間内の最小の利用可能数を返します
     * @type {number}
     * @memberof ProvisionItem
     */
    min_availability?: number
    /**
     * 
     * @type {boolean}
     * @memberof ProvisionItem
     */
    is_active?: boolean
    /**
     * 全泊手配の場合はtrue
     * @type {boolean}
     * @memberof ProvisionItem
     */
    is_each_day?: boolean
    /**
     * 名前
     * @type {string}
     * @memberof ProvisionItem
     */
    name: string
    /**
     * 別名
     * @type {string}
     * @memberof ProvisionItem
     */
    name_alias: string
    /**
     * 略称
     * @type {string}
     * @memberof ProvisionItem
     */
    name_short: string
    /**
     * 手配品ID
     * @type {string}
     * @memberof ProvisionItem
     */
    provision_item_id: string
    /**
     * 
     * @type {number}
     * @memberof ProvisionItem
     */
    sequence: number
    /**
     * 
     * @type {string}
     * @memberof ProvisionItem
     */
    symbol_characters?: string
}
/**
 * 予約
 * @export
 * @interface Reservation
 */
export class Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    reservation_id?: string
    /**
     * ホテルコード(2桁) + 自動採番(8桁)
     * @type {string}
     * @memberof Reservation
     */
    reservation_number?: string
    /**
     * 
     * @type {StayGuest}
     * @memberof Reservation
     */
    guest_main?: StayGuest
    /**
     * 
     * @type {StayGuest}
     * @memberof Reservation
     */
    guest_reserved_by?: StayGuest
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    hotel_name?: string
    /**
     * キャンセル済み
     * @type {boolean}
     * @memberof Reservation
     */
    is_cancelled?: boolean
    /**
     * 
     * @type {Array<number>}
     * @memberof Reservation
     */
    person_count?: Array<number>
    /**
     * 
     * @type {StayProvision}
     * @memberof Reservation
     */
    provisions?: StayProvision
    /**
     * 
     * @type {ReservationClassId}
     * @memberof Reservation
     */
    reservation_class_id: ReservationClassId
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof Reservation
     */
    reservation_status_id: ReservationStatusId
    /**
     * 
     * @type {StayPattern}
     * @memberof Reservation
     */
    stay_patterns?: StayPattern
}
/**
 * 
 * @export
 * @interface ReservationCancel
 */
export class ReservationCancel {
    /**
     * キャンセル理由ID
     * @type {string}
     * @memberof ReservationCancel
     */
    cancel_reason_id?: string
    /**
     * キャンセル備考
     * @type {string}
     * @memberof ReservationCancel
     */
    cancel_remarks?: string
    /**
     * 
     * @type {string}
     * @memberof ReservationCancel
     */
    cancel_timestamp?: string
    /**
     * 
     * @type {string}
     * @memberof ReservationCancel
     */
    cancel_user_id?: string
}
/**
 * 
 * @export
 * @interface ReservationCancelReason
 */
export class ReservationCancelReason {
    /**
     * 
     * @type {boolean}
     * @memberof ReservationCancelReason
     */
    is_active: boolean
    /**
     * 名前
     * @type {string}
     * @memberof ReservationCancelReason
     */
    name: string
    /**
     * 別名
     * @type {string}
     * @memberof ReservationCancelReason
     */
    name_alias: string
    /**
     * 略称
     * @type {string}
     * @memberof ReservationCancelReason
     */
    name_short: string
    /**
     * 外国語名
     * @type {string}
     * @memberof ReservationCancelReason
     */
    name_second?: string
    /**
     * 予約キャンセル理由ID
     * @type {string}
     * @memberof ReservationCancelReason
     */
    reservation_cancel_reason_id?: string
    /**
     * 
     * @type {number}
     * @memberof ReservationCancelReason
     */
    sequence: number
}
/**
 * * `DayVisit` - 日帰り * `Stay` - 滞在 
 * @export
 * @enum {string}
 */

export const ReservationClassId = {
    DayVisit: 'DayVisit',
    Stay: 'Stay'
} as const;

export type ReservationClassId = typeof ReservationClassId[keyof typeof ReservationClassId];


/**
 * ReservationDynamic
 * @export
 * @interface ReservationDynamic
 */
export class ReservationDynamic {
    /**
     * 
     * @type {StayGuest}
     * @memberof ReservationDynamic
     */
    guest_main?: StayGuest
    /**
     * 
     * @type {StayGuest}
     * @memberof ReservationDynamic
     */
    guest_reserved_by?: StayGuest
    /**
     * 
     * @type {string}
     * @memberof ReservationDynamic
     */
    hotel_name?: string
    /**
     * キャンセル済み
     * @type {boolean}
     * @memberof ReservationDynamic
     */
    is_cancelled?: boolean
    /**
     * 
     * @type {Array<number>}
     * @memberof ReservationDynamic
     */
    person_count?: Array<number>
    /**
     * 
     * @type {StayProvision}
     * @memberof ReservationDynamic
     */
    provisions?: StayProvision
    /**
     * 
     * @type {ReservationClassId}
     * @memberof ReservationDynamic
     */
    reservation_class_id: ReservationClassId
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof ReservationDynamic
     */
    reservation_status_id: ReservationStatusId
    /**
     * 
     * @type {StayPattern}
     * @memberof ReservationDynamic
     */
    stay_patterns?: StayPattern
}
/**
 * 
 * @export
 * @interface ReservationIdCancelBody
 */
export class ReservationIdCancelBody {
    /**
     * 
     * @type {ReservationCancel}
     * @memberof ReservationIdCancelBody
     */
    reservation_cancel?: ReservationCancel
}
/**
 * 予約一覧の情報
 * @export
 * @interface ReservationListItem
 */
export class ReservationListItem {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof ReservationListItem
     */
    date_range_start_min?: string
    /**
     * クラブコード
     * @type {string}
     * @memberof ReservationListItem
     */
    hotel_code?: string
    /**
     * 
     * @type {ReservationStatusId}
     * @memberof ReservationListItem
     */
    reservation_status_id?: ReservationStatusId
    /**
     * 利用代表者
     * @type {string}
     * @memberof ReservationListItem
     */
    main_guest_name?: string
    /**
     * 利用代表者(カナ)
     * @type {string}
     * @memberof ReservationListItem
     */
    main_guest_name_alias?: string
    /**
     * 泊数
     * @type {number}
     * @memberof ReservationListItem
     */
    nights_count?: number
    /**
     * 人数
     * @type {number}
     * @memberof ReservationListItem
     */
    person_count?: number
    /**
     * 備考
     * @type {string}
     * @memberof ReservationListItem
     */
    remarks?: string
    /**
     * 予約経路
     * @type {string}
     * @memberof ReservationListItem
     */
    reservation_channel_name?: string
    /**
     * 
     * @type {ReservationClassId}
     * @memberof ReservationListItem
     */
    reservation_class_id?: ReservationClassId
    /**
     * レストラン
     * @type {boolean}
     * @memberof ReservationListItem
     */
    with_meal?: boolean
    /**
     * プラン
     * @type {boolean}
     * @memberof ReservationListItem
     */
    with_sales_item_set?: boolean
}
/**
 * ReservationStatic
 * @export
 * @interface ReservationStatic
 */
export class ReservationStatic {
    /**
     * 
     * @type {string}
     * @memberof ReservationStatic
     */
    reservation_id?: string
    /**
     * ホテルコード(2桁) + 自動採番(8桁)
     * @type {string}
     * @memberof ReservationStatic
     */
    reservation_number?: string
}
/**
 * * `Confirmed` - 確定状態  * `KeepInventory` - 部屋のみ押さえた状態  * `Tentative` - 仮予約状態  * `Waiting` - キャンセル待ち状態 
 * @export
 * @enum {string}
 */

export const ReservationStatusId = {
    Confirmed: 'Confirmed',
    KeepInventory: 'KeepInventory',
    Tentative: 'Tentative',
    Waiting: 'Waiting'
} as const;

export type ReservationStatusId = typeof ReservationStatusId[keyof typeof ReservationStatusId];


/**
 * 
 * @export
 * @interface RoomInventory
 */
export class RoomInventory {
    /**
     * 在庫数
     * @type {number}
     * @memberof RoomInventory
     */
    availability?: number
    /**
     * 日付(Date)
     * @type {string}
     * @memberof RoomInventory
     */
    date?: string
    /**
     * ルーム在庫アイテムID
     * @type {string}
     * @memberof RoomInventory
     */
    item_id?: string
    /**
     * ルーム在庫アイテム名称
     * @type {string}
     * @memberof RoomInventory
     */
    item_name?: string
    /**
     * 
     * @type {RoomInventoryPolicy}
     * @memberof RoomInventory
     */
    policy?: RoomInventoryPolicy
    /**
     * 故障部屋数
     * @type {number}
     * @memberof RoomInventory
     */
    out_of_order?: number
    /**
     * ルームタイプID
     * @type {string}
     * @memberof RoomInventory
     */
    room_type_id?: string
    /**
     * ルームタイプ名称
     * @type {string}
     * @memberof RoomInventory
     */
    room_type_name?: string
    /**
     * 販売数
     * @type {number}
     * @memberof RoomInventory
     */
    sold?: number
    /**
     * 仮予約数
     * @type {number}
     * @memberof RoomInventory
     */
    tentative?: number
    /**
     * 
     * @type {RoomInventoryTypeId}
     * @memberof RoomInventory
     */
    type_id?: RoomInventoryTypeId
    /**
     * キャンセル待ち数
     * @type {number}
     * @memberof RoomInventory
     */
    waiting?: number
}
/**
 * 残室状況カレンダー
 * @export
 * @interface RoomInventoryCalendar
 */
export class RoomInventoryCalendar {
    /**
     * 
     * @type {Array<RoomInventoryCalenderDate>}
     * @memberof RoomInventoryCalendar
     */
    dates?: Array<RoomInventoryCalenderDate>
    /**
     * 
     * @type {Array<RoomInventoryCalendarItemTypeHotel>}
     * @memberof RoomInventoryCalendar
     */
    item_type_hotels?: Array<RoomInventoryCalendarItemTypeHotel>
}
/**
 * ホテル毎の残数状況の情報
 * @export
 * @interface RoomInventoryCalendarItemTypeHotel
 */
export class RoomInventoryCalendarItemTypeHotel {
    /**
     * 
     * @type {Array<RoomInventoryCalendarItemTypeHotelDate>}
     * @memberof RoomInventoryCalendarItemTypeHotel
     */
    dates?: Array<RoomInventoryCalendarItemTypeHotelDate>
    /**
     * TAPホテル
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotel
     */
    hotel?: string
    /**
     * 在庫名称
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotel
     */
    item_type_name?: string
    /**
     * 
     * @type {Array<RoomInventoryCalendarItemTypeHotelRoomType>}
     * @memberof RoomInventoryCalendarItemTypeHotel
     */
    room_types?: Array<RoomInventoryCalendarItemTypeHotelRoomType>
    /**
     * ホテルの部屋数の合計値
     * @type {number}
     * @memberof RoomInventoryCalendarItemTypeHotel
     */
    rooms_count_at_date_range_start?: number
}
/**
 * ホテルの日付毎の部屋の残数合計情報
 * @export
 * @interface RoomInventoryCalendarItemTypeHotelDate
 */
export class RoomInventoryCalendarItemTypeHotelDate {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotelDate
     */
    date?: string
    /**
     * 日付毎の部屋の残数の合計値
     * @type {number}
     * @memberof RoomInventoryCalendarItemTypeHotelDate
     */
    availability?: number
}
/**
 * ホテルのルームタイプ毎の残数情報
 * @export
 * @interface RoomInventoryCalendarItemTypeHotelRoomType
 */
export class RoomInventoryCalendarItemTypeHotelRoomType {
    /**
     * 
     * @type {Array<RoomInventoryCalendarItemTypeHotelRoomTypeDate>}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomType
     */
    dates?: Array<RoomInventoryCalendarItemTypeHotelRoomTypeDate>
    /**
     * 利用人数
     * @type {number}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomType
     */
    guest_count_standard?: number
    /**
     * ルームタイプID
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomType
     */
    room_type_id?: string
    /**
     * ルームタイプ名
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomType
     */
    room_type_name?: string
    /**
     * ルームタイプの部屋数
     * @type {number}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomType
     */
    rooms_count_at_date_range_start?: number
}
/**
 * ルームタイプ毎の残数情報
 * @export
 * @interface RoomInventoryCalendarItemTypeHotelRoomTypeDate
 */
export class RoomInventoryCalendarItemTypeHotelRoomTypeDate {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomTypeDate
     */
    date?: string
    /**
     * ルームタイプの残数
     * @type {number}
     * @memberof RoomInventoryCalendarItemTypeHotelRoomTypeDate
     */
    availability?: number
}
/**
 * 曜日ごとの情報（祝日や休館日等）
 * @export
 * @interface RoomInventoryCalenderDate
 */
export class RoomInventoryCalenderDate {
    /**
     * 日付(Date)
     * @type {string}
     * @memberof RoomInventoryCalenderDate
     */
    date?: string
    /**
     * 
     * @type {boolean}
     * @memberof RoomInventoryCalenderDate
     */
    is_holiday?: boolean
}
/**
 * 
 * @export
 * @interface RoomInventoryPolicy
 */
export class RoomInventoryPolicy {
    /**
     * 売止
     * @type {boolean}
     * @memberof RoomInventoryPolicy
     */
    is_closed?: boolean
    /**
     * 売止指示数
     * @type {number}
     * @memberof RoomInventoryPolicy
     */
    target_availability?: number
}
/**
 * ルーム在庫タイプ
 * @export
 * @enum {string}
 */

export const RoomInventoryTypeId = {
    Base: 'Base',
    Share: 'Share',
    Block: 'Block',
    Waiting: 'Waiting',
    OutOfOrder: 'OutOfOrder',
    Tentative: 'Tentative'
} as const;

export type RoomInventoryTypeId = typeof RoomInventoryTypeId[keyof typeof RoomInventoryTypeId];


/**
 * Model for a room type
 * @export
 * @interface RoomType
 */
export class RoomType {
    /**
     * 
     * @type {string}
     * @memberof RoomType
     */
    room_type_id?: string
    /**
     * 最大利用人数
     * @type {number}
     * @memberof RoomType
     */
    guest_count_max?: number
    /**
     * 標準利用人数
     * @type {number}
     * @memberof RoomType
     */
    guest_count_standard?: number
    /**
     * 
     * @type {boolean}
     * @memberof RoomType
     */
    is_active?: boolean
    /**
     * 名前
     * @type {string}
     * @memberof RoomType
     */
    name?: string
    /**
     * 別名
     * @type {string}
     * @memberof RoomType
     */
    name_alias?: string
    /**
     * 略称
     * @type {string}
     * @memberof RoomType
     */
    name_short?: string
    /**
     * 
     * @type {string}
     * @memberof RoomType
     */
    room_type_group_id?: string
    /**
     * 
     * @type {number}
     * @memberof RoomType
     */
    sequence?: number
}
/**
 * 
 * @export
 * @interface SalesItemSetListItem
 */
export class SalesItemSetListItem {
    /**
     * 商品ID
     * @type {string}
     * @memberof SalesItemSetListItem
     */
    sales_item_id?: string
    /**
     * プランコード
     * @type {string}
     * @memberof SalesItemSetListItem
     */
    code?: string
    /**
     * 名前
     * @type {string}
     * @memberof SalesItemSetListItem
     */
    name?: string
    /**
     * 内容
     * @type {string}
     * @memberof SalesItemSetListItem
     */
    description?: string
    /**
     * 
     * @type {DateRange}
     * @memberof SalesItemSetListItem
     */
    use_date_range?: DateRange
    /**
     * 
     * @type {DateRange}
     * @memberof SalesItemSetListItem
     */
    sales_date_range?: DateRange
    /**
     * 最低利用人数
     * @type {number}
     * @memberof SalesItemSetListItem
     */
    person_count_min?: number
    /**
     * 最大利用人数
     * @type {number}
     * @memberof SalesItemSetListItem
     */
    person_count_max?: number
}
/**
 * 
 * @export
 * @interface Stay
 */
export class Stay {
    /**
     * 
     * @type {Array<StayGuest>}
     * @memberof Stay
     */
    guests?: Array<StayGuest>
    /**
     * 
     * @type {Array<StayProvision>}
     * @memberof Stay
     */
    provisions?: Array<StayProvision>
    /**
     * 
     * @type {string}
     * @memberof Stay
     */
    stay_id?: string
    /**
     * 
     * @type {number}
     * @memberof Stay
     */
    sequence?: number
}
/**
 * ゲスト情報
 * @export
 * @interface StayGuest
 */
export class StayGuest {
    /**
     * ゲストの顧客ID
     * @type {string}
     * @memberof StayGuest
     */
    customer_id?: string
    /**
     * ゲストID
     * @type {string}
     * @memberof StayGuest
     */
    stay_guest_id?: string
    /**
     * 
     * @type {StayGuestTypeId}
     * @memberof StayGuest
     */
    stay_guest_type_id?: StayGuestTypeId
    /**
     * 
     * @type {number}
     * @memberof StayGuest
     */
    sequence?: number
}
/**
 * * `MainGuest` - 利用代表者 * `ReservationGuest` -  予約者 * `RoomGuest` - 宿泊利用者 
 * @export
 * @enum {string}
 */

export const StayGuestTypeId = {
    MainGuest: 'MainGuest',
    ReservationGuest: 'ReservationGuest',
    RoomGuest: 'RoomGuest'
} as const;

export type StayGuestTypeId = typeof StayGuestTypeId[keyof typeof StayGuestTypeId];


/**
 * 滞在パターン
 * @export
 * @interface StayPattern
 */
export class StayPattern {
    /**
     * 泊数
     * @type {number}
     * @memberof StayPattern
     */
    nights_count: number
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    room_type_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    room_type_name?: string
    /**
     * 部屋数
     * @type {number}
     * @memberof StayPattern
     */
    rooms_count: number
    /**
     * 
     * @type {number}
     * @memberof StayPattern
     */
    sequence: number
    /**
     * 日付(Date)
     * @type {string}
     * @memberof StayPattern
     */
    stay_date_range_end?: string
    /**
     * 日付(Date)
     * @type {string}
     * @memberof StayPattern
     */
    stay_date_range_start: string
    /**
     * 
     * @type {string}
     * @memberof StayPattern
     */
    stay_pattern_id?: string
    /**
     * 
     * @type {Array<Stay>}
     * @memberof StayPattern
     */
    stays?: Array<Stay>
}
/**
 * 
 * @export
 * @interface StayProvision
 */
export class StayProvision {
    /**
     * 
     * @type {StayProvisionCondition}
     * @memberof StayProvision
     */
    condition?: StayProvisionCondition
    /**
     * 
     * @type {DateRange}
     * @memberof StayProvision
     */
    date_range?: DateRange
    /**
     * 在庫をもっている場合は手配品であればtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    has_inventory?: boolean
    /**
     * 予約期間と同じ期間手配する場合はtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    is_same_as_stay_date_range?: boolean
    /**
     * 全泊手配する場合はtrue
     * @type {boolean}
     * @memberof StayProvision
     */
    is_each_day?: boolean
    /**
     * 手配品ID
     * @type {string}
     * @memberof StayProvision
     */
    provision_item_id?: string
    /**
     * 手配品数量
     * @type {number}
     * @memberof StayProvision
     */
    quantity?: number
    /**
     * 
     * @type {number}
     * @memberof StayProvision
     */
    sequence?: number
    /**
     * 
     * @type {StayProvisionReasonId}
     * @memberof StayProvision
     */
    stay_provision_reason_id?: StayProvisionReasonId
}
/**
 * 
 * @export
 * @interface StayProvisionCondition
 */
export class StayProvisionCondition {
    /**
     * 商品ID　商品の中に手配品がある場合セットされる
     * @type {string}
     * @memberof StayProvisionCondition
     */
    sales_item_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_range_condition_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_id?: string
    /**
     * 
     * @type {string}
     * @memberof StayProvisionCondition
     */
    stay_pattern_range_id?: string
}
/**
 * * `SpecialRequest` - 追加手配品 * `StayConditionSalesItemSet` - パッケージに含まれている手配品 
 * @export
 * @enum {string}
 */

export const StayProvisionReasonId = {
    SpecialRequest: 'SpecialRequest',
    StayConditionSalesItemSet: 'StayConditionSalesItemSet'
} as const;

export type StayProvisionReasonId = typeof StayProvisionReasonId[keyof typeof StayProvisionReasonId];


/**
 * 
 * @export
 * @interface UpdateReservationRequest
 */
export class UpdateReservationRequest {
    /**
     * 
     * @type {Reservation}
     * @memberof UpdateReservationRequest
     */
    reservation?: Reservation
}
/**
 * 
 * @export
 * @interface UpdateReservationResponse
 */
export class UpdateReservationResponse {
    /**
     * 
     * @type {ApiCommonResponseRequest}
     * @memberof UpdateReservationResponse
     */
    request?: ApiCommonResponseRequest
    /**
     * RequestId
     * @type {string}
     * @memberof UpdateReservationResponse
     */
    request_id?: string
    /**
     * 
     * @type {Reservation}
     * @memberof UpdateReservationResponse
     */
    reservation?: Reservation
}

/**
 * ExtraServiceItemGroupsApi - axios parameter creator
 * @export
 */
export const ExtraServiceItemGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 付帯サービスグループ一覧取得
         * @summary 付帯サービスグループ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExtraServiceItemGroups: async (hotelId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listExtraServiceItemGroups', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/extra-service-groups`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtraServiceItemGroupsApi - functional programming interface
 * @export
 */
export const ExtraServiceItemGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExtraServiceItemGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 付帯サービスグループ一覧取得
         * @summary 付帯サービスグループ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExtraServiceItemGroups(hotelId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListExtraServiceItemGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExtraServiceItemGroups(hotelId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExtraServiceItemGroupsApi - factory interface
 * @export
 */
export const ExtraServiceItemGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExtraServiceItemGroupsApiFp(configuration)
    return {
        /**
         * 付帯サービスグループ一覧取得
         * @summary 付帯サービスグループ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExtraServiceItemGroups(hotelId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListExtraServiceItemGroupsResponse> {
            return localVarFp.listExtraServiceItemGroups(hotelId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listExtraServiceItemGroups operation in ExtraServiceItemGroupsApi.
 * @export
 * @interface ExtraServiceItemGroupsApiListExtraServiceItemGroupsRequest
 */
export class ExtraServiceItemGroupsApiListExtraServiceItemGroupsRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ExtraServiceItemGroupsApiListExtraServiceItemGroups
     */
    hotelId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof ExtraServiceItemGroupsApiListExtraServiceItemGroups
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof ExtraServiceItemGroupsApiListExtraServiceItemGroups
     */
    limit?: number
}

/**
 * ExtraServiceItemGroupsApi - object-oriented interface
 * @export
 * @class ExtraServiceItemGroupsApi
 * @extends {BaseAPI}
 */
export class ExtraServiceItemGroupsApi extends BaseAPI {
    /**
     * 付帯サービスグループ一覧取得
     * @summary 付帯サービスグループ一覧取得
     * @param {ExtraServiceItemGroupsApiListExtraServiceItemGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtraServiceItemGroupsApi
     */
    public listExtraServiceItemGroups(requestParameters: ExtraServiceItemGroupsApiListExtraServiceItemGroupsRequest, options?: AxiosRequestConfig) {
        return ExtraServiceItemGroupsApiFp(this.configuration).listExtraServiceItemGroups(requestParameters.hotelId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MealPlacesApi - axios parameter creator
 * @export
 */
export const MealPlacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Meal Places
         * @summary Meal Places
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMealPlaces: async (hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listMealPlaces', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/meal-places`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealPlacesApi - functional programming interface
 * @export
 */
export const MealPlacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealPlacesApiAxiosParamCreator(configuration)
    return {
        /**
         * Meal Places
         * @summary Meal Places
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMealPlaces(hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealPlacesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMealPlaces(hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealPlacesApi - factory interface
 * @export
 */
export const MealPlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealPlacesApiFp(configuration)
    return {
        /**
         * Meal Places
         * @summary Meal Places
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMealPlaces(hotelId: string, options?: any): AxiosPromise<ListMealPlacesResponse> {
            return localVarFp.listMealPlaces(hotelId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMealPlaces operation in MealPlacesApi.
 * @export
 * @interface MealPlacesApiListMealPlacesRequest
 */
export class MealPlacesApiListMealPlacesRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof MealPlacesApiListMealPlaces
     */
    hotelId: string
}

/**
 * MealPlacesApi - object-oriented interface
 * @export
 * @class MealPlacesApi
 * @extends {BaseAPI}
 */
export class MealPlacesApi extends BaseAPI {
    /**
     * Meal Places
     * @summary Meal Places
     * @param {MealPlacesApiListMealPlacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealPlacesApi
     */
    public listMealPlaces(requestParameters: MealPlacesApiListMealPlacesRequest, options?: AxiosRequestConfig) {
        return MealPlacesApiFp(this.configuration).listMealPlaces(requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisionItemsApi - axios parameter creator
 * @export
 */
export const ProvisionItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 手配品一覧取得
         * @summary 手配品一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {string} [dateRangeEnd] 終了日
         * @param {string} [dateRangeStart] 開始日
         * @param {boolean} [withInventory] 在庫ありで結果を返すか
         * @param {boolean} [isProvisionHasInventory] 備品の場合はtrue
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] 名前
         * @param {string} [provisionItemId] 手配品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProvisionItems: async (hotelId: string, cursor?: string, dateRangeEnd?: string, dateRangeStart?: string, withInventory?: boolean, isProvisionHasInventory?: boolean, limit?: number, name?: string, provisionItemId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listProvisionItems', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/provision-items`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (dateRangeEnd !== undefined) {
                localVarQueryParameter['date_range_end'] = dateRangeEnd;
            }

            if (dateRangeStart !== undefined) {
                localVarQueryParameter['date_range_start'] = dateRangeStart;
            }

            if (withInventory !== undefined) {
                localVarQueryParameter['with_inventory'] = withInventory;
            }

            if (isProvisionHasInventory !== undefined) {
                localVarQueryParameter['is_provision_has_inventory'] = isProvisionHasInventory;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (provisionItemId !== undefined) {
                localVarQueryParameter['provision_item_id'] = provisionItemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisionItemsApi - functional programming interface
 * @export
 */
export const ProvisionItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisionItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 手配品一覧取得
         * @summary 手配品一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {string} [dateRangeEnd] 終了日
         * @param {string} [dateRangeStart] 開始日
         * @param {boolean} [withInventory] 在庫ありで結果を返すか
         * @param {boolean} [isProvisionHasInventory] 備品の場合はtrue
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] 名前
         * @param {string} [provisionItemId] 手配品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProvisionItems(hotelId: string, cursor?: string, dateRangeEnd?: string, dateRangeStart?: string, withInventory?: boolean, isProvisionHasInventory?: boolean, limit?: number, name?: string, provisionItemId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProvisionItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProvisionItems(hotelId, cursor, dateRangeEnd, dateRangeStart, withInventory, isProvisionHasInventory, limit, name, provisionItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisionItemsApi - factory interface
 * @export
 */
export const ProvisionItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisionItemsApiFp(configuration)
    return {
        /**
         * 手配品一覧取得
         * @summary 手配品一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {string} [dateRangeEnd] 終了日
         * @param {string} [dateRangeStart] 開始日
         * @param {boolean} [withInventory] 在庫ありで結果を返すか
         * @param {boolean} [isProvisionHasInventory] 備品の場合はtrue
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [name] 名前
         * @param {string} [provisionItemId] 手配品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProvisionItems(hotelId: string, cursor?: string, dateRangeEnd?: string, dateRangeStart?: string, withInventory?: boolean, isProvisionHasInventory?: boolean, limit?: number, name?: string, provisionItemId?: string, options?: any): AxiosPromise<ListProvisionItemsResponse> {
            return localVarFp.listProvisionItems(hotelId, cursor, dateRangeEnd, dateRangeStart, withInventory, isProvisionHasInventory, limit, name, provisionItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listProvisionItems operation in ProvisionItemsApi.
 * @export
 * @interface ProvisionItemsApiListProvisionItemsRequest
 */
export class ProvisionItemsApiListProvisionItemsRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    hotelId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    cursor?: string

    /**
     * 終了日
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    dateRangeEnd?: string

    /**
     * 開始日
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    dateRangeStart?: string

    /**
     * 在庫ありで結果を返すか
     * @type {boolean}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    withInventory?: boolean

    /**
     * 備品の場合はtrue
     * @type {boolean}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    isProvisionHasInventory?: boolean

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    limit?: number

    /**
     * 名前
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    name?: string

    /**
     * 手配品ID
     * @type {string}
     * @memberof ProvisionItemsApiListProvisionItems
     */
    provisionItemId?: string
}

/**
 * ProvisionItemsApi - object-oriented interface
 * @export
 * @class ProvisionItemsApi
 * @extends {BaseAPI}
 */
export class ProvisionItemsApi extends BaseAPI {
    /**
     * 手配品一覧取得
     * @summary 手配品一覧取得
     * @param {ProvisionItemsApiListProvisionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionItemsApi
     */
    public listProvisionItems(requestParameters: ProvisionItemsApiListProvisionItemsRequest, options?: AxiosRequestConfig) {
        return ProvisionItemsApiFp(this.configuration).listProvisionItems(requestParameters.hotelId, requestParameters.cursor, requestParameters.dateRangeEnd, requestParameters.dateRangeStart, requestParameters.withInventory, requestParameters.isProvisionHasInventory, requestParameters.limit, requestParameters.name, requestParameters.provisionItemId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReservationCancelReasonsApi - axios parameter creator
 * @export
 */
export const ReservationCancelReasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 予約キャンセル理由一覧取得
         * @summary 予約キャンセル理由一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservationCancelReasons: async (hotelId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listReservationCancelReasons', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/reservation-cancel-reasons`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationCancelReasonsApi - functional programming interface
 * @export
 */
export const ReservationCancelReasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationCancelReasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 予約キャンセル理由一覧取得
         * @summary 予約キャンセル理由一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReservationCancelReasons(hotelId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReservationCancelReasonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReservationCancelReasons(hotelId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReservationCancelReasonsApi - factory interface
 * @export
 */
export const ReservationCancelReasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationCancelReasonsApiFp(configuration)
    return {
        /**
         * 予約キャンセル理由一覧取得
         * @summary 予約キャンセル理由一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservationCancelReasons(hotelId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListReservationCancelReasonsResponse> {
            return localVarFp.listReservationCancelReasons(hotelId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listReservationCancelReasons operation in ReservationCancelReasonsApi.
 * @export
 * @interface ReservationCancelReasonsApiListReservationCancelReasonsRequest
 */
export class ReservationCancelReasonsApiListReservationCancelReasonsRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationCancelReasonsApiListReservationCancelReasons
     */
    hotelId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof ReservationCancelReasonsApiListReservationCancelReasons
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof ReservationCancelReasonsApiListReservationCancelReasons
     */
    limit?: number
}

/**
 * ReservationCancelReasonsApi - object-oriented interface
 * @export
 * @class ReservationCancelReasonsApi
 * @extends {BaseAPI}
 */
export class ReservationCancelReasonsApi extends BaseAPI {
    /**
     * 予約キャンセル理由一覧取得
     * @summary 予約キャンセル理由一覧取得
     * @param {ReservationCancelReasonsApiListReservationCancelReasonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationCancelReasonsApi
     */
    public listReservationCancelReasons(requestParameters: ReservationCancelReasonsApiListReservationCancelReasonsRequest, options?: AxiosRequestConfig) {
        return ReservationCancelReasonsApiFp(this.configuration).listReservationCancelReasons(requestParameters.hotelId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReservationsApi - axios parameter creator
 * @export
 */
export const ReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新規予約作成
         * @summary 新規予約作成
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateReservationRequest} [createReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (hotelId: string, createReservationRequest?: CreateReservationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('createReservation', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/reservations`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 予約キャンセル
         * @summary 予約キャンセル
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {ReservationIdCancelBody} [reservationIdCancelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservationCancel: async (hotelId: string, reservationId: string, reservationIdCancelBody?: ReservationIdCancelBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('createReservationCancel', 'hotelId', hotelId)
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('createReservationCancel', 'reservationId', reservationId)
            const localVarPath = `/hotels/{hotel_id}/reservations/{reservation_id}/cancel`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)))
                .replace(`{${"reservation_id"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationIdCancelBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 予約取得
         * @summary 予約取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservation: async (hotelId: string, reservationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('getReservation', 'hotelId', hotelId)
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('getReservation', 'reservationId', reservationId)
            const localVarPath = `/hotels/{hotel_id}/reservations/{reservation_id}`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)))
                .replace(`{${"reservation_id"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 顧客アカウントの予約一覧取得
         * @summary 顧客アカウントの予約一覧取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerAccountReservations: async (accountId: string, customerAccountId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listCustomerAccountReservations', 'accountId', accountId)
            // verify required parameter 'customerAccountId' is not null or undefined
            assertParamExists('listCustomerAccountReservations', 'customerAccountId', customerAccountId)
            const localVarPath = `/accounts/{account_id}/customer-accounts/{customer_account_id}/reservations`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"customer_account_id"}}`, encodeURIComponent(String(customerAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 予約一覧取得
         * @summary 予約一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations: async (hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listReservations', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/reservations`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 予約更新
         * @summary 予約更新
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {UpdateReservationRequest} [updateReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (hotelId: string, reservationId: string, updateReservationRequest?: UpdateReservationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('updateReservation', 'hotelId', hotelId)
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation', 'reservationId', reservationId)
            const localVarPath = `/hotels/{hotel_id}/reservations/{reservation_id}`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)))
                .replace(`{${"reservation_id"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 新規予約作成
         * @summary 新規予約作成
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateReservationRequest} [createReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(hotelId: string, createReservationRequest?: CreateReservationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(hotelId, createReservationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 予約キャンセル
         * @summary 予約キャンセル
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {ReservationIdCancelBody} [reservationIdCancelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservationCancel(hotelId: string, reservationId: string, reservationIdCancelBody?: ReservationIdCancelBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReservationCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservationCancel(hotelId, reservationId, reservationIdCancelBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 予約取得
         * @summary 予約取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservation(hotelId: string, reservationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservation(hotelId, reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 顧客アカウントの予約一覧取得
         * @summary 顧客アカウントの予約一覧取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerAccountReservations(accountId: string, customerAccountId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerAccountReservationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerAccountReservations(accountId, customerAccountId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 予約一覧取得
         * @summary 予約一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReservations(hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReservationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReservations(hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 予約更新
         * @summary 予約更新
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {UpdateReservationRequest} [updateReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(hotelId: string, reservationId: string, updateReservationRequest?: UpdateReservationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(hotelId, reservationId, updateReservationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationsApiFp(configuration)
    return {
        /**
         * 新規予約作成
         * @summary 新規予約作成
         * @param {string} hotelId facility id for the given hotel
         * @param {CreateReservationRequest} [createReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(hotelId: string, createReservationRequest?: CreateReservationRequest, options?: any): AxiosPromise<CreateReservationResponse> {
            return localVarFp.createReservation(hotelId, createReservationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 予約キャンセル
         * @summary 予約キャンセル
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {ReservationIdCancelBody} [reservationIdCancelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservationCancel(hotelId: string, reservationId: string, reservationIdCancelBody?: ReservationIdCancelBody, options?: any): AxiosPromise<CreateReservationCancelResponse> {
            return localVarFp.createReservationCancel(hotelId, reservationId, reservationIdCancelBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 予約取得
         * @summary 予約取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservation(hotelId: string, reservationId: string, options?: any): AxiosPromise<GetReservationResponse> {
            return localVarFp.getReservation(hotelId, reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 顧客アカウントの予約一覧取得
         * @summary 顧客アカウントの予約一覧取得
         * @param {string} accountId 
         * @param {string} customerAccountId 
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerAccountReservations(accountId: string, customerAccountId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListCustomerAccountReservationsResponse> {
            return localVarFp.listCustomerAccountReservations(accountId, customerAccountId, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 予約一覧取得
         * @summary 予約一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations(hotelId: string, options?: any): AxiosPromise<ListReservationsResponse> {
            return localVarFp.listReservations(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 予約更新
         * @summary 予約更新
         * @param {string} hotelId facility id for the given hotel
         * @param {string} reservationId unique id for reservation
         * @param {UpdateReservationRequest} [updateReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(hotelId: string, reservationId: string, updateReservationRequest?: UpdateReservationRequest, options?: any): AxiosPromise<UpdateReservationResponse> {
            return localVarFp.updateReservation(hotelId, reservationId, updateReservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiCreateReservationRequest
 */
export class ReservationsApiCreateReservationRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationsApiCreateReservation
     */
    hotelId: string

    /**
     * 
     * @type {CreateReservationRequest}
     * @memberof ReservationsApiCreateReservation
     */
    createReservationRequest?: CreateReservationRequest
}

/**
 * Request parameters for createReservationCancel operation in ReservationsApi.
 * @export
 * @interface ReservationsApiCreateReservationCancelRequest
 */
export class ReservationsApiCreateReservationCancelRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationsApiCreateReservationCancel
     */
    hotelId: string

    /**
     * unique id for reservation
     * @type {string}
     * @memberof ReservationsApiCreateReservationCancel
     */
    reservationId: string

    /**
     * 
     * @type {ReservationIdCancelBody}
     * @memberof ReservationsApiCreateReservationCancel
     */
    reservationIdCancelBody?: ReservationIdCancelBody
}

/**
 * Request parameters for getReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiGetReservationRequest
 */
export class ReservationsApiGetReservationRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationsApiGetReservation
     */
    hotelId: string

    /**
     * unique id for reservation
     * @type {string}
     * @memberof ReservationsApiGetReservation
     */
    reservationId: string
}

/**
 * Request parameters for listCustomerAccountReservations operation in ReservationsApi.
 * @export
 * @interface ReservationsApiListCustomerAccountReservationsRequest
 */
export class ReservationsApiListCustomerAccountReservationsRequest {
    /**
     * 
     * @type {string}
     * @memberof ReservationsApiListCustomerAccountReservations
     */
    accountId: string

    /**
     * 
     * @type {string}
     * @memberof ReservationsApiListCustomerAccountReservations
     */
    customerAccountId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof ReservationsApiListCustomerAccountReservations
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof ReservationsApiListCustomerAccountReservations
     */
    limit?: number
}

/**
 * Request parameters for listReservations operation in ReservationsApi.
 * @export
 * @interface ReservationsApiListReservationsRequest
 */
export class ReservationsApiListReservationsRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationsApiListReservations
     */
    hotelId: string
}

/**
 * Request parameters for updateReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiUpdateReservationRequest
 */
export class ReservationsApiUpdateReservationRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof ReservationsApiUpdateReservation
     */
    hotelId: string

    /**
     * unique id for reservation
     * @type {string}
     * @memberof ReservationsApiUpdateReservation
     */
    reservationId: string

    /**
     * 
     * @type {UpdateReservationRequest}
     * @memberof ReservationsApiUpdateReservation
     */
    updateReservationRequest?: UpdateReservationRequest
}

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * 新規予約作成
     * @summary 新規予約作成
     * @param {ReservationsApiCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public createReservation(requestParameters: ReservationsApiCreateReservationRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).createReservation(requestParameters.hotelId, requestParameters.createReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 予約キャンセル
     * @summary 予約キャンセル
     * @param {ReservationsApiCreateReservationCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public createReservationCancel(requestParameters: ReservationsApiCreateReservationCancelRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).createReservationCancel(requestParameters.hotelId, requestParameters.reservationId, requestParameters.reservationIdCancelBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 予約取得
     * @summary 予約取得
     * @param {ReservationsApiGetReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public getReservation(requestParameters: ReservationsApiGetReservationRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).getReservation(requestParameters.hotelId, requestParameters.reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 顧客アカウントの予約一覧取得
     * @summary 顧客アカウントの予約一覧取得
     * @param {ReservationsApiListCustomerAccountReservationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public listCustomerAccountReservations(requestParameters: ReservationsApiListCustomerAccountReservationsRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).listCustomerAccountReservations(requestParameters.accountId, requestParameters.customerAccountId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 予約一覧取得
     * @summary 予約一覧取得
     * @param {ReservationsApiListReservationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public listReservations(requestParameters: ReservationsApiListReservationsRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).listReservations(requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 予約更新
     * @summary 予約更新
     * @param {ReservationsApiUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public updateReservation(requestParameters: ReservationsApiUpdateReservationRequest, options?: AxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).updateReservation(requestParameters.hotelId, requestParameters.reservationId, requestParameters.updateReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomInventoriesApi - axios parameter creator
 * @export
 */
export const RoomInventoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 部屋残数一覧取得
         * @summary 部屋残数一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomInventories: async (hotelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listRoomInventories', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/room-inventories`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 部屋残数カレンダー一覧取得
         * @summary 部屋残数カレンダー一覧取得
         * @param {string} accountId 
         * @param {string} dateRangeStart 開始日
         * @param {Array<DayOfWeek>} [dayOfWeeks] 
         * @param {string} [hotelId] ホテルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomInventoryCalendars: async (accountId: string, dateRangeStart: string, dayOfWeeks?: Array<DayOfWeek>, hotelId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listRoomInventoryCalendars', 'accountId', accountId)
            // verify required parameter 'dateRangeStart' is not null or undefined
            assertParamExists('listRoomInventoryCalendars', 'dateRangeStart', dateRangeStart)
            const localVarPath = `/accounts/{account_id}/room-inventory-calendars`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (dateRangeStart !== undefined) {
                localVarQueryParameter['date_range_start'] = dateRangeStart;
            }

            if (dayOfWeeks) {
                localVarQueryParameter['day_of_weeks'] = dayOfWeeks;
            }

            if (hotelId !== undefined) {
                localVarQueryParameter['hotel_id'] = hotelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomInventoriesApi - functional programming interface
 * @export
 */
export const RoomInventoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomInventoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 部屋残数一覧取得
         * @summary 部屋残数一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoomInventories(hotelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRoomInventoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoomInventories(hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 部屋残数カレンダー一覧取得
         * @summary 部屋残数カレンダー一覧取得
         * @param {string} accountId 
         * @param {string} dateRangeStart 開始日
         * @param {Array<DayOfWeek>} [dayOfWeeks] 
         * @param {string} [hotelId] ホテルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoomInventoryCalendars(accountId: string, dateRangeStart: string, dayOfWeeks?: Array<DayOfWeek>, hotelId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRoomInventoryCalendarsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoomInventoryCalendars(accountId, dateRangeStart, dayOfWeeks, hotelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomInventoriesApi - factory interface
 * @export
 */
export const RoomInventoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomInventoriesApiFp(configuration)
    return {
        /**
         * 部屋残数一覧取得
         * @summary 部屋残数一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomInventories(hotelId: string, options?: any): AxiosPromise<ListRoomInventoriesResponse> {
            return localVarFp.listRoomInventories(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 部屋残数カレンダー一覧取得
         * @summary 部屋残数カレンダー一覧取得
         * @param {string} accountId 
         * @param {string} dateRangeStart 開始日
         * @param {Array<DayOfWeek>} [dayOfWeeks] 
         * @param {string} [hotelId] ホテルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomInventoryCalendars(accountId: string, dateRangeStart: string, dayOfWeeks?: Array<DayOfWeek>, hotelId?: string, options?: any): AxiosPromise<ListRoomInventoryCalendarsResponse> {
            return localVarFp.listRoomInventoryCalendars(accountId, dateRangeStart, dayOfWeeks, hotelId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listRoomInventories operation in RoomInventoriesApi.
 * @export
 * @interface RoomInventoriesApiListRoomInventoriesRequest
 */
export class RoomInventoriesApiListRoomInventoriesRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof RoomInventoriesApiListRoomInventories
     */
    hotelId: string
}

/**
 * Request parameters for listRoomInventoryCalendars operation in RoomInventoriesApi.
 * @export
 * @interface RoomInventoriesApiListRoomInventoryCalendarsRequest
 */
export class RoomInventoriesApiListRoomInventoryCalendarsRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomInventoriesApiListRoomInventoryCalendars
     */
    accountId: string

    /**
     * 開始日
     * @type {string}
     * @memberof RoomInventoriesApiListRoomInventoryCalendars
     */
    dateRangeStart: string

    /**
     * 
     * @type {Array<DayOfWeek>}
     * @memberof RoomInventoriesApiListRoomInventoryCalendars
     */
    dayOfWeeks?: Array<DayOfWeek>

    /**
     * ホテルID
     * @type {string}
     * @memberof RoomInventoriesApiListRoomInventoryCalendars
     */
    hotelId?: string
}

/**
 * RoomInventoriesApi - object-oriented interface
 * @export
 * @class RoomInventoriesApi
 * @extends {BaseAPI}
 */
export class RoomInventoriesApi extends BaseAPI {
    /**
     * 部屋残数一覧取得
     * @summary 部屋残数一覧取得
     * @param {RoomInventoriesApiListRoomInventoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomInventoriesApi
     */
    public listRoomInventories(requestParameters: RoomInventoriesApiListRoomInventoriesRequest, options?: AxiosRequestConfig) {
        return RoomInventoriesApiFp(this.configuration).listRoomInventories(requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 部屋残数カレンダー一覧取得
     * @summary 部屋残数カレンダー一覧取得
     * @param {RoomInventoriesApiListRoomInventoryCalendarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomInventoriesApi
     */
    public listRoomInventoryCalendars(requestParameters: RoomInventoriesApiListRoomInventoryCalendarsRequest, options?: AxiosRequestConfig) {
        return RoomInventoriesApiFp(this.configuration).listRoomInventoryCalendars(requestParameters.accountId, requestParameters.dateRangeStart, requestParameters.dayOfWeeks, requestParameters.hotelId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomTypesApi - axios parameter creator
 * @export
 */
export const RoomTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ルームタイプ一覧取得
         * @summary ルームタイプ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomTypes: async (hotelId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listRoomTypes', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/room-types`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomTypesApi - functional programming interface
 * @export
 */
export const RoomTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * ルームタイプ一覧取得
         * @summary ルームタイプ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoomTypes(hotelId: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRoomTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoomTypes(hotelId, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomTypesApi - factory interface
 * @export
 */
export const RoomTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomTypesApiFp(configuration)
    return {
        /**
         * ルームタイプ一覧取得
         * @summary ルームタイプ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoomTypes(hotelId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListRoomTypesResponse> {
            return localVarFp.listRoomTypes(hotelId, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listRoomTypes operation in RoomTypesApi.
 * @export
 * @interface RoomTypesApiListRoomTypesRequest
 */
export class RoomTypesApiListRoomTypesRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof RoomTypesApiListRoomTypes
     */
    hotelId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof RoomTypesApiListRoomTypes
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof RoomTypesApiListRoomTypes
     */
    limit?: number
}

/**
 * RoomTypesApi - object-oriented interface
 * @export
 * @class RoomTypesApi
 * @extends {BaseAPI}
 */
export class RoomTypesApi extends BaseAPI {
    /**
     * ルームタイプ一覧取得
     * @summary ルームタイプ一覧取得
     * @param {RoomTypesApiListRoomTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomTypesApi
     */
    public listRoomTypes(requestParameters: RoomTypesApiListRoomTypesRequest, options?: AxiosRequestConfig) {
        return RoomTypesApiFp(this.configuration).listRoomTypes(requestParameters.hotelId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SalesItemSetsApi - axios parameter creator
 * @export
 */
export const SalesItemSetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 検索クエリ * `code` - codeが完全一致したものだけに絞り込みます * `name_alias` - name_aliasが部分一致したものだけに絞り込みます * `use_person_count` - person_count_min以上かつperson_count_max以下のものだけに絞り込みます * `use_date` - use_date_rangeに含まれるものだけに絞り込みます 
         * @summary パッケージ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [code] コード
         * @param {string} [nameAlias] カナ名
         * @param {string} [salesItemId] 商品ID
         * @param {string} [useDate] 宿泊日
         * @param {number} [usePersonCount] 利用人数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesItemSets: async (hotelId: string, cursor?: string, limit?: number, code?: string, nameAlias?: string, salesItemId?: string, useDate?: string, usePersonCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('listSalesItemSets', 'hotelId', hotelId)
            const localVarPath = `/hotels/{hotel_id}/sales-item-sets`
                .replace(`{${"hotel_id"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)
            await setAuthorizationTokenToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (nameAlias !== undefined) {
                localVarQueryParameter['name_alias'] = nameAlias;
            }

            if (salesItemId !== undefined) {
                localVarQueryParameter['sales_item_id'] = salesItemId;
            }

            if (useDate !== undefined) {
                localVarQueryParameter['use_date'] = useDate;
            }

            if (usePersonCount !== undefined) {
                localVarQueryParameter['use_person_count'] = usePersonCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesItemSetsApi - functional programming interface
 * @export
 */
export const SalesItemSetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesItemSetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 検索クエリ * `code` - codeが完全一致したものだけに絞り込みます * `name_alias` - name_aliasが部分一致したものだけに絞り込みます * `use_person_count` - person_count_min以上かつperson_count_max以下のものだけに絞り込みます * `use_date` - use_date_rangeに含まれるものだけに絞り込みます 
         * @summary パッケージ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [code] コード
         * @param {string} [nameAlias] カナ名
         * @param {string} [salesItemId] 商品ID
         * @param {string} [useDate] 宿泊日
         * @param {number} [usePersonCount] 利用人数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesItemSets(hotelId: string, cursor?: string, limit?: number, code?: string, nameAlias?: string, salesItemId?: string, useDate?: string, usePersonCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesItemSetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesItemSets(hotelId, cursor, limit, code, nameAlias, salesItemId, useDate, usePersonCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesItemSetsApi - factory interface
 * @export
 */
export const SalesItemSetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesItemSetsApiFp(configuration)
    return {
        /**
         * 検索クエリ * `code` - codeが完全一致したものだけに絞り込みます * `name_alias` - name_aliasが部分一致したものだけに絞り込みます * `use_person_count` - person_count_min以上かつperson_count_max以下のものだけに絞り込みます * `use_date` - use_date_rangeに含まれるものだけに絞り込みます 
         * @summary パッケージ一覧取得
         * @param {string} hotelId facility id for the given hotel
         * @param {string} [cursor] Query parameter indicating the cursor position of the list to retrieve.
         * @param {number} [limit] 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
         * @param {string} [code] コード
         * @param {string} [nameAlias] カナ名
         * @param {string} [salesItemId] 商品ID
         * @param {string} [useDate] 宿泊日
         * @param {number} [usePersonCount] 利用人数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesItemSets(hotelId: string, cursor?: string, limit?: number, code?: string, nameAlias?: string, salesItemId?: string, useDate?: string, usePersonCount?: number, options?: any): AxiosPromise<ListSalesItemSetsResponse> {
            return localVarFp.listSalesItemSets(hotelId, cursor, limit, code, nameAlias, salesItemId, useDate, usePersonCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listSalesItemSets operation in SalesItemSetsApi.
 * @export
 * @interface SalesItemSetsApiListSalesItemSetsRequest
 */
export class SalesItemSetsApiListSalesItemSetsRequest {
    /**
     * facility id for the given hotel
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    hotelId: string

    /**
     * Query parameter indicating the cursor position of the list to retrieve.
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    cursor?: string

    /**
     * 取得するリストの最大数を示すクエリパラメーターです。（指定範囲 1 から100）
     * @type {number}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    limit?: number

    /**
     * コード
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    code?: string

    /**
     * カナ名
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    nameAlias?: string

    /**
     * 商品ID
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    salesItemId?: string

    /**
     * 宿泊日
     * @type {string}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    useDate?: string

    /**
     * 利用人数
     * @type {number}
     * @memberof SalesItemSetsApiListSalesItemSets
     */
    usePersonCount?: number
}

/**
 * SalesItemSetsApi - object-oriented interface
 * @export
 * @class SalesItemSetsApi
 * @extends {BaseAPI}
 */
export class SalesItemSetsApi extends BaseAPI {
    /**
     * 検索クエリ * `code` - codeが完全一致したものだけに絞り込みます * `name_alias` - name_aliasが部分一致したものだけに絞り込みます * `use_person_count` - person_count_min以上かつperson_count_max以下のものだけに絞り込みます * `use_date` - use_date_rangeに含まれるものだけに絞り込みます 
     * @summary パッケージ一覧取得
     * @param {SalesItemSetsApiListSalesItemSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesItemSetsApi
     */
    public listSalesItemSets(requestParameters: SalesItemSetsApiListSalesItemSetsRequest, options?: AxiosRequestConfig) {
        return SalesItemSetsApiFp(this.configuration).listSalesItemSets(requestParameters.hotelId, requestParameters.cursor, requestParameters.limit, requestParameters.code, requestParameters.nameAlias, requestParameters.salesItemId, requestParameters.useDate, requestParameters.usePersonCount, options).then((request) => request(this.axios, this.basePath));
    }
}


